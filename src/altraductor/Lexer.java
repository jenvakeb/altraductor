/* The following code was generated by JFlex 1.6.1 */

package altraductor;
import static altraductor.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/betio_000/Documents/NetBeansProjects/ALTraductor/src/altraductor/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\45\1\46\1\46\1\45\22\0\1\34\1\36\6\0"+
    "\1\36\1\36\1\43\1\50\1\36\1\41\1\37\1\42\12\1\1\36"+
    "\1\36\3\0\1\35\1\0\1\5\1\26\1\27\1\4\1\7\1\17"+
    "\1\30\1\24\1\20\1\32\1\23\1\14\1\12\1\15\1\3\1\25"+
    "\1\21\1\11\1\10\1\2\1\22\1\16\1\13\1\31\1\6\1\33"+
    "\1\40\1\0\1\36\35\0\1\36\1\44\1\36\7\0\1\46\u1fa2\0"+
    "\1\46\1\46\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\12\1\1\4\12\1"+
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\13\12\0"+
    "\1\14\2\0\1\15\1\0\1\15\3\0\1\16\7\0"+
    "\1\17\1\0\1\20\1\0\1\21\2\0\1\3\51\0"+
    "\1\4\1\22\4\0\1\22\27\0\1\22\1\0\1\21"+
    "\1\15\2\0\1\22\2\0\1\13\10\0\1\22\15\0"+
    "\1\15\1\23\14\0\1\23\13\0\1\5\11\0\1\24"+
    "\1\0\1\24\6\0\1\25\10\0\1\26\1\24\4\0"+
    "\1\13\1\0\1\4\6\0\1\27\3\0\1\30\7\0"+
    "\1\31\3\0\1\32\12\0\1\21\13\0\1\16\1\33"+
    "\11\0\1\22\4\0\1\27\21\0\1\23\7\0\2\23"+
    "\15\0\1\24\6\0\1\22\17\0\1\32\7\0\1\23"+
    "\17\0\1\32\7\0\1\32\21\0\1\23\12\0\1\34"+
    "\12\0\1\35\4\0\1\15\24\0\1\36\10\0\1\37"+
    "\25\0\1\22\1\32\1\36\1\22\14\0\1\40\7\0"+
    "\1\16\13\0\1\23\1\0\1\16\15\0\1\32\2\0"+
    "\1\41\14\0\1\16\20\0\1\32\35\0\1\27\7\0"+
    "\1\42\1\43\1\22\1\0\1\22\1\44\13\0\1\17"+
    "\6\0\1\13\60\0\1\4\1\0\1\45\10\0\1\46"+
    "\15\0\1\26\22\0\1\23\10\0\1\23\12\0\1\35"+
    "\10\0\1\23\2\0\1\4\3\0\1\47\1\15\1\0"+
    "\1\50\3\0\1\34\1\27\3\0\1\45\10\0\1\17"+
    "\4\0\1\24\11\0\1\24\1\27\10\0\1\16\20\0"+
    "\1\23\1\51\5\0\1\23\1\52\31\0\1\23\1\0"+
    "\1\40\16\0\1\23\1\0\1\27\5\0\1\23\1\32"+
    "\5\0\1\16\1\0\1\23\4\0\1\32\50\0\1\53"+
    "\5\0\1\36\11\0\1\54\12\0\1\45\1\27\2\0"+
    "\1\43\13\0\1\32\6\0\1\13\6\0\1\4\11\0"+
    "\1\24\13\0\1\20\1\24\3\0\1\23\31\0\1\23"+
    "\136\0\1\16\25\0\1\27\57\0\1\55\20\0\1\32"+
    "\12\0\1\56\55\0\1\14\5\0\1\46\21\0\1\41"+
    "\11\0\1\24\44\0\1\20\71\0\1\33\14\0\1\35"+
    "\1\40\1\0\1\14\26\0\1\56\20\0\1\14\25\0"+
    "\1\33\7\0\1\33\3\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[1513];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u03af\0\u03d8\0\u0401\0\u042a\0\51\0\51\0\u0453\0\u047c"+
    "\0\u04a5\0\51\0\51\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\51"+
    "\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921"+
    "\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69"+
    "\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9"+
    "\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41"+
    "\0\u0e6a\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89"+
    "\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1"+
    "\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219"+
    "\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361"+
    "\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9"+
    "\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\51\0\u1ae8"+
    "\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30"+
    "\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78"+
    "\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0"+
    "\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008"+
    "\0\u2031\0\u205a\0\u2083\0\u20ac\0\51\0\u20d5\0\u20fe\0\u2127"+
    "\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f"+
    "\0\u2298\0\u22c1\0\u22ea\0\u2313\0\51\0\u233c\0\u2365\0\u238e"+
    "\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6"+
    "\0\u24ff\0\u2528\0\u2551\0\51\0\u257a\0\u25a3\0\u25cc\0\51"+
    "\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\u26c2\0\u26eb\0\51"+
    "\0\u2714\0\u273d\0\u2766\0\51\0\u278f\0\u27b8\0\u27e1\0\u280a"+
    "\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900\0\51\0\u2929"+
    "\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48\0\u2a71"+
    "\0\u2a9a\0\u2ac3\0\u2aec\0\51\0\u2b15\0\u2b3e\0\u2b67\0\u2b90"+
    "\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8"+
    "\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20"+
    "\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\51\0\u3035\0\u305e\0\u3087"+
    "\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf"+
    "\0\u31f8\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317"+
    "\0\u3340\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f"+
    "\0\u3488\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e\0\u35a7"+
    "\0\u35d0\0\u35f9\0\u3622\0\u364b\0\u3674\0\u369d\0\u0921\0\u36c6"+
    "\0\u36ef\0\u3718\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e"+
    "\0\u3837\0\u3860\0\u0854\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d"+
    "\0\u3956\0\u397f\0\u39a8\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75"+
    "\0\u3a9e\0\u3ac7\0\u3af0\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd"+
    "\0\u3be6\0\u3c0f\0\u3c38\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05"+
    "\0\u3d2e\0\u3d57\0\u3d80\0\u3da9\0\u3dd2\0\u3dfb\0\u3e24\0\u3e4d"+
    "\0\u3e76\0\u3e9f\0\u3ec8\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\u3f95"+
    "\0\u3fbe\0\u3fe7\0\u4010\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd"+
    "\0\u4106\0\u412f\0\u4158\0\u4181\0\u41aa\0\u41d3\0\u41fc\0\u4225"+
    "\0\u424e\0\u4277\0\51\0\u42a0\0\u42c9\0\u42f2\0\u431b\0\u4344"+
    "\0\u436d\0\u4396\0\u43bf\0\u43e8\0\u4411\0\u443a\0\u4463\0\u448c"+
    "\0\u44b5\0\u44de\0\u4507\0\u4530\0\u4559\0\u4582\0\u45ab\0\u45d4"+
    "\0\u45fd\0\u4626\0\u33bb\0\u464f\0\u3ac7\0\u4678\0\u46a1\0\u46ca"+
    "\0\u46f3\0\u471c\0\u4745\0\u476e\0\u4797\0\51\0\u47c0\0\u47e9"+
    "\0\u4812\0\u483b\0\u4864\0\u488d\0\u48b6\0\u48df\0\u4908\0\u4931"+
    "\0\u495a\0\u4983\0\u49ac\0\u49d5\0\u49fe\0\u4a27\0\u4a50\0\u4a79"+
    "\0\u4aa2\0\u4acb\0\u4af4\0\u4b1d\0\u3860\0\51\0\u10fa\0\u4b46"+
    "\0\u4b6f\0\u4b98\0\u4bc1\0\u4bea\0\u4c13\0\u4c3c\0\u4c65\0\u4c8e"+
    "\0\u4cb7\0\u4ce0\0\u4d09\0\51\0\u4d32\0\u4d5b\0\u4d84\0\u4dad"+
    "\0\u4dd6\0\u4dff\0\u4e28\0\u4e51\0\u4e7a\0\u4ea3\0\u4ecc\0\u4ef5"+
    "\0\u4f1e\0\u4f47\0\u4f70\0\u4f99\0\u4fc2\0\u4feb\0\u5014\0\u503d"+
    "\0\u5066\0\u508f\0\u50b8\0\u50e1\0\u510a\0\u5133\0\u515c\0\u5185"+
    "\0\u51ae\0\u51d7\0\u5200\0\u5229\0\u5252\0\u527b\0\u52a4\0\u52cd"+
    "\0\u52f6\0\u531f\0\u5348\0\u5371\0\u539a\0\u53c3\0\u53ec\0\u5415"+
    "\0\u543e\0\u5467\0\u5490\0\u54b9\0\u54e2\0\u550b\0\u5534\0\u555d"+
    "\0\u5586\0\u55af\0\u55d8\0\u5601\0\u562a\0\u5653\0\u567c\0\u56a5"+
    "\0\u56ce\0\u56f7\0\u5720\0\u5749\0\u5772\0\u579b\0\u57c4\0\u57ed"+
    "\0\u5816\0\u583f\0\u5868\0\u5891\0\u58ba\0\u58e3\0\u590c\0\u5935"+
    "\0\u595e\0\u5987\0\u59b0\0\u59d9\0\u5a02\0\u5a2b\0\u5a54\0\u5a7d"+
    "\0\u5aa6\0\u5acf\0\u5af8\0\u5b21\0\u5b4a\0\u5b73\0\u5b9c\0\u5bc5"+
    "\0\u5bee\0\u5c17\0\u5c40\0\u5c69\0\u5c92\0\u5cbb\0\u5ce4\0\u5d0d"+
    "\0\u5d36\0\u5d5f\0\u5d88\0\u5db1\0\u5dda\0\u5e03\0\51\0\51"+
    "\0\51\0\u5e2c\0\u245b\0\51\0\u5e55\0\u5e7e\0\u5ea7\0\u5ed0"+
    "\0\u5ef9\0\u5f22\0\u5f4b\0\u5f74\0\u5f9d\0\u5fc6\0\u5fef\0\u6018"+
    "\0\u6041\0\u606a\0\u6093\0\u60bc\0\u60e5\0\u610e\0\u6137\0\u6160"+
    "\0\u6189\0\u61b2\0\u61db\0\u6204\0\u622d\0\u6256\0\u627f\0\u62a8"+
    "\0\u62d1\0\u62fa\0\u6323\0\u634c\0\u6375\0\u639e\0\u63c7\0\u63f0"+
    "\0\u6419\0\u6442\0\u646b\0\u6494\0\u64bd\0\u64e6\0\u650f\0\u6538"+
    "\0\u6561\0\u658a\0\u65b3\0\u65dc\0\u6605\0\u662e\0\u6657\0\u6680"+
    "\0\u66a9\0\u66d2\0\u66fb\0\u6724\0\u674d\0\u6776\0\u679f\0\u67c8"+
    "\0\u67f1\0\u681a\0\u6843\0\u686c\0\u6895\0\u68be\0\u68e7\0\u6910"+
    "\0\u6939\0\u25a3\0\u6962\0\u698b\0\u69b4\0\u69dd\0\u6a06\0\u6a2f"+
    "\0\u6a58\0\u6a81\0\u6aaa\0\u6ad3\0\u6afc\0\u6b25\0\u6b4e\0\u6b77"+
    "\0\u6ba0\0\u6bc9\0\u6bf2\0\u6c1b\0\u6c44\0\u6c6d\0\u6c96\0\u6cbf"+
    "\0\u3087\0\u6ce8\0\u6d11\0\u6d3a\0\u6d63\0\u6d8c\0\u6db5\0\u6dde"+
    "\0\u6e07\0\u6e30\0\u6e59\0\u6e82\0\u6eab\0\u6ed4\0\u6efd\0\u6f26"+
    "\0\u6f4f\0\u6f78\0\u6fa1\0\u6fca\0\u3c38\0\u6ff3\0\u701c\0\u7045"+
    "\0\u706e\0\u7097\0\u70c0\0\u70e9\0\u7112\0\u713b\0\u7164\0\u718d"+
    "\0\u71b6\0\u71df\0\u7208\0\u7231\0\u725a\0\u7283\0\u72ac\0\u5d88"+
    "\0\u72d5\0\u72fe\0\u7327\0\u7350\0\u7379\0\u73a2\0\u73cb\0\u73f4"+
    "\0\u3cdc\0\u741d\0\u7446\0\u746f\0\u7498\0\u74c1\0\u74ea\0\51"+
    "\0\u0b0d\0\u7513\0\51\0\u753c\0\u7565\0\u758e\0\51\0\u75b7"+
    "\0\u75e0\0\u7609\0\u7632\0\51\0\u765b\0\u7684\0\u76ad\0\u76d6"+
    "\0\u76ff\0\u7728\0\u7751\0\u777a\0\51\0\u77a3\0\u77cc\0\u77f5"+
    "\0\u5ce4\0\u781e\0\u7847\0\u7870\0\u7899\0\u78c2\0\u78eb\0\u7914"+
    "\0\u793d\0\u7966\0\u798f\0\u79b8\0\u4feb\0\u79e1\0\u7a0a\0\u7a33"+
    "\0\u7a5c\0\u7a85\0\u7aae\0\u7ad7\0\u7b00\0\u7b29\0\u7b52\0\u7b7b"+
    "\0\u7ba4\0\u7bcd\0\u7bf6\0\u7c1f\0\u7c48\0\u7c71\0\u7c9a\0\u7cc3"+
    "\0\u7cec\0\u7d15\0\u7d3e\0\u7d67\0\u7d90\0\u7db9\0\u7de2\0\51"+
    "\0\u7e0b\0\u7e34\0\u7e5d\0\u7e86\0\u7eaf\0\u7ed8\0\51\0\u7f01"+
    "\0\u7f2a\0\u7f53\0\u7f7c\0\u7fa5\0\u7fce\0\u7ff7\0\u8020\0\u8049"+
    "\0\u8072\0\u809b\0\u80c4\0\u80ed\0\u8116\0\u813f\0\u8168\0\u8191"+
    "\0\u81ba\0\u81e3\0\u820c\0\u8235\0\u825e\0\u8287\0\u746f\0\u82b0"+
    "\0\u2d2a\0\u82d9\0\u2d7c\0\u8302\0\u832b\0\u8354\0\u837d\0\u83a6"+
    "\0\u83cf\0\u83f8\0\u8421\0\u844a\0\u8473\0\u849c\0\u84c5\0\u84ee"+
    "\0\u8517\0\u62d1\0\u8540\0\u8569\0\u8592\0\u85bb\0\u85e4\0\u860d"+
    "\0\u8636\0\u865f\0\u8688\0\u86b1\0\u86da\0\u8703\0\u872c\0\u8755"+
    "\0\u877e\0\u87a7\0\u2031\0\u87d0\0\u87f9\0\u8822\0\u884b\0\u0c03"+
    "\0\u8874\0\u889d\0\u88c6\0\u88ef\0\u8918\0\u8941\0\u896a\0\u8993"+
    "\0\u89bc\0\u89e5\0\u3741\0\u8a0e\0\u8a37\0\u8a60\0\u8a89\0\u8ab2"+
    "\0\u8adb\0\u8b04\0\u8b2d\0\u8b56\0\u8b7f\0\u8ba8\0\u8bd1\0\u8bfa"+
    "\0\u8c23\0\u8c4c\0\u8c75\0\u8c9e\0\u8cc7\0\u8cf0\0\u8d19\0\u8d42"+
    "\0\u8d6b\0\u8d94\0\u8dbd\0\u8de6\0\u8e0f\0\u8e38\0\u8e61\0\u8e8a"+
    "\0\51\0\u8eb3\0\u8edc\0\u8f05\0\u8f2e\0\u8f57\0\u8f80\0\u8fa9"+
    "\0\u8fd2\0\u8ffb\0\u9024\0\u904d\0\u9076\0\u909f\0\u90c8\0\u90f1"+
    "\0\51\0\u911a\0\u9143\0\u916c\0\u9195\0\u91be\0\u91e7\0\u9210"+
    "\0\u9239\0\u9262\0\u928b\0\u3cdc\0\u92b4\0\u92dd\0\u9306\0\u2833"+
    "\0\u932f\0\u9358\0\u9381\0\u93aa\0\u93d3\0\u93fc\0\u9425\0\u944e"+
    "\0\u9477\0\u94a0\0\u94c9\0\u62d1\0\u94f2\0\u951b\0\u9544\0\u956d"+
    "\0\u9596\0\u95bf\0\51\0\u95e8\0\u9611\0\u963a\0\u9663\0\u968c"+
    "\0\u96b5\0\u96de\0\u9707\0\u9730\0\u9759\0\u9782\0\u97ab\0\u97d4"+
    "\0\u97fd\0\u9826\0\u984f\0\u6f26\0\u9878\0\u98a1\0\u98ca\0\u98f3"+
    "\0\u991c\0\u9945\0\u996e\0\u9997\0\u99c0\0\u99e9\0\u9a12\0\51"+
    "\0\u9a3b\0\u9a64\0\u9a8d\0\u9ab6\0\u9adf\0\u9b08\0\u9b31\0\u9b5a"+
    "\0\u9b83\0\u9bac\0\u9bd5\0\u9bfe\0\u9c27\0\u9c50\0\u9c79\0\u9ca2"+
    "\0\u9ccb\0\u9cf4\0\u9d1d\0\u9d46\0\u9d6f\0\u9d98\0\u9dc1\0\u9dea"+
    "\0\u9e13\0\u8569\0\u9e3c\0\u9e65\0\u9e8e\0\u9eb7\0\u9ee0\0\u9f09"+
    "\0\u9f32\0\u9f5b\0\u9f84\0\u9fad\0\u9fd6\0\u9fff\0\ua028\0\ua051"+
    "\0\ua07a\0\ua0a3\0\ua0cc\0\ua0f5\0\ua11e\0\ua147\0\ua170\0\ua199"+
    "\0\ua1c2\0\ua1eb\0\ua214\0\ua23d\0\ua266\0\ua28f\0\ua2b8\0\ua2e1"+
    "\0\ua30a\0\ua333\0\ua35c\0\ua385\0\ua3ae\0\ua3d7\0\ua400\0\ua429"+
    "\0\ua452\0\ua47b\0\ua4a4\0\ua4cd\0\ua4f6\0\ua51f\0\ua548\0\ua571"+
    "\0\ua59a\0\ua5c3\0\ua5ec\0\ua615\0\ua63e\0\ua667\0\ua690\0\ua6b9"+
    "\0\ua6e2\0\ua70b\0\u16be\0\ua734\0\ua75d\0\ua786\0\ua7af\0\ua7d8"+
    "\0\ua801\0\ua82a\0\ua853\0\ua87c\0\ua8a5\0\ua8ce\0\ua8f7\0\ua920"+
    "\0\ua949\0\ua972\0\ua99b\0\ua9c4\0\ua9ed\0\uaa16\0\uaa3f\0\uaa68"+
    "\0\uaa91\0\uaaba\0\uaae3\0\uab0c\0\uab35\0\uab5e\0\uab87\0\uabb0"+
    "\0\uabd9\0\uac02\0\uac2b\0\uac54\0\uac7d\0\uaca6\0\uaccf\0\uacf8"+
    "\0\uad21\0\uad4a\0\uad73\0\uad9c\0\uadc5\0\uadee\0\uae17\0\uae40"+
    "\0\uae69\0\uae92\0\uaebb\0\uaee4\0\uaf0d\0\uaf36\0\uaf5f\0\uaf88"+
    "\0\uafb1\0\uafda\0\ub003\0\ub02c\0\ub055\0\ub07e\0\ub0a7\0\ub0d0"+
    "\0\ub0f9\0\ub122\0\ub14b\0\ub174\0\ub19d\0\ub1c6\0\ub1ef\0\ub218"+
    "\0\ub241\0\ub26a\0\ub293\0\ub2bc\0\ub2e5\0\ub30e\0\ub337\0\ub360"+
    "\0\ub389\0\ub3b2\0\ub3db\0\ub404\0\ub42d\0\ub456\0\ub47f\0\ub4a8"+
    "\0\ub4d1\0\ub4fa\0\ub523\0\ub54c\0\ub575\0\ub59e\0\ub5c7\0\ub5f0"+
    "\0\u40dd\0\ub619\0\ub642\0\ub66b\0\ub694\0\ub6bd\0\ub6e6\0\ub70f"+
    "\0\ub738\0\ub761\0\ub78a\0\ub7b3\0\ub7dc\0\ub805\0\ub82e\0\ub857"+
    "\0\ub880\0\ub8a9\0\ub8d2\0\51\0\ub8fb\0\ub924\0\ub94d\0\ub976"+
    "\0\ub99f\0\ub9c8\0\ub9f1\0\uba1a\0\uba43\0\uba6c\0\uba95\0\ubabe"+
    "\0\ubae7\0\ubb10\0\ubb39\0\ubb62\0\ubb8b\0\ubbb4\0\ubbdd\0\ubc06"+
    "\0\ubc2f\0\ubc58\0\ubc81\0\ubcaa\0\ubcd3\0\ubcfc\0\ubd25\0\51"+
    "\0\ubd4e\0\ubd77\0\ubda0\0\ubdc9\0\ubdf2\0\ube1b\0\ube44\0\ube6d"+
    "\0\ube96\0\ubebf\0\ubee8\0\ubf11\0\ubf3a\0\ubf63\0\ubf8c\0\ubfb5"+
    "\0\ubfde\0\uc007\0\uc030\0\uc059\0\uc082\0\uc0ab\0\uc0d4\0\uc0fd"+
    "\0\uc126\0\uc14f\0\uc178\0\uc1a1\0\uc1ca\0\uc1f3\0\uc21c\0\uc245"+
    "\0\uc26e\0\uc297\0\uc2c0\0\u4e51\0\uc2e9\0\uc312\0\uc33b\0\uc364"+
    "\0\uc38d\0\uc3b6\0\uc3df\0\uc408\0\uc431\0\51\0\uc45a\0\uc483"+
    "\0\uc4ac\0\uc4d5\0\uc4fe\0\51\0\uc527\0\uc550\0\uc579\0\uc5a2"+
    "\0\uc5cb\0\uc5f4\0\uc61d\0\uc646\0\uc66f\0\uc698\0\uc6c1\0\uc6ea"+
    "\0\uc713\0\uc73c\0\uc765\0\uc78e\0\uc7b7\0\51\0\uc7e0\0\uc809"+
    "\0\uc832\0\uc85b\0\uc884\0\uc8ad\0\uc8d6\0\uc8ff\0\uc928\0\u698b"+
    "\0\uc951\0\uc97a\0\uc9a3\0\uc9cc\0\uc9f5\0\uca1e\0\uca47\0\uca70"+
    "\0\uca99\0\ucac2\0\ucaeb\0\ucb14\0\ucb3d\0\ucb66\0\ucb8f\0\ucbb8"+
    "\0\ucbe1\0\ucc0a\0\ucc33\0\ucc5c\0\ucc85\0\uccae\0\uccd7\0\ucd00"+
    "\0\ucd29\0\ucd52\0\ucd7b\0\ucda4\0\ucdcd\0\ucdf6\0\uce1f\0\uce48"+
    "\0\uce71\0\uce9a\0\ucec3\0\uceec\0\u9076\0\ucf15\0\ucf3e\0\ucf67"+
    "\0\ucf90\0\ucfb9\0\ucfe2\0\ud00b\0\ud034\0\ud05d\0\ud086\0\ud0af"+
    "\0\ud0d8\0\ud101\0\ud12a\0\ud153\0\ud17c\0\ud1a5\0\ud1ce\0\ud1f7"+
    "\0\ud220\0\ud249\0\ud272\0\ud29b\0\ud2c4\0\ud2ed\0\ud316\0\ud33f"+
    "\0\ud368\0\ud391\0\ud3ba\0\ud3e3\0\ud40c\0\ud435\0\ud45e\0\ud487"+
    "\0\ud4b0\0\ud4d9\0\ud502\0\ud52b\0\ud554\0\ud57d\0\ud5a6\0\ud5cf"+
    "\0\ud5f8\0\ud621\0\ud64a\0\ud673\0\ud69c\0\ud6c5\0\ud6ee\0\ud717"+
    "\0\ud740\0\ud769\0\ud792\0\ud7bb\0\ud7e4\0\ud80d\0\ua87c\0\ud836"+
    "\0\ud85f\0\ud888\0\ud8b1\0\ud8da\0\ud903\0\ud92c\0\ud955\0\ud97e"+
    "\0\ud9a7\0\ud9d0\0\ud9f9\0\u2833\0\u2833\0\uda22\0\uc7e0\0\uda4b"+
    "\0\uda74\0\uda9d\0\udac6\0\udaef\0\udb18\0\udb41\0\udb6a\0\udb93"+
    "\0\udbbc\0\udbe5\0\udc0e\0\udc37\0\udc60\0\udc89\0\udcb2\0\udcdb"+
    "\0\udd04\0\udd2d\0\udd56\0\udd7f\0\udda8\0\u2833\0\uddd1\0\uddfa"+
    "\0\ude23\0\ude4c\0\ude75\0\ude9e\0\udec7\0\udef0\0\udf19\0\udf42"+
    "\0\udf6b\0\udf94\0\udfbd\0\udfe6\0\ue00f\0\ue038\0\ud5f8\0\ue061"+
    "\0\ue08a\0\ue0b3\0\ue0dc\0\ue105\0\ue12e\0\ue157\0\ue180\0\ue1a9"+
    "\0\ue1d2\0\ue1fb\0\ue224\0\ue24d\0\ue276\0\ue29f\0\ue2c8\0\ue2f1"+
    "\0\ue31a\0\ue343\0\ue36c\0\ue395\0\ude9e\0\ue3be\0\ue3e7\0\ue410"+
    "\0\ue439\0\ue462\0\ue48b\0\ue4b4\0\udb6a\0\ue4dd\0\ue506\0\ue52f"+
    "\0\ue31a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1513];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\2\1\33\1\34\1\35\2\36\1\37\1\36"+
    "\1\40\1\41\1\42\1\2\1\35\1\0\1\35\1\43"+
    "\54\0\1\44\1\0\1\45\1\0\1\46\1\0\1\47"+
    "\1\0\1\50\4\0\1\51\1\0\1\52\1\0\1\53"+
    "\26\0\1\54\3\0\1\55\1\0\1\56\1\57\1\0"+
    "\1\60\1\61\1\62\1\63\1\64\2\0\1\65\3\0"+
    "\1\66\1\67\1\0\1\70\22\0\1\71\1\0\1\72"+
    "\1\73\1\74\1\0\1\75\6\0\1\76\1\0\1\77"+
    "\30\0\1\100\1\0\1\101\3\0\1\102\1\103\1\104"+
    "\1\105\1\106\1\107\1\0\1\110\1\111\1\0\1\112"+
    "\2\0\1\113\1\114\1\115\24\0\1\116\3\0\1\117"+
    "\45\0\1\120\1\121\1\0\1\122\4\0\1\123\1\124"+
    "\1\125\1\126\1\127\6\0\1\130\1\131\22\0\1\132"+
    "\1\133\1\0\1\134\1\0\1\135\2\0\1\136\1\137"+
    "\1\140\1\141\2\0\1\142\1\143\1\144\1\145\1\146"+
    "\1\147\1\0\1\150\24\0\1\151\1\0\1\152\1\0"+
    "\1\153\10\0\1\154\1\0\1\155\1\0\1\156\27\0"+
    "\1\157\1\0\1\160\1\161\1\162\10\0\1\163\1\0"+
    "\1\164\31\0\1\165\1\0\1\166\1\0\1\167\10\0"+
    "\1\170\3\0\1\171\27\0\1\172\1\0\1\173\1\0"+
    "\1\174\4\0\1\175\3\0\1\176\33\0\1\177\1\0"+
    "\1\200\1\0\1\201\10\0\1\202\1\0\1\203\33\0"+
    "\1\204\1\0\1\205\10\0\1\206\1\0\1\207\31\0"+
    "\1\210\1\0\1\211\1\0\1\212\1\0\1\213\2\0"+
    "\1\214\3\0\1\215\1\0\1\216\30\0\1\217\1\0"+
    "\1\220\3\0\1\221\4\0\1\222\12\0\1\223\42\0"+
    "\1\224\36\0\1\225\1\226\3\0\1\227\7\0\1\230"+
    "\26\0\1\231\1\0\1\232\1\0\1\233\5\0\1\234"+
    "\2\0\1\235\33\0\1\236\1\0\1\237\1\240\1\241"+
    "\10\0\1\242\1\0\1\243\31\0\1\244\1\0\1\245"+
    "\1\246\1\247\1\0\1\250\2\0\1\251\3\0\1\252"+
    "\1\0\1\253\1\0\1\254\27\0\1\255\1\0\1\256"+
    "\1\257\1\260\1\0\1\261\2\0\1\262\3\0\1\263"+
    "\1\0\1\264\31\0\1\265\1\0\1\266\1\0\1\267"+
    "\1\0\1\270\2\0\1\271\3\0\1\272\1\0\1\273"+
    "\1\0\1\274\27\0\1\275\1\0\1\276\1\0\1\277"+
    "\1\0\1\300\6\0\1\301\1\0\1\302\31\0\1\303"+
    "\3\0\1\304\12\0\1\305\35\0\1\306\100\0\1\307"+
    "\52\0\1\310\51\0\1\311\12\0\1\312\1\313\3\0"+
    "\1\314\1\315\1\316\6\0\1\317\36\0\1\320\15\0"+
    "\1\321\27\0\1\322\7\0\1\323\36\0\1\324\50\0"+
    "\1\325\3\0\1\326\71\0\1\327\31\0\1\330\3\0"+
    "\1\331\36\0\1\332\1\0\1\333\1\0\1\334\1\0"+
    "\1\335\6\0\1\336\32\0\1\327\21\0\1\337\34\0"+
    "\1\340\42\0\1\341\53\0\1\342\26\0\1\343\30\0"+
    "\1\70\3\0\1\344\34\0\1\345\53\0\1\346\10\0"+
    "\1\347\13\0\1\350\23\0\1\351\43\0\1\352\14\0"+
    "\1\353\33\0\1\354\6\0\1\355\42\0\1\356\47\0"+
    "\1\357\61\0\1\360\1\361\1\362\1\113\10\0\1\363"+
    "\1\70\26\0\1\364\6\0\1\365\2\0\1\366\1\0"+
    "\1\367\56\0\1\370\25\0\1\371\1\0\1\372\1\373"+
    "\4\0\1\374\11\0\1\375\24\0\1\376\1\0\1\377"+
    "\1\u0100\1\u0101\10\0\1\u0102\1\0\1\u0103\32\0\1\u0104"+
    "\53\0\1\u0105\1\0\1\u0106\15\0\1\u0107\1\u0104\27\0"+
    "\1\u0104\63\0\1\u0108\26\0\2\u0109\1\u010a\22\u0109\1\u010b"+
    "\6\u0109\1\u010c\10\u0109\2\0\2\u0109\2\0\1\u010d\1\u010e"+
    "\3\0\1\u010f\2\0\1\u0110\5\0\1\u0111\6\0\1\u0112"+
    "\1\u0113\45\0\1\u0114\26\0\1\u0115\1\0\1\u0116\45\0"+
    "\1\u0117\7\0\1\u0118\1\u0119\1\u011a\36\0\1\u011b\1\0"+
    "\1\u011c\3\0\1\u011d\7\0\1\u011e\32\0\1\u011f\57\0"+
    "\1\u0120\65\0\1\u0121\31\0\1\70\44\0\1\u0122\47\0"+
    "\1\u0123\6\0\1\u0124\15\0\1\u0125\43\0\1\u0126\33\0"+
    "\1\u0127\2\0\1\u0128\70\0\1\u0129\22\0\1\u012a\6\0"+
    "\1\u012b\16\0\1\u012c\34\0\1\70\43\0\1\u012d\24\0"+
    "\1\u012e\44\0\1\u012f\27\0\1\u0130\60\0\1\u0131\33\0"+
    "\1\u0132\25\0\1\u0133\23\0\1\u0134\16\0\1\u0135\56\0"+
    "\1\364\23\0\1\u0136\1\0\1\u0137\1\0\1\u0138\1\0"+
    "\1\u0139\6\0\1\u013a\1\0\1\u013b\40\0\1\u013c\1\u013d"+
    "\1\76\2\0\1\u013e\2\0\1\u013f\30\0\1\u0104\1\0"+
    "\1\u0140\1\0\1\u013d\2\0\1\u0141\1\0\1\u0104\1\u0142"+
    "\1\u0143\2\0\1\76\32\0\1\u013d\2\0\1\u0144\1\0"+
    "\1\u0145\3\0\1\u0146\1\u0147\1\u0148\1\u0149\10\0\1\u014a"+
    "\30\0\1\u014b\10\0\1\u014c\37\0\1\u014d\44\0\1\u014e"+
    "\3\0\1\u014f\10\0\1\u0150\33\0\1\u0151\1\0\1\u0152"+
    "\45\0\1\u013d\12\0\1\u0153\13\0\1\u0154\41\0\1\u0155"+
    "\37\0\1\u0156\3\0\1\u0157\55\0\1\u0158\31\0\1\u0159"+
    "\1\0\1\u015a\1\0\1\u015b\1\0\1\u015c\6\0\1\u015d"+
    "\1\0\1\u015e\31\0\1\u015f\1\0\1\u0160\1\0\1\u0161"+
    "\1\0\1\u0162\2\0\1\u0163\3\0\1\u0164\33\0\1\u0165"+
    "\20\0\1\u0166\27\0\1\55\1\u0167\1\u0168\2\0\1\u0167"+
    "\42\0\1\u0169\6\0\1\u016a\3\0\1\u016b\2\0\1\u016c"+
    "\5\0\1\u016d\1\u016e\26\0\1\u016f\17\0\1\u0170\2\0"+
    "\1\u0171\24\0\1\u0172\10\0\1\131\50\0\1\u0173\53\0"+
    "\1\u0174\32\0\1\u0175\1\0\1\u0176\3\0\1\u0177\1\u0178"+
    "\3\0\1\u0179\4\0\1\u017a\32\0\1\u0167\4\0\1\u017b"+
    "\1\u017c\2\0\1\u017d\2\0\1\u017e\2\0\1\u017f\3\0"+
    "\1\u0180\1\u0181\30\0\1\u0182\42\0\1\u0183\2\0\1\u0184"+
    "\1\0\1\u015e\17\0\1\u0185\31\0\1\u0186\4\0\1\u0187"+
    "\43\0\1\u0188\51\0\1\u0189\41\0\1\u018a\5\0\1\u018b"+
    "\3\0\1\u018c\36\0\1\u0132\4\0\1\u018d\1\0\1\u0167"+
    "\2\0\1\u018e\1\u018f\35\0\1\u0190\51\0\1\u0191\1\0"+
    "\1\u0192\1\u0193\1\u0194\10\0\1\u0195\40\0\1\u0196\1\u0197"+
    "\10\0\1\u0198\3\0\1\55\24\0\1\u0199\1\0\1\u019a"+
    "\1\0\1\u0104\4\0\1\u019b\4\0\1\u019c\2\0\1\u0129"+
    "\27\0\1\u019d\1\u019e\1\u0104\1\u019f\7\0\1\u016f\40\0"+
    "\1\u01a0\45\0\1\u0104\1\u01a1\4\0\1\u01a2\6\0\1\u01a3"+
    "\6\0\1\u01a4\1\0\1\u01a5\2\0\1\u01a6\17\0\1\u01a7"+
    "\10\0\1\u01a8\20\0\1\u01a9\16\0\1\u01aa\12\0\1\u01ab"+
    "\40\0\1\u01ac\5\0\1\345\2\0\1\u01ad\1\0\1\u01ae"+
    "\6\0\1\320\1\0\1\u01af\34\0\1\u01b0\11\0\1\u01b1"+
    "\32\0\1\u01b2\3\0\1\u01b3\47\0\1\u01b4\51\0\1\u01b5"+
    "\47\0\1\u01b6\50\0\1\u01b7\45\0\1\u01b8\10\0\1\u01b9"+
    "\5\0\1\u0100\22\0\1\345\6\0\1\u01ba\1\u01bb\1\0"+
    "\1\u01bc\12\0\1\u01bd\25\0\1\u0104\7\0\1\u01be\37\0"+
    "\1\u01bf\3\0\1\u01c0\10\0\1\u01c1\1\0\1\u01c2\31\0"+
    "\1\u01c3\1\0\1\u01c4\1\70\1\u01c5\50\0\1\u01c6\1\u01c7"+
    "\1\u01c8\3\0\1\u01c9\1\u01ca\1\u01cb\33\0\1\u01cc\56\0"+
    "\1\u01cd\47\0\1\u01ce\51\0\1\u01cf\3\0\1\u01d0\36\0"+
    "\1\u01d1\5\0\1\u01d2\23\0\1\u01d3\36\0\1\u01d4\46\0"+
    "\1\u01d5\35\0\1\u01d6\65\0\1\u01d7\32\0\1\u01d8\7\0"+
    "\1\u01d9\37\0\1\u01da\4\0\1\u01db\45\0\1\u01dc\60\0"+
    "\1\u01dd\41\0\1\364\1\u01de\15\0\1\u018f\26\0\1\u01df"+
    "\3\0\1\u01e0\55\0\1\u01e1\1\u01e2\35\0\1\u013d\6\0"+
    "\1\u01e3\1\0\1\u01e4\1\u016f\1\u01e5\4\0\1\u01e6\30\0"+
    "\1\364\1\0\1\u0104\5\0\1\55\2\0\1\u01e7\1\u017f"+
    "\1\0\1\u01e8\2\0\1\113\1\0\1\u01e9\32\0\1\u01ea"+
    "\46\0\1\u01eb\3\0\1\u01ec\2\0\1\76\1\70\35\0"+
    "\1\u013d\1\0\1\u01ed\3\0\1\u01ee\1\0\1\u01ef\1\0"+
    "\1\u01f0\10\0\1\u01f1\34\0\1\u015e\1\u01f2\2\0\1\u01f3"+
    "\44\0\1\u01f4\2\0\1\u01f5\36\0\1\u01f6\3\0\1\u013d"+
    "\1\0\1\u01f7\1\u01f8\3\0\1\u01f9\2\0\1\u01fa\7\0"+
    "\1\u0129\22\0\1\u01fb\53\0\1\u01fc\3\0\1\u01fd\3\0"+
    "\1\u01fe\7\0\1\u01ff\26\0\1\u0200\1\0\1\u0201\50\0"+
    "\1\u0202\14\0\1\u0203\56\0\1\u0204\22\0\1\u0104\7\0"+
    "\1\u0205\41\0\1\u0206\1\0\1\u0207\1\u0208\44\0\1\u0209"+
    "\2\0\1\u020a\3\0\1\u020b\2\0\1\u020c\5\0\1\u020d"+
    "\6\0\1\364\21\0\1\70\1\0\1\u0140\10\0\1\320"+
    "\5\0\1\u020e\2\0\1\u020f\1\0\1\364\22\0\1\u0210"+
    "\2\0\1\u0211\1\0\1\u0212\1\u0213\3\0\1\u0214\1\u0215"+
    "\1\0\1\u0216\7\0\1\u0217\1\u0218\23\0\1\u0219\1\0"+
    "\1\u021a\1\0\1\u021b\10\0\1\u021c\33\0\1\u021d\3\0"+
    "\1\u021e\12\0\1\u021f\30\0\1\u0220\1\u0221\1\u0104\4\0"+
    "\1\u0222\3\0\1\u016f\35\0\1\u0223\3\0\1\u013d\1\0"+
    "\1\u0224\1\u0225\2\0\1\122\3\0\1\371\33\0\1\u0226"+
    "\1\0\1\u0227\2\0\1\u0228\1\u0229\1\u022a\1\70\1\u022b"+
    "\1\u022c\4\0\1\u022d\3\0\1\u022e\1\u022f\23\0\1\u0230"+
    "\5\0\1\u0231\1\u0232\1\u0233\2\0\1\u0234\4\0\1\u0235"+
    "\2\0\1\u0236\37\0\1\u0237\37\0\1\u0238\1\0\1\u0239"+
    "\1\0\1\u023a\12\0\1\u023b\31\0\1\u023c\1\0\1\u023d"+
    "\1\0\1\u023e\12\0\1\u023f\30\0\1\u0240\50\0\1\u0241"+
    "\22\0\1\364\1\0\1\u0242\24\0\1\u0243\1\0\1\u0244"+
    "\1\0\1\u0245\10\0\1\u0246\33\0\1\u017a\1\0\1\u0247"+
    "\3\0\1\u0248\2\0\1\u0249\1\u022a\35\0\1\u0129\6\0"+
    "\1\u024a\41\0\1\u013d\12\0\1\u024b\36\0\1\u024c\1\0"+
    "\1\u024d\1\0\1\u024e\10\0\1\u024f\41\0\1\u0250\4\0"+
    "\1\u017f\37\0\1\u0251\1\u0252\6\0\1\364\2\0\1\u0253"+
    "\52\0\1\u0254\3\0\1\364\35\0\1\u0255\1\u0256\40\0"+
    "\1\u0257\72\0\1\u0258\61\0\1\36\52\0\1\u0259\7\0"+
    "\45\311\2\0\2\311\5\0\1\u025a\47\0\1\70\46\0"+
    "\1\u025b\51\0\1\u025c\52\0\1\u025d\7\0\1\364\44\0"+
    "\1\364\62\0\1\364\41\0\1\u0129\63\0\1\u025e\23\0"+
    "\1\u025f\106\0\1\u0260\24\0\1\u0261\1\u0262\42\0\1\372"+
    "\43\0\1\u012c\20\0\1\u0263\32\0\1\u0264\53\0\1\u0265"+
    "\11\0\1\u0266\30\0\1\u0267\12\0\1\u0268\41\0\1\u0269"+
    "\1\0\1\u0265\1\u026a\1\u026b\2\0\1\u026c\2\0\1\u026d"+
    "\33\0\1\u026e\3\0\1\u01ca\51\0\1\u0267\1\u026f\46\0"+
    "\1\u0270\43\0\1\327\57\0\1\u0271\54\0\1\u0272\42\0"+
    "\1\u0273\56\0\1\u0274\67\0\1\u0275\17\0\1\u0276\47\0"+
    "\1\u0277\57\0\1\u0278\46\0\1\u0279\61\0\1\u027a\40\0"+
    "\1\u027b\50\0\1\u027c\56\0\1\u027d\35\0\1\u027e\62\0"+
    "\1\u027f\60\0\1\u0280\32\0\1\370\13\0\1\u0263\27\0"+
    "\1\u0281\75\0\1\u020e\35\0\1\u0282\64\0\1\u0283\34\0"+
    "\1\u018f\45\0\1\70\57\0\1\u0284\4\0\1\u0285\25\0"+
    "\1\u0286\51\0\1\u0287\57\0\1\u0288\3\0\1\u0167\45\0"+
    "\1\u0289\1\0\1\u028a\12\0\1\u028b\25\0\1\u028c\2\0"+
    "\1\u028d\2\0\1\u0104\53\0\1\u012a\47\0\1\u028e\67\0"+
    "\1\u028f\34\0\1\u0290\53\0\1\70\41\0\1\u0227\34\0"+
    "\5\u0109\1\u0291\37\u0109\2\0\7\u0109\1\u0291\3\u0109\1\u0292"+
    "\33\u0109\2\0\7\u0109\1\u0293\37\u0109\2\0\4\u0109\1\u0294"+
    "\2\u0109\1\u0291\6\u0109\1\u0295\3\u0109\1\u0296\24\u0109\2\0"+
    "\2\u0109\20\0\1\u0297\40\0\1\u0167\11\0\1\u0298\33\0"+
    "\1\u0299\53\0\1\u029a\64\0\1\u029b\33\0\1\u029c\65\0"+
    "\1\u029d\47\0\1\u029e\33\0\1\u029f\14\0\1\u017f\51\0"+
    "\1\u02a0\33\0\1\u02a1\46\0\1\u02a2\63\0\1\u02a3\37\0"+
    "\1\u02a4\54\0\1\u02a5\47\0\1\u02a6\45\0\1\u02a7\75\0"+
    "\1\u02a8\23\0\1\u02a9\63\0\1\u02aa\31\0\1\u02ab\5\0"+
    "\1\u02ac\42\0\1\u02ad\50\0\1\u02ae\14\0\1\u02af\41\0"+
    "\1\u02b0\3\0\1\u02b1\44\0\1\u02b2\41\0\1\u02b3\55\0"+
    "\1\364\50\0\1\u0289\55\0\1\u025a\50\0\1\113\51\0"+
    "\1\u02b4\1\u02b5\6\0\1\u02b6\1\0\1\u02b7\31\0\1\u02b8"+
    "\60\0\1\u02b9\41\0\1\u02ba\3\0\1\u02bb\42\0\1\u02bc"+
    "\65\0\1\u02bd\50\0\1\u02be\41\0\1\u02bf\40\0\1\u02c0"+
    "\46\0\1\u02c1\10\0\1\u012a\10\0\1\364\25\0\1\u01aa"+
    "\6\0\1\u0264\3\0\1\u016f\40\0\1\u02c2\52\0\1\u02c3"+
    "\10\0\1\u02c4\1\0\1\u02c5\43\0\1\u02c6\11\0\1\u02c6"+
    "\25\0\1\u02c7\10\0\1\73\42\0\1\u02c8\43\0\1\u02c9"+
    "\76\0\1\u02ca\34\0\1\u02cb\40\0\1\u02cc\56\0\1\u02cd"+
    "\61\0\1\u0104\4\0\1\u0104\34\0\1\70\7\0\1\u02ce"+
    "\7\0\1\u02cf\31\0\1\370\5\0\1\u013d\34\0\1\76"+
    "\5\0\1\370\37\0\1\u02d0\7\0\1\u013d\36\0\1\u0104"+
    "\1\0\1\u013d\53\0\1\u02d1\44\0\1\u02d2\61\0\1\u02c2"+
    "\50\0\1\u02d3\41\0\1\u02d4\1\0\1\u02d5\43\0\1\u0175"+
    "\10\0\1\u0140\44\0\1\u01de\15\0\1\u018f\27\0\1\u017f"+
    "\57\0\1\u02d6\55\0\1\122\2\0\1\113\50\0\1\u013d"+
    "\3\0\1\u02d7\1\u013d\22\0\1\u02d8\66\0\1\u02d9\50\0"+
    "\1\u02da\53\0\1\370\4\0\1\370\35\0\1\u0107\35\0"+
    "\1\u0104\1\u02db\5\0\1\u0167\1\0\1\u02dc\1\0\1\u0167"+
    "\44\0\1\u0107\11\0\1\u029a\32\0\1\u02d4\1\0\1\u02dd"+
    "\46\0\1\u02de\12\0\1\u02df\45\0\1\u017f\7\0\1\364"+
    "\25\0\1\u013d\66\0\1\u02e0\2\0\1\u012a\36\0\1\u02e1"+
    "\44\0\1\u02c6\1\0\1\u016f\4\0\1\u02c2\1\u016f\42\0"+
    "\1\u02e2\10\0\1\u02e3\1\0\1\u02e4\46\0\1\u015e\32\0"+
    "\1\u013d\1\0\1\327\7\0\1\u02c2\1\u02e5\44\0\1\u02e6"+
    "\46\0\1\u02e7\45\0\1\364\46\0\1\u02e8\55\0\1\366"+
    "\71\0\1\u0104\35\0\1\u02d6\61\0\1\u02e9\25\0\1\u02cd"+
    "\51\0\1\u013d\46\0\1\u02ea\53\0\1\u02eb\47\0\1\u012a"+
    "\2\0\1\u013d\56\0\1\u02ec\57\0\1\70\33\0\1\u01f0"+
    "\62\0\1\u02ed\36\0\1\u02ee\43\0\1\u02ef\20\0\1\u02f0"+
    "\35\0\1\113\51\0\1\u02f1\51\0\1\u02f2\40\0\1\u02f3"+
    "\62\0\1\u02f4\43\0\1\u013d\65\0\1\u02f5\31\0\1\u02f6"+
    "\52\0\1\u02f7\50\0\1\u02f8\56\0\1\u02f9\57\0\1\u02fa"+
    "\26\0\1\u02fb\55\0\1\u02fc\65\0\1\u02fd\36\0\1\70"+
    "\45\0\1\u02fe\66\0\1\70\34\0\1\u02ff\2\0\1\364"+
    "\6\0\1\364\50\0\1\366\41\0\1\u0300\36\0\1\u0104"+
    "\72\0\1\u0301\34\0\1\u0302\1\0\1\u0193\22\0\1\u0303"+
    "\15\0\1\u0193\11\0\1\113\71\0\1\u0303\15\0\1\u0304"+
    "\6\0\1\u0302\3\0\1\u0193\62\0\1\u0305\23\0\1\u0104"+
    "\4\0\1\u013d\52\0\1\u0306\43\0\1\u0140\53\0\1\u0307"+
    "\47\0\1\u0308\50\0\1\u020e\46\0\1\u0104\10\0\1\370"+
    "\35\0\1\u0309\73\0\1\u01a6\27\0\1\u013d\4\0\1\u030a"+
    "\3\0\1\u013d\1\u017f\6\0\1\u02f9\35\0\1\u030b\53\0"+
    "\1\70\35\0\1\u030c\55\0\1\u030d\52\0\1\u030e\63\0"+
    "\1\u015e\31\0\1\u030f\77\0\1\u0310\40\0\1\u0311\34\0"+
    "\1\u0312\60\0\1\u0313\45\0\1\u0314\44\0\1\u0315\46\0"+
    "\1\u0316\43\0\1\u0317\102\0\1\u0318\16\0\1\u0319\4\0"+
    "\1\u031a\46\0\1\u031b\53\0\1\u031c\54\0\1\u031d\43\0"+
    "\1\u031e\55\0\1\u031f\36\0\1\u0320\50\0\1\u0321\23\0"+
    "\1\u0322\1\0\1\u0323\31\0\1\u0324\3\0\1\76\12\0"+
    "\1\u02ca\32\0\1\u0325\41\0\1\u0326\61\0\1\u012a\12\0"+
    "\1\u02cd\23\0\1\u0327\4\0\1\364\43\0\1\u0104\11\0"+
    "\1\u0104\46\0\1\257\15\0\1\70\2\0\1\u0167\24\0"+
    "\1\u0328\11\0\1\u0329\36\0\1\u032a\61\0\1\u032b\33\0"+
    "\1\u032c\5\0\1\u0286\1\0\1\u0289\47\0\1\u032d\42\0"+
    "\1\u0104\6\0\1\u0104\51\0\1\u0168\60\0\1\u032e\33\0"+
    "\1\u02f4\1\u032f\70\0\1\u0330\27\0\1\325\65\0\1\u0331"+
    "\31\0\1\u030c\65\0\1\u02d3\33\0\1\u0332\52\0\1\u0333"+
    "\43\0\1\u0334\4\0\1\u0335\10\0\1\u0336\35\0\1\u0337"+
    "\2\0\1\u0338\16\0\1\u0339\26\0\1\u01ea\72\0\1\u033a"+
    "\51\0\1\u033b\27\0\1\u01ac\50\0\1\u033c\56\0\1\u0315"+
    "\35\0\1\u033d\62\0\1\u030b\64\0\1\u033e\45\0\1\u013d"+
    "\36\0\1\u033f\44\0\1\u02c2\4\0\1\u018f\50\0\1\327"+
    "\64\0\1\u0340\30\0\1\u0129\47\0\1\u0341\25\0\1\u0303"+
    "\17\0\1\u0342\54\0\1\u0343\44\0\1\364\23\0\1\u013d"+
    "\31\0\1\u0344\64\0\1\u0345\40\0\1\u030b\44\0\1\u0346"+
    "\46\0\1\u0347\1\u01ee\54\0\1\364\61\0\1\u0348\35\0"+
    "\1\u0349\40\0\1\u020e\25\0\1\u0104\22\0\1\u020e\53\0"+
    "\1\u034a\12\0\1\u034b\35\0\1\u034c\16\0\1\364\26\0"+
    "\1\u034d\11\0\1\u034e\41\0\1\u01d7\3\0\1\u034f\43\0"+
    "\1\u0350\1\u0351\47\0\1\u0104\10\0\1\u01f4\57\0\1\u02cd"+
    "\46\0\1\u01d6\56\0\1\u0352\45\0\1\u0353\41\0\1\u0354"+
    "\7\0\1\u0355\30\0\1\u0356\4\0\1\u01a1\52\0\1\u0129"+
    "\45\0\1\u0357\45\0\1\u02cd\66\0\1\u0358\25\0\1\u0359"+
    "\57\0\1\u035a\47\0\1\u035b\64\0\1\u035c\26\0\1\364"+
    "\6\0\1\70\22\0\1\u035d\23\0\1\u0104\5\0\1\u022a"+
    "\53\0\1\u035e\45\0\1\76\12\0\1\u02ca\27\0\1\u035f"+
    "\44\0\1\u02cd\2\0\1\364\55\0\1\u0360\37\0\1\u0361"+
    "\6\0\1\u013d\4\0\1\327\10\0\1\u0362\23\0\1\u0363"+
    "\12\0\1\370\53\0\1\u0364\33\0\1\u0365\10\0\1\364"+
    "\3\0\1\u0366\32\0\1\u0104\1\0\1\u013d\2\0\1\u0367"+
    "\44\0\1\u0368\50\0\1\u0369\1\0\1\u036a\50\0\1\u036b"+
    "\12\0\1\u036c\1\0\1\u0289\33\0\1\u036d\14\0\1\u013f"+
    "\1\u029e\3\0\1\u036e\31\0\1\u036f\44\0\1\u0104\1\u02c6"+
    "\1\0\1\u0370\45\0\1\120\22\0\1\u0371\34\0\1\u0372"+
    "\41\0\1\u0104\2\0\1\u016f\3\0\1\u0104\44\0\1\345"+
    "\43\0\1\u012a\4\0\1\u013d\55\0\1\u0373\40\0\1\u0374"+
    "\46\0\1\u0375\24\0\1\u0376\4\0\1\u0377\34\0\1\u0378"+
    "\3\0\1\364\7\0\1\u0379\24\0\1\u015e\4\0\1\u037a"+
    "\56\0\1\u01b3\27\0\1\364\50\0\1\u037b\63\0\1\u0330"+
    "\42\0\1\370\44\0\1\u037c\10\0\1\u037d\44\0\1\u037e"+
    "\55\0\1\u037f\44\0\1\u030b\14\0\1\u0380\45\0\1\u0381"+
    "\54\0\1\u0382\23\0\1\u0383\21\0\1\u0384\30\0\1\364"+
    "\1\u0385\3\0\1\u0386\13\0\1\u0387\32\0\1\u0388\15\0"+
    "\1\364\30\0\1\u0389\57\0\1\u038a\13\0\1\u02ca\22\0"+
    "\1\u038b\55\0\1\u038c\54\0\1\70\13\0\1\u038d\47\0"+
    "\1\70\32\0\1\u038e\14\0\1\u018f\33\0\1\u038f\53\0"+
    "\1\u0390\45\0\1\u0391\45\0\1\u0392\60\0\1\u0393\41\0"+
    "\1\364\44\0\1\u0394\70\0\1\u0395\36\0\1\u029e\52\0"+
    "\1\u0396\5\0\1\317\4\0\1\u0397\32\0\1\u0398\2\0"+
    "\1\u0286\4\0\1\u01b3\43\0\1\u0399\1\0\1\u039a\1\0"+
    "\1\u039b\10\0\1\u039c\23\0\1\70\66\0\1\u039d\34\0"+
    "\1\u0264\50\0\1\u039e\7\0\1\u039f\11\0\1\u03a0\31\0"+
    "\1\u03a1\54\0\1\u0372\6\0\1\u03a2\36\0\1\u03a3\47\0"+
    "\1\u03a4\3\0\1\u0104\52\0\1\u016f\40\0\1\u03a5\6\0"+
    "\1\364\36\0\1\u03a6\53\0\1\u03a7\60\0\1\u03a8\44\0"+
    "\1\u03a9\46\0\1\u03aa\55\0\1\u03ab\64\0\1\u03ac\31\0"+
    "\1\u030b\100\0\1\36\15\0\1\u0307\45\0\1\u03ad\56\0"+
    "\1\u03ae\50\0\1\u03af\63\0\1\u03b0\50\0\1\u03b1\44\0"+
    "\1\u03b2\46\0\1\u01ca\1\u02b4\33\0\1\u03b3\55\0\1\u03b4"+
    "\60\0\1\u03b5\40\0\1\u0267\71\0\1\u03b6\27\0\1\u0347"+
    "\52\0\1\u03b7\61\0\1\u03b8\30\0\1\u03b9\1\0\1\u03b1"+
    "\55\0\1\u03ba\57\0\1\u03bb\60\0\1\u021f\34\0\1\u03bc"+
    "\64\0\1\u03bd\44\0\1\u03be\41\0\1\u01fc\57\0\1\u03bf"+
    "\53\0\1\u03c0\36\0\1\u03c1\62\0\1\u03c2\41\0\1\u0336"+
    "\37\0\1\u03c3\50\0\1\u0315\66\0\1\u02ff\33\0\1\u01db"+
    "\64\0\1\u03c4\27\0\1\u035f\53\0\1\u03c1\66\0\1\u03c5"+
    "\41\0\1\u03c6\53\0\1\u03c7\50\0\1\u03c8\41\0\1\u03c9"+
    "\46\0\1\u03ca\56\0\1\370\56\0\1\u0104\30\0\1\u03cb"+
    "\57\0\1\u03cc\46\0\1\u03cd\63\0\1\370\27\0\1\u03ce"+
    "\63\0\1\u03cf\33\0\5\u0109\1\u0291\2\u0109\1\u03d0\34\u0109"+
    "\2\0\5\u0109\1\u03d1\1\u0109\1\u0291\37\u0109\2\0\7\u0109"+
    "\1\u0291\2\u0109\1\u03d0\1\u03d2\33\u0109\2\0\7\u0109\1\u0291"+
    "\16\u0109\1\u03d3\20\u0109\2\0\5\u0109\1\u03d4\1\u0109\1\u0291"+
    "\37\u0109\2\0\7\u0109\1\u0291\11\u0109\1\u03d0\25\u0109\2\0"+
    "\2\u0109\27\0\1\u03d5\36\0\1\u03d6\37\0\1\u03d7\53\0"+
    "\1\u0372\46\0\1\u03d8\12\0\1\u03d9\45\0\1\u03da\53\0"+
    "\1\u03db\37\0\1\u03dc\75\0\1\u03dd\17\0\1\u03de\77\0"+
    "\1\u030b\24\0\1\u03df\72\0\1\u03e0\34\0\1\u03e1\43\0"+
    "\1\u03e2\46\0\1\u01f0\54\0\1\u03e3\63\0\1\u03e4\35\0"+
    "\1\u03e5\41\0\1\257\57\0\1\u0340\46\0\1\u03e6\51\0"+
    "\1\u03e7\62\0\1\u03e8\32\0\1\u03e9\54\0\1\u03ea\70\0"+
    "\1\345\27\0\1\u03eb\43\0\1\u0319\55\0\1\u03ec\65\0"+
    "\1\u03ed\26\0\1\u03ee\53\0\1\u03ef\60\0\1\u03f0\41\0"+
    "\1\u03f1\76\0\1\u03f2\43\0\1\u0227\30\0\1\u03f3\43\0"+
    "\1\u03f4\51\0\1\u03f5\51\0\1\u03f6\50\0\1\370\60\0"+
    "\1\u013d\41\0\1\u03f7\1\0\1\u0227\45\0\1\u017f\16\0"+
    "\1\u017f\54\0\1\u028e\44\0\1\u013d\34\0\1\u03f8\43\0"+
    "\1\u03f9\72\0\1\u018f\32\0\1\u0300\62\0\1\u03fa\33\0"+
    "\1\u01a1\50\0\1\u03fb\47\0\1\u03fc\11\0\1\u03fd\37\0"+
    "\1\u03fe\62\0\1\u0154\50\0\1\u03ff\42\0\1\u030c\52\0"+
    "\1\u013d\41\0\1\u01fc\54\0\1\u0100\51\0\1\u0400\47\0"+
    "\1\u0401\1\u0402\14\0\1\u03b1\30\0\1\70\4\0\1\u0403"+
    "\54\0\1\u0404\35\0\1\u013d\20\0\1\u0104\34\0\1\76"+
    "\56\0\1\u028a\45\0\1\u02dd\2\0\1\u02c6\47\0\1\u0405"+
    "\45\0\1\u0406\44\0\1\u016f\60\0\1\u0407\50\0\1\73"+
    "\40\0\1\u0408\70\0\1\u03fd\35\0\1\u02d3\52\0\1\u0409"+
    "\54\0\1\u0247\50\0\1\u040a\41\0\1\u040b\66\0\1\u040c"+
    "\43\0\1\u040d\31\0\1\u040e\71\0\1\366\27\0\1\u040f"+
    "\52\0\1\u0410\50\0\1\u0411\55\0\1\u0412\56\0\1\u0202"+
    "\63\0\1\u02f5\31\0\1\u0413\37\0\1\u0414\52\0\1\u0415"+
    "\46\0\1\u0416\1\0\1\u0417\54\0\1\u01b3\50\0\1\u0418"+
    "\50\0\1\u0419\61\0\1\u041a\35\0\1\u0193\65\0\1\u041b"+
    "\50\0\1\u0193\32\0\1\u041c\70\0\1\u041d\44\0\1\u041e"+
    "\43\0\1\u041f\40\0\1\70\77\0\1\u0420\21\0\1\u0421"+
    "\54\0\1\313\42\0\1\u0422\1\0\1\u0423\1\0\1\u0424"+
    "\50\0\1\u0425\44\0\1\u0426\50\0\1\u0427\53\0\1\u01b3"+
    "\53\0\1\u03c1\63\0\1\u0428\26\0\1\u0429\50\0\1\u03b9"+
    "\57\0\1\u042a\46\0\1\u042b\50\0\1\u0240\74\0\1\u042c"+
    "\22\0\1\120\65\0\1\u042d\34\0\1\u0401\47\0\1\u042e"+
    "\12\0\1\u042f\33\0\1\u0430\1\0\1\u0431\12\0\1\u0432"+
    "\32\0\1\u0433\70\0\1\u0434\31\0\1\u0435\100\0\1\u017f"+
    "\37\0\1\u0436\43\0\1\u0437\35\0\1\u0438\52\0\1\u0100"+
    "\64\0\1\u0439\37\0\1\u043a\43\0\1\u03b1\55\0\1\317"+
    "\50\0\1\u043b\56\0\1\u0168\44\0\1\u043c\46\0\1\u043d"+
    "\70\0\1\u043e\25\0\1\u026a\50\0\1\u043f\71\0\1\u0440"+
    "\30\0\1\u0441\66\0\1\u0140\47\0\1\u0442\36\0\1\u0443"+
    "\45\0\1\u0444\50\0\1\u0445\60\0\1\370\2\0\1\u0446"+
    "\46\0\1\u0447\54\0\1\u0448\35\0\1\u0449\45\0\1\u044a"+
    "\64\0\1\u0140\32\0\1\364\1\0\1\u0104\47\0\1\u044b"+
    "\65\0\1\u044c\41\0\1\u044d\41\0\1\u044e\24\0\1\u044f"+
    "\23\0\1\u0450\57\0\1\u0451\46\0\1\u0452\44\0\1\u0247"+
    "\52\0\1\u044d\55\0\1\u0453\60\0\1\u03c4\35\0\1\u0454"+
    "\61\0\1\u0455\44\0\1\u0456\54\0\1\u0457\56\0\1\u020e"+
    "\45\0\1\u0458\30\0\1\u0459\57\0\1\u045a\56\0\1\u045b"+
    "\30\0\45\u045c\2\0\2\u045c\27\0\1\u045d\37\0\1\u045e"+
    "\41\0\1\u045f\65\0\1\364\30\0\1\u0460\57\0\1\u0315"+
    "\64\0\1\u039a\26\0\1\u0461\54\0\1\u0462\51\0\1\u017f"+
    "\60\0\1\u0463\43\0\1\u0104\50\0\1\u013d\37\0\1\u0464"+
    "\73\0\1\u0465\41\0\1\u0466\34\0\1\u0467\67\0\1\u0468"+
    "\30\0\1\u0469\55\0\1\70\47\0\1\u046a\65\0\1\u020e"+
    "\27\0\1\u046b\62\0\1\u046c\37\0\1\u046d\46\0\1\370"+
    "\53\0\1\u046e\55\0\1\u046f\45\0\1\120\63\0\1\u0470"+
    "\30\0\1\u0435\5\0\1\u0471\54\0\1\u020e\45\0\1\u0472"+
    "\63\0\1\u013d\44\0\1\u020e\32\0\1\u0473\51\0\1\u02d5"+
    "\54\0\1\u0474\45\0\1\u0453\4\0\1\u03b4\57\0\1\u0475"+
    "\35\0\1\u0476\54\0\1\u0452\42\0\1\u0477\55\0\1\u01fc"+
    "\42\0\1\u0478\63\0\1\u01b3\43\0\1\u030c\55\0\1\u020e"+
    "\47\0\1\u0479\46\0\1\u047a\45\0\1\u047b\43\0\1\u02a5"+
    "\50\0\1\u047c\73\0\1\u047d\32\0\1\u01d6\50\0\1\u01fc"+
    "\64\0\1\u047e\41\0\1\u01dc\43\0\1\u047f\61\0\1\u0480"+
    "\35\0\1\u0481\54\0\1\u0482\54\0\1\76\7\0\1\364"+
    "\33\0\1\u0483\44\0\1\u0345\63\0\1\u0484\40\0\1\u0485"+
    "\56\0\1\u0453\42\0\1\u0486\56\0\1\u0487\47\0\1\u0380"+
    "\42\0\1\u0264\51\0\1\u0340\61\0\1\u017a\41\0\1\u0488"+
    "\43\0\1\u0489\53\0\1\u02ab\70\0\1\u048a\27\0\1\u0401"+
    "\11\0\1\u048b\36\0\1\70\62\0\1\u048c\54\0\1\u01a2"+
    "\34\0\1\u01ee\70\0\1\u048d\26\0\1\u0401\1\u0402\54\0"+
    "\1\u048e\64\0\1\u0175\31\0\1\u048f\74\0\1\u0490\36\0"+
    "\1\u0491\35\0\1\u0492\44\0\1\u0369\1\0\1\u0493\52\0"+
    "\1\u0494\55\0\1\u0495\54\0\1\u01a1\32\0\1\u0330\76\0"+
    "\1\u020e\22\0\1\u0496\56\0\1\u0497\45\0\1\363\47\0"+
    "\1\u0498\61\0\1\u0499\45\0\1\u0473\41\0\1\u0400\75\0"+
    "\1\u03e3\20\0\5\u0109\1\u0291\7\u0109\1\u049a\27\u0109\2\0"+
    "\7\u0109\1\u049b\37\u0109\2\0\5\u0109\1\u049c\1\u0109\1\u0291"+
    "\37\u0109\2\0\7\u0109\1\u0291\7\u0109\1\u049d\27\u0109\2\0"+
    "\2\u0109\14\0\1\u0129\7\0\1\u049e\30\0\1\u03e3\64\0"+
    "\1\u049f\37\0\1\u04a0\43\0\1\u04a1\50\0\1\u04a2\74\0"+
    "\1\u04a3\41\0\1\u04a4\53\0\1\u04a5\36\0\1\u03c1\45\0"+
    "\1\u04a6\46\0\1\u04a7\56\0\1\u030c\42\0\1\u04a8\75\0"+
    "\1\u04a9\30\0\1\u04aa\50\0\1\u0315\55\0\1\u04ab\42\0"+
    "\1\u04ac\50\0\1\u04ad\52\0\1\u04ae\54\0\1\325\40\0"+
    "\1\u04af\54\0\1\u044e\6\0\1\u0313\44\0\1\u04b0\43\0"+
    "\1\364\5\0\1\u020e\46\0\1\u04b1\45\0\1\u04b2\51\0"+
    "\1\u04b3\51\0\1\u0286\41\0\1\u04b4\57\0\1\364\53\0"+
    "\1\u0227\53\0\1\u04b5\45\0\1\113\44\0\1\u017a\61\0"+
    "\1\u04b6\46\0\1\u02cd\42\0\1\u03c1\42\0\1\u03b1\100\0"+
    "\1\u04b7\23\0\1\u04b8\52\0\1\u04b9\44\0\1\u04ba\52\0"+
    "\1\u02c1\44\0\1\u04bb\75\0\1\u013d\47\0\1\u04bc\30\0"+
    "\1\u04bd\55\0\1\u04be\40\0\1\u04bf\47\0\1\u04c0\47\0"+
    "\1\u04c1\64\0\1\u04c2\45\0\1\u01fc\51\0\1\u041a\70\0"+
    "\1\u04c3\21\0\1\u0390\62\0\1\u04c4\42\0\1\u04a0\54\0"+
    "\1\u04c5\36\0\1\u028a\70\0\1\u02d3\30\0\1\u04c6\101\0"+
    "\1\u04c7\23\0\1\u04c8\75\0\1\u0379\36\0\1\u04c9\55\0"+
    "\1\u039b\23\0\1\u0104\4\0\1\u02c1\71\0\1\u04ca\31\0"+
    "\1\u04cb\54\0\1\u04cc\43\0\1\u04cd\56\0\1\u04ce\43\0"+
    "\1\u026a\42\0\1\u04cf\62\0\1\364\42\0\1\u04d0\44\0"+
    "\1\u0315\52\0\1\u04d1\55\0\1\u04d2\60\0\1\u04d3\37\0"+
    "\1\113\43\0\1\u0167\50\0\1\u04d4\46\0\1\u04d5\64\0"+
    "\1\u0167\50\0\1\u022a\41\0\1\u0402\14\0\1\u03b1\34\0"+
    "\1\345\51\0\1\u0240\46\0\1\u04d6\45\0\1\u0340\53\0"+
    "\1\u04d7\56\0\1\u04d8\44\0\1\u02f4\50\0\1\u04d9\46\0"+
    "\1\u04da\46\0\1\u04db\45\0\1\u041a\52\0\1\u04dc\64\0"+
    "\1\u04dd\40\0\1\u04de\45\0\1\u04df\53\0\1\u04e0\60\0"+
    "\1\u04e1\41\0\1\u04e2\54\0\1\u04e3\42\0\1\u04e4\52\0"+
    "\1\u04e5\52\0\1\u04e6\46\0\1\u04e7\64\0\1\u04e8\40\0"+
    "\1\u04e9\67\0\1\u04ea\34\0\1\u04eb\37\0\1\u04ec\44\0"+
    "\1\u01fc\53\0\1\u04ed\50\0\1\u01fc\53\0\1\u01fc\43\0"+
    "\1\u04ee\53\0\1\u04ef\56\0\1\u04c9\53\0\1\u0276\60\0"+
    "\1\u04f0\25\0\1\u045b\72\0\1\u0286\21\0\5\u045c\1\u04f1"+
    "\37\u045c\2\0\2\u045c\3\0\1\u04f2\65\0\1\u0453\37\0"+
    "\1\u01da\50\0\1\u04f3\43\0\1\u04f4\55\0\1\u03e3\51\0"+
    "\1\u04f5\67\0\1\u04f6\24\0\1\u04f7\61\0\1\u01d6\100\0"+
    "\1\u04f8\20\0\1\u04f9\64\0\1\u0286\31\0\1\u0499\54\0"+
    "\1\u04fa\42\0\1\u04fb\52\0\1\u04fc\73\0\1\u04fd\42\0"+
    "\1\u045e\36\0\1\u04ab\43\0\1\u04fe\44\0\1\u04ff\52\0"+
    "\1\u0500\60\0\1\u01f4\52\0\1\u0501\51\0\1\u0427\34\0"+
    "\1\u0502\51\0\1\u0503\52\0\1\u0264\67\0\1\u0353\36\0"+
    "\1\u0504\41\0\1\u0175\50\0\1\u0505\52\0\1\u01a1\56\0"+
    "\1\u0325\62\0\1\u01fc\51\0\1\u0506\23\0\1\u0507\71\0"+
    "\1\u0508\43\0\1\113\43\0\1\u0509\43\0\1\u050a\50\0"+
    "\1\u050b\46\0\1\u050c\55\0\1\u03e3\45\0\1\u050d\52\0"+
    "\1\u02b4\51\0\1\u0175\64\0\1\u03e3\44\0\1\u03bc\37\0"+
    "\1\u050e\44\0\1\u050f\62\0\1\u0510\67\0\1\u0511\26\0"+
    "\1\u0167\72\0\1\u0512\32\0\1\u0513\41\0\1\u0514\43\0"+
    "\1\u01b3\53\0\1\u0515\62\0\1\u0516\31\0\5\u0109\1\u0517"+
    "\37\u0109\2\0\7\u0109\1\u0291\2\u0109\1\u03d0\17\u0109\1\u0518"+
    "\14\u0109\2\0\7\u0109\1\u0291\14\u0109\1\u0519\22\u0109\2\0"+
    "\7\u0109\1\u0291\22\u0109\1\u051a\14\u0109\2\0\2\u0109\3\0"+
    "\1\u051b\61\0\1\u051c\37\0\1\u0221\54\0\1\u051d\61\0"+
    "\1\u03a7\50\0\1\u051e\41\0\1\u051f\67\0\1\u0520\22\0"+
    "\1\u0521\73\0\1\113\33\0\1\u0522\60\0\1\u0523\40\0"+
    "\1\u01b3\42\0\1\u0524\63\0\1\u01a2\47\0\1\u0525\40\0"+
    "\1\312\61\0\1\u0247\51\0\1\u0135\35\0\1\u0526\45\0"+
    "\45\u0527\2\0\2\u0527\11\0\1\u01d6\51\0\1\u0528\47\0"+
    "\1\u0529\41\0\1\u052a\1\u052b\3\0\1\u052c\1\u052d\4\0"+
    "\1\u052e\1\0\1\u052f\46\0\1\u0530\42\0\1\122\53\0"+
    "\1\u01d6\51\0\1\70\61\0\1\u01fc\34\0\1\u0531\47\0"+
    "\1\u041a\55\0\1\u0532\43\0\1\u0533\44\0\1\70\54\0"+
    "\1\u0534\52\0\1\u0535\57\0\1\u0536\33\0\1\u0537\73\0"+
    "\1\u0538\33\0\1\u04e0\67\0\1\70\42\0\1\u0539\34\0"+
    "\1\364\11\0\1\u0412\44\0\1\u053a\34\0\45\u0109\2\0"+
    "\2\u0109\7\0\1\u053b\56\0\1\u053c\44\0\1\u053d\67\0"+
    "\1\u053e\25\0\1\u053f\52\0\1\u0540\45\0\1\u012a\46\0"+
    "\1\u012a\63\0\1\u0541\44\0\1\u020e\67\0\1\u04c1\32\0"+
    "\1\u0542\46\0\1\u0543\44\0\1\u0526\64\0\1\u0544\32\0"+
    "\1\u0545\55\0\1\u04e0\47\0\1\u01d6\53\0\1\u0546\42\0"+
    "\1\u04c1\75\0\1\u0140\31\0\1\u0526\44\0\1\u0547\63\0"+
    "\1\u0548\37\0\1\u0549\44\0\1\u054a\75\0\1\u054b\46\0"+
    "\1\u054c\51\0\1\u054d\33\0\1\u0412\1\u054e\71\0\1\u054f"+
    "\23\0\1\u0550\10\0\1\u0551\42\0\1\u030c\47\0\1\u0552"+
    "\37\0\5\u045c\1\u04f1\7\u045c\1\u0553\27\u045c\2\0\2\u045c"+
    "\15\0\1\u0554\43\0\1\u026c\64\0\1\u0315\33\0\1\u0555"+
    "\46\0\1\u0556\57\0\1\u0557\62\0\1\u0558\27\0\1\u019b"+
    "\57\0\1\u0559\44\0\1\u055a\60\0\1\u055b\41\0\1\u055c"+
    "\53\0\1\u0281\41\0\1\u03bb\66\0\1\u020e\41\0\1\u055d"+
    "\54\0\1\u012c\57\0\1\u055e\36\0\1\u055f\42\0\1\u0560"+
    "\63\0\1\u0561\31\0\1\u0562\52\0\1\u0540\77\0\1\u0563"+
    "\30\0\1\u0286\47\0\1\u0307\51\0\1\u0564\53\0\1\u0400"+
    "\35\0\1\u0565\73\0\1\u0566\34\0\1\u0567\44\0\1\u0568"+
    "\52\0\1\u03b4\53\0\1\u03b4\34\0\5\u0109\1\u0291\2\u0109"+
    "\1\u03d0\11\u0109\1\u0569\22\u0109\2\0\7\u0109\1\u0291\14\u0109"+
    "\1\u056a\22\u0109\2\0\7\u0109\1\u0291\22\u0109\1\u056b\14\u0109"+
    "\2\0\7\u0109\1\u0291\26\u0109\1\u056c\10\u0109\2\0\2\u0109"+
    "\23\0\1\u039b\41\0\1\u04c1\63\0\1\u0497\26\0\1\u056d"+
    "\46\0\1\u056e\71\0\1\u0514\27\0\1\372\47\0\1\u02ac"+
    "\63\0\1\u039b\40\0\1\u056f\61\0\1\u0513\1\u04c4\31\0"+
    "\3\u0527\1\u0570\41\u0527\2\0\2\u0527\7\0\1\u03df\43\0"+
    "\1\u012c\61\0\1\u0571\10\0\1\u0572\41\0\1\u01ca\53\0"+
    "\1\u0573\37\0\1\u0574\10\0\1\u0575\50\0\1\u052b\33\0"+
    "\1\u0576\14\0\1\u0577\45\0\1\u0578\42\0\1\u0579\52\0"+
    "\1\u057a\50\0\1\u026c\44\0\1\u03b4\72\0\1\u01b3\33\0"+
    "\1\u057b\60\0\1\u057c\33\0\1\u057d\51\0\1\u057e\57\0"+
    "\1\u057f\42\0\1\u0580\41\0\45\u0581\2\0\2\u0581\22\0"+
    "\1\u0453\46\0\1\u0582\44\0\1\u0453\36\0\1\366\51\0"+
    "\1\u0583\47\0\1\u0584\50\0\1\u0585\55\0\1\u0586\51\0"+
    "\1\u0347\50\0\1\u01d6\57\0\1\u0587\41\0\1\u0588\42\0"+
    "\1\u0589\74\0\1\u058a\31\0\1\u058b\61\0\1\u0412\33\0"+
    "\1\u02f4\74\0\1\u058c\25\0\1\u04e0\61\0\1\u058d\40\0"+
    "\1\u058e\43\0\4\u045c\1\u058f\1\u04f1\37\u045c\2\0\2\u045c"+
    "\10\0\1\u0590\50\0\1\u018f\60\0\1\u01fc\41\0\1\u0591"+
    "\45\0\1\u0592\52\0\1\u04ec\56\0\1\u020e\52\0\1\u0593"+
    "\33\0\1\u0594\54\0\1\u051e\74\0\1\u0595\51\0\1\u0596"+
    "\24\0\1\u0140\65\0\1\u0597\50\0\1\u0598\57\0\1\u0264"+
    "\25\0\1\u0599\42\0\1\u059a\50\0\1\u059b\55\0\1\u04c4"+
    "\40\0\2\u0109\1\u059c\2\u0109\1\u0291\37\u0109\2\0\7\u0109"+
    "\1\u0291\2\u0109\1\u059d\34\u0109\2\0\7\u0109\1\u0291\16\u0109"+
    "\1\u03d0\20\u0109\2\0\7\u0109\1\u059e\37\u0109\2\0\2\u0109"+
    "\15\0\1\u041a\45\0\1\u03e3\53\0\1\u0497\33\0\3\u0527"+
    "\1\u0570\5\u0527\1\u059f\33\u0527\2\0\2\u0527\3\0\1\325"+
    "\56\0\1\u05a0\67\0\1\u05a1\36\0\1\u02b5\63\0\1\325"+
    "\41\0\1\u05a2\44\0\1\u01ca\37\0\1\u05a3\53\0\1\u05a4"+
    "\43\0\1\u041a\47\0\1\u05a5\65\0\1\u05a6\42\0\1\u0582"+
    "\37\0\45\u05a7\2\0\2\u05a7\34\0\1\u05a8\25\0\1\u05a9"+
    "\37\0\15\u0581\1\u05aa\27\u0581\2\0\2\u0581\4\0\1\u01b3"+
    "\55\0\1\u05ab\57\0\1\u0446\50\0\1\u05ac\64\0\1\u05ad"+
    "\23\0\1\u01b3\51\0\1\u020e\45\0\1\u05ae\63\0\1\u030f"+
    "\35\0\1\372\46\0\1\u05af\75\0\1\u04e0\45\0\1\u0376"+
    "\25\0\1\u05b0\66\0\1\u05b1\30\0\45\u05b2\2\0\2\u05b2"+
    "\27\0\1\u0453\34\0\1\u0353\44\0\1\113\70\0\1\u05b3"+
    "\46\0\1\327\43\0\1\u04c9\37\0\1\u05b4\56\0\1\u05b5"+
    "\44\0\1\u0500\37\0\5\u0109\1\u0291\2\u0109\1\u05b6\34\u0109"+
    "\2\0\2\u0109\7\0\1\u01ca\65\0\1\u05b7\35\0\1\325"+
    "\62\0\1\113\35\0\1\u0586\43\0\1\u05b8\64\0\1\u05b9"+
    "\31\0\26\u05a7\1\u05ba\16\u05a7\2\0\2\u05a7\20\0\1\u05bb"+
    "\30\0\45\u05bc\2\0\2\u05bc\3\u0581\1\u05bd\11\u0581\1\u05aa"+
    "\27\u0581\2\0\2\u0581\7\0\1\u026c\44\0\1\u05be\50\0"+
    "\1\u05bb\57\0\1\u02ff\41\0\1\u0226\56\0\1\u05bf\54\0"+
    "\1\u05c0\33\0\26\u05b2\1\u05c1\16\u05b2\2\0\2\u05b2\3\0"+
    "\1\u05c2\51\0\1\325\46\0\1\u05c3\50\0\1\325\60\0"+
    "\1\u05c4\43\0\1\u051c\43\0\22\u05a7\1\u05c5\3\u05a7\1\u05ba"+
    "\16\u05a7\2\0\2\u05a7\17\0\1\u0514\31\0\2\u05bc\1\u05c6"+
    "\42\u05bc\2\0\2\u05bc\11\u0581\1\u05c7\3\u0581\1\u05aa\27\u0581"+
    "\2\0\2\u0581\15\0\1\u05c8\53\0\1\u05c9\60\0\1\u05ca"+
    "\20\0\22\u05b2\1\u05cb\3\u05b2\1\u05c1\16\u05b2\2\0\2\u05b2"+
    "\14\0\1\u05cc\45\0\1\u05cd\44\0\1\u034c\43\0\2\u05a7"+
    "\1\u05ce\23\u05a7\1\u05ba\16\u05a7\2\0\2\u05a7\2\u05bc\1\u05c6"+
    "\21\u05bc\1\u05cf\20\u05bc\2\0\2\u05bc\34\0\1\u05d0\43\0"+
    "\1\u04a6\65\0\1\u05d1\4\0\2\u05b2\1\u05d2\23\u05b2\1\u05c1"+
    "\16\u05b2\2\0\2\u05b2\14\0\1\u05d3\41\0\1\u05d4\43\0"+
    "\26\u05a7\1\u05ba\5\u05a7\1\u05d5\10\u05a7\2\0\2\u05a7\2\u05bc"+
    "\1\u05c6\2\u05bc\1\u05d6\37\u05bc\2\0\2\u05bc\2\0\1\u05d7"+
    "\74\0\1\u05d8\22\0\45\u05d9\2\0\2\u05d9\7\0\1\u05da"+
    "\52\0\1\u05db\37\0\5\u05a7\1\u05dc\20\u05a7\1\u05ba\16\u05a7"+
    "\2\0\2\u05a7\2\u05bc\1\u05c6\12\u05bc\1\u05dd\27\u05bc\2\0"+
    "\2\u05bc\3\0\1\u026c\67\0\1\u05de\26\0\5\u05d9\1\u05df"+
    "\37\u05d9\2\0\2\u05d9\27\0\1\363\27\0\1\u0526\42\0"+
    "\14\u05a7\1\u05e0\11\u05a7\1\u05ba\16\u05a7\2\0\2\u05a7\20\0"+
    "\1\u05e1\30\0\5\u05d9\1\u05df\2\u05d9\1\u05e2\34\u05d9\2\0"+
    "\2\u05d9\10\u05a7\1\u05e3\15\u05a7\1\u05ba\16\u05a7\2\0\2\u05a7"+
    "\14\0\1\u016f\34\0\5\u05d9\1\u05df\26\u05d9\1\u05e4\10\u05d9"+
    "\2\0\2\u05d9\3\u05a7\1\u05e5\22\u05a7\1\u05ba\16\u05a7\2\0"+
    "\2\u05a7\5\u05d9\1\u05df\5\u05d9\1\u05e6\31\u05d9\2\0\7\u05d9"+
    "\1\u05df\1\u05d9\1\u05e7\35\u05d9\2\0\7\u05d9\1\u05df\6\u05d9"+
    "\1\u05e8\30\u05d9\2\0\7\u05d9\1\u05df\6\u05d9\1\u05e9\30\u05d9"+
    "\2\0\2\u05d9";

  private static int [] zzUnpackTrans() {
    int [] result = new int[58712];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\31\1\2\11\3\1\2\11\1\1\12\0"+
    "\1\1\2\0\1\1\1\0\1\1\3\0\1\11\7\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\1\51\0"+
    "\2\1\4\0\1\1\27\0\1\1\1\0\2\1\2\0"+
    "\1\1\2\0\1\1\10\0\1\1\15\0\1\11\1\1"+
    "\14\0\1\1\13\0\1\1\11\0\1\1\1\0\1\11"+
    "\6\0\1\1\10\0\1\11\1\1\4\0\1\1\1\0"+
    "\1\1\6\0\1\11\3\0\1\11\7\0\1\11\3\0"+
    "\1\11\12\0\1\11\13\0\1\1\1\11\11\0\1\1"+
    "\4\0\1\1\21\0\1\11\7\0\2\1\15\0\1\1"+
    "\6\0\1\1\17\0\1\1\7\0\1\1\17\0\1\1"+
    "\7\0\1\1\21\0\1\1\12\0\1\1\12\0\1\11"+
    "\4\0\1\1\24\0\1\1\10\0\1\11\25\0\2\1"+
    "\1\11\1\1\14\0\1\11\7\0\1\1\13\0\1\1"+
    "\1\0\1\1\15\0\1\1\2\0\1\1\14\0\1\1"+
    "\20\0\1\1\35\0\1\1\7\0\3\11\1\0\1\1"+
    "\1\11\13\0\1\1\6\0\1\1\60\0\1\1\1\0"+
    "\1\1\10\0\1\1\15\0\1\1\22\0\1\1\10\0"+
    "\1\1\12\0\1\1\10\0\1\1\2\0\1\1\3\0"+
    "\1\11\1\1\1\0\1\11\3\0\1\11\1\1\3\0"+
    "\1\11\10\0\1\11\4\0\1\1\11\0\2\1\10\0"+
    "\1\1\20\0\1\1\1\11\5\0\1\1\1\11\31\0"+
    "\1\1\1\0\1\1\16\0\1\1\1\0\1\1\5\0"+
    "\2\1\5\0\1\1\1\0\1\1\4\0\1\1\50\0"+
    "\1\11\5\0\1\1\11\0\1\11\12\0\2\1\2\0"+
    "\1\1\13\0\1\1\6\0\1\11\6\0\1\1\11\0"+
    "\1\1\13\0\1\11\1\1\3\0\1\1\31\0\1\1"+
    "\136\0\1\1\25\0\1\1\57\0\1\11\20\0\1\1"+
    "\12\0\1\11\55\0\1\11\5\0\1\11\21\0\1\11"+
    "\11\0\1\1\44\0\1\1\71\0\1\1\14\0\2\1"+
    "\1\0\1\1\26\0\1\1\20\0\1\1\25\0\1\1"+
    "\7\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1513];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 47: break;
          case 2: 
            { lexeme=yytext(); return NUMERO;
            }
          case 48: break;
          case 3: 
            { lexeme=yytext(); return ART_INDEF;
            }
          case 49: break;
          case 4: 
            { lexeme=yytext(); return ADJ_POSESIV;
            }
          case 50: break;
          case 5: 
            { /* ignore */
            }
          case 51: break;
          case 6: 
            { lexeme=yytext(); return SIG_PUNT;
            }
          case 52: break;
          case 7: 
            { return resta;
            }
          case 53: break;
          case 8: 
            { return division;
            }
          case 54: break;
          case 9: 
            { return multiplicacion;
            }
          case 55: break;
          case 10: 
            { return suma;
            }
          case 56: break;
          case 11: 
            { lexeme=yytext(); return PREP_MOV;
            }
          case 57: break;
          case 12: 
            { lexeme=yytext(); return CONJ_COORDISYU;
            }
          case 58: break;
          case 13: 
            { lexeme=yytext(); return PREP_MOD;
            }
          case 59: break;
          case 14: 
            { lexeme=yytext(); return ANIMALS;
            }
          case 60: break;
          case 15: 
            { lexeme=yytext(); return PREP_LUG;
            }
          case 61: break;
          case 16: 
            { lexeme=yytext(); return CONJ_SUBORCAUS;
            }
          case 62: break;
          case 17: 
            { lexeme=yytext(); return AUX_PRESEN;
            }
          case 63: break;
          case 18: 
            { lexeme=yytext(); return ADJ_PROPERSO;
            }
          case 64: break;
          case 19: 
            { lexeme=yytext(); return VERBO_PRESENT;
            }
          case 65: break;
          case 20: 
            { lexeme=yytext(); return ADJ_NUMCARDIN;
            }
          case 66: break;
          case 21: 
            { lexeme=yytext(); return ART_DEFI;
            }
          case 67: break;
          case 22: 
            { lexeme=yytext(); return ADJ_CALIFI;
            }
          case 68: break;
          case 23: 
            { lexeme=yytext(); return SUS_COMUN;
            }
          case 69: break;
          case 24: 
            { lexeme=yytext(); return VERBO_PASADOPARTICI;
            }
          case 70: break;
          case 25: 
            { lexeme=yytext(); return WEATH;
            }
          case 71: break;
          case 26: 
            { lexeme=yytext(); return VERBO_PASADOSIMP;
            }
          case 72: break;
          case 27: 
            { lexeme=yytext(); return CONJ_COORCOPU;
            }
          case 73: break;
          case 28: 
            { lexeme=yytext(); return ADV_TIME;
            }
          case 74: break;
          case 29: 
            { lexeme=yytext(); return PROF;
            }
          case 75: break;
          case 30: 
            { lexeme=yytext(); return ADJ_PROPOSESIV;
            }
          case 76: break;
          case 31: 
            { lexeme=yytext(); return PAIS;
            }
          case 77: break;
          case 32: 
            { lexeme=yytext(); return VEGET;
            }
          case 78: break;
          case 33: 
            { lexeme=yytext(); return CONJ_COORADVERV;
            }
          case 79: break;
          case 34: 
            { lexeme=yytext(); return ADJ_DEMOS;
            }
          case 80: break;
          case 35: 
            { lexeme=yytext(); return CONJ_CONJSUBOCOMPARA;
            }
          case 81: break;
          case 36: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONSEC;
            }
          case 82: break;
          case 37: 
            { lexeme=yytext(); return SUS_ABSTRACT;
            }
          case 83: break;
          case 38: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONCES;
            }
          case 84: break;
          case 39: 
            { lexeme=yytext(); return ADV_MANERA;
            }
          case 85: break;
          case 40: 
            { lexeme=yytext(); return ADJ_PROINTERR;
            }
          case 86: break;
          case 41: 
            { lexeme=yytext(); return SUS_PROPIO;
            }
          case 87: break;
          case 42: 
            { lexeme=yytext(); return ADV_LUG;
            }
          case 88: break;
          case 43: 
            { lexeme=yytext(); return ADJ_NUMORD;
            }
          case 89: break;
          case 44: 
            { lexeme=yytext(); return ADV_FRECUENCIA;
            }
          case 90: break;
          case 45: 
            { lexeme=yytext(); return ADJ_PROREFLEX;
            }
          case 91: break;
          case 46: 
            { lexeme=yytext(); return CONJ_SUBORDISYU;
            }
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
