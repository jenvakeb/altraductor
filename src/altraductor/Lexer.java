/* The following code was generated by JFlex 1.6.1 */

package altraductor;
import static altraductor.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ShellPhish/Documents/PROJECTS/altraductor/src/altraductor/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\43\1\44\1\44\1\43\22\0\1\33\1\35\6\0"+
    "\1\35\1\35\1\41\1\46\1\35\1\37\1\36\1\40\12\1\1\35"+
    "\1\35\3\0\1\34\1\0\1\2\1\23\1\7\1\11\1\6\1\27"+
    "\1\24\1\5\1\10\1\30\1\21\1\16\1\17\1\3\1\22\1\15"+
    "\1\0\1\14\1\12\1\4\1\20\1\32\1\13\1\26\1\25\1\31"+
    "\1\35\1\0\1\35\35\0\1\35\1\42\1\35\7\0\1\44\u1fa2\0"+
    "\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\1\1\4\20\1\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\3\1\13\2\0"+
    "\1\14\3\0\1\15\12\0\1\16\1\0\1\17\22\0"+
    "\1\20\1\17\1\0\1\15\26\0\1\17\17\0\1\17"+
    "\2\0\1\4\1\0\1\17\1\16\3\0\1\20\2\0"+
    "\1\21\3\0\1\20\2\0\1\22\5\0\1\20\5\0"+
    "\1\22\17\0\1\5\1\0\1\23\1\0\1\24\22\0"+
    "\1\25\6\0\1\26\4\0\1\27\1\0\1\27\3\0"+
    "\1\30\2\0\1\17\1\22\1\24\1\31\1\0\1\17"+
    "\37\0\1\31\13\0\1\32\3\0\1\33\11\0\1\17"+
    "\4\0\1\22\1\0\1\22\4\0\1\27\24\0\1\24"+
    "\3\0\1\22\30\0\1\27\6\0\1\4\1\0\1\16"+
    "\3\0\1\22\6\0\1\24\5\0\1\34\11\0\1\17"+
    "\20\0\1\20\27\0\1\13\3\0\1\27\2\0\1\35"+
    "\1\36\1\37\2\0\1\17\4\0\1\30\3\0\1\22"+
    "\1\0\1\40\5\0\1\41\1\0\1\22\15\0\1\42"+
    "\12\0\1\16\12\0\1\22\15\0\1\20\4\0\1\22"+
    "\2\0\1\4\3\0\1\22\1\43\12\0\1\13\1\22"+
    "\14\0\1\22\4\0\1\4\12\0\1\27\5\0\1\35"+
    "\3\0\1\24\4\0\1\44\5\0\1\31\7\0\1\27"+
    "\13\0\1\42\4\0\1\14\1\0\1\27\1\0\1\22"+
    "\4\0\1\22\24\0\1\4\34\0\1\45\10\0\1\46"+
    "\21\0\1\24\10\0\1\34\3\0\1\41\1\27\15\0"+
    "\1\21\1\0\1\14\36\0\1\23\6\0\1\21\13\0"+
    "\1\46\12\0\1\21\23\0\1\23\10\0\1\23\3\0"+
    "\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[801];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\47\0\47\0\u03cf\0\u03f6\0\u041d\0\47"+
    "\0\47\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\47\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f"+
    "\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f"+
    "\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57"+
    "\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137"+
    "\0\47\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\47\0\u146a\0\u1491"+
    "\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\47\0\u17eb\0\47"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b"+
    "\0\u1a82\0\u1aa9\0\47\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c"+
    "\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4"+
    "\0\47\0\u1ccb\0\u1cf2\0\u1d19\0\47\0\u1d40\0\u1d67\0\u1d8e"+
    "\0\47\0\u1db5\0\47\0\u1ddc\0\u1110\0\u1e03\0\u1e2a\0\u1e51"+
    "\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89"+
    "\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1"+
    "\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9"+
    "\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331"+
    "\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469"+
    "\0\47\0\u2490\0\u24b7\0\u24de\0\47\0\u2505\0\u252c\0\u2553"+
    "\0\u257a\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b"+
    "\0\u26b2\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3"+
    "\0\u27ea\0\u2811\0\u2838\0\u2664\0\u285f\0\u2886\0\u28ad\0\u28d4"+
    "\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c"+
    "\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u046b\0\u2af6\0\u1e03"+
    "\0\u2b1d\0\u2b44\0\u1db5\0\u0bbb\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0"+
    "\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18"+
    "\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4\0\u22bc\0\u2ddb\0\u2e02\0\u2e29"+
    "\0\u2e50\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61"+
    "\0\u2f88\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099"+
    "\0\u30c0\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1"+
    "\0\u31f8\0\u321f\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309"+
    "\0\u3330\0\u3357\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441"+
    "\0\u3468\0\u348f\0\u34b6\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579"+
    "\0\u35a0\0\u2838\0\u35c7\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a"+
    "\0\u36b1\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774\0\u379b\0\u37c2"+
    "\0\u37e9\0\u3810\0\u3837\0\u385e\0\u3885\0\u38ac\0\u38d3\0\u38fa"+
    "\0\u3921\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4\0\u3a0b\0\u3a32"+
    "\0\u3a59\0\47\0\u3a80\0\u3aa7\0\u3ace\0\u3af5\0\u3b1c\0\u3b43"+
    "\0\47\0\47\0\47\0\u3b6a\0\u3b91\0\u2ffd\0\u3bb8\0\u3bdf"+
    "\0\u3c06\0\u3c2d\0\u3ace\0\u3c54\0\u3c7b\0\u3ca2\0\u3cc9\0\u3cf0"+
    "\0\47\0\u3d17\0\u3d3e\0\u3d65\0\u3d8c\0\u3db3\0\u3dda\0\u3e01"+
    "\0\u1b6c\0\u3e28\0\u3e4f\0\u3e76\0\u3e9d\0\u3ec4\0\u3eeb\0\u3f12"+
    "\0\u3f39\0\u3f60\0\u3f87\0\u3fae\0\u3fd5\0\u3ffc\0\47\0\u4023"+
    "\0\u404a\0\u4071\0\u4098\0\u40bf\0\u40e6\0\u410d\0\u4134\0\u415b"+
    "\0\u4182\0\47\0\u41a9\0\u41d0\0\u41f7\0\u421e\0\u4245\0\u426c"+
    "\0\u4293\0\u42ba\0\u42e1\0\u4308\0\u432f\0\u4356\0\u437d\0\u43a4"+
    "\0\u43cb\0\u43f2\0\u4419\0\u4440\0\u4467\0\u448e\0\u44b5\0\u44dc"+
    "\0\u4503\0\u452a\0\u057c\0\u4551\0\u4578\0\u459f\0\u45c6\0\u0fb1"+
    "\0\u45ed\0\u4614\0\47\0\u463b\0\u4662\0\u4689\0\u310e\0\47"+
    "\0\u46b0\0\u46d7\0\u46fe\0\u4725\0\u474c\0\u4773\0\u479a\0\u47c1"+
    "\0\u47e8\0\u480f\0\u4836\0\u1e9f\0\u485d\0\u4884\0\u48ab\0\u48d2"+
    "\0\u48f9\0\u4920\0\u4947\0\u496e\0\u4995\0\u49bc\0\u49e3\0\u4a0a"+
    "\0\u4a31\0\u4a58\0\u4a7f\0\u4aa6\0\u4acd\0\u4af4\0\u4b1b\0\u4b42"+
    "\0\u4b69\0\u4b90\0\u4bb7\0\u4bde\0\u4c05\0\u4c2c\0\u4c53\0\u4c7a"+
    "\0\u4ca1\0\u4cc8\0\u4cef\0\u4d16\0\u4d3d\0\u4d64\0\u18ae\0\u4d8b"+
    "\0\u4db2\0\u4dd9\0\u310e\0\u4e00\0\u4e27\0\u4e4e\0\u4e75\0\47"+
    "\0\u4e9c\0\u4ec3\0\u4eea\0\u4f11\0\u4f38\0\u1d8e\0\u4f5f\0\u4f86"+
    "\0\u4fad\0\u4fd4\0\u4ffb\0\u5022\0\u5049\0\u4419\0\u5070\0\u5097"+
    "\0\u50be\0\u50e5\0\u510c\0\u5133\0\u515a\0\u5181\0\u51a8\0\u51cf"+
    "\0\u51f6\0\u0fb1\0\u521d\0\u5244\0\u526b\0\u5292\0\47\0\u52b9"+
    "\0\u52e0\0\u5307\0\u532e\0\u5355\0\u537c\0\u53a3\0\u53ca\0\u53f1"+
    "\0\u5418\0\u543f\0\u5466\0\u548d\0\u54b4\0\u54db\0\u5502\0\u5529"+
    "\0\u5550\0\u5577\0\u559e\0\u55c5\0\u55ec\0\u5613\0\u563a\0\u5661"+
    "\0\u5688\0\u56af\0\u56d6\0\u56fd\0\u5724\0\u574b\0\u5772\0\u5799"+
    "\0\u57c0\0\u57e7\0\u580e\0\u5835\0\u585c\0\u5883\0\u58aa\0\u58d1"+
    "\0\u58f8\0\u591f\0\u5946\0\u596d\0\u5994\0\u59bb\0\u59e2\0\u5a09"+
    "\0\u5a30\0\u5a57\0\u5a7e\0\u5aa5\0\u5acc\0\u5af3\0\u5b1a\0\u5b41"+
    "\0\u5b68\0\47\0\u5b8f\0\u5bb6\0\u5bdd\0\u5c04\0\u5c2b\0\u5c52"+
    "\0\u5c79\0\u5ca0\0\47\0\u5cc7\0\u5cee\0\u5d15\0\u5d3c\0\u5d63"+
    "\0\u5d8a\0\u5db1\0\u5dd8\0\u5dff\0\u5e26\0\u5e4d\0\u5e74\0\u5e9b"+
    "\0\u5ec2\0\u5ee9\0\u5f10\0\u5f37\0\u5f5e\0\u5f85\0\u5fac\0\u5fd3"+
    "\0\u5ffa\0\u6021\0\u6048\0\u606f\0\u6096\0\47\0\u60bd\0\u60e4"+
    "\0\u610b\0\47\0\u3d65\0\u6132\0\u6159\0\u6180\0\u61a7\0\u61ce"+
    "\0\u61f5\0\u621c\0\u6243\0\u626a\0\u6291\0\u62b8\0\u62df\0\u6306"+
    "\0\47\0\u632d\0\u5529\0\u6354\0\u637b\0\u63a2\0\u63c9\0\u63f0"+
    "\0\u6417\0\u643e\0\u6465\0\u648c\0\u64b3\0\u64da\0\u6501\0\u6528"+
    "\0\u654f\0\u6576\0\u659d\0\u65c4\0\u65eb\0\u6612\0\u6639\0\u6660"+
    "\0\u6687\0\u66ae\0\u66d5\0\u66fc\0\u6723\0\u674a\0\u6771\0\u6798"+
    "\0\u67bf\0\u56fd\0\u67e6\0\u680d\0\u6834\0\u685b\0\u6882\0\u68a9"+
    "\0\u60bd\0\u68d0\0\u68f7\0\u691e\0\u6945\0\u696c\0\u6993\0\u69ba"+
    "\0\u69e1\0\u6a08\0\u6a2f\0\u6a56\0\u18ae\0\u6a7d\0\u6aa4\0\u6acb"+
    "\0\u6af2\0\u6b19\0\u6b40\0\u6b67\0\u6b8e\0\u6bb5\0\u6bdc\0\u64b3"+
    "\0\u6c03\0\u6c2a\0\u6c51\0\u6c78\0\u6c9f\0\u6cc6\0\u6ced\0\u6d14"+
    "\0\u6d3b\0\u6d62\0\u6d89\0\u6db0\0\u6dd7\0\u6dfe\0\u6e25\0\u6e4c"+
    "\0\u6e73\0\u6e9a\0\u6ec1\0\u6af2\0\u6ee8\0\u6f0f\0\u6f36\0\u6f5d"+
    "\0\u6f84\0\u6fab\0\u6fd2\0\u6ff9\0\u6882\0\u7020\0\u7047\0\u706e"+
    "\0\u6e9a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[801];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\2\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\2\1\33\1\0\1\33\1\41\52\0\1\42"+
    "\1\43\2\0\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\0\1\51\1\52\3\0\1\53\3\0\1\54\21\0"+
    "\1\55\3\0\1\56\1\0\1\57\11\0\1\60\26\0"+
    "\1\61\2\0\1\62\1\63\4\0\1\64\6\0\1\65"+
    "\26\0\1\66\3\0\1\67\1\0\1\70\7\0\1\71"+
    "\1\0\1\72\26\0\1\73\1\74\4\0\1\75\1\76"+
    "\4\0\1\77\5\0\1\100\2\0\1\101\2\0\1\102"+
    "\16\0\1\103\2\0\1\104\2\0\1\105\3\0\1\106"+
    "\1\0\1\107\1\0\1\110\1\0\1\111\27\0\1\112"+
    "\1\113\4\0\1\114\1\115\36\0\1\116\3\0\1\117"+
    "\1\0\1\120\3\0\1\121\3\0\1\122\1\0\1\123"+
    "\2\0\1\124\23\0\1\125\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\2\0\1\134\1\0\1\135\1\136\1\137"+
    "\1\140\1\0\1\141\26\0\1\142\2\0\1\143\1\144"+
    "\1\0\1\145\40\0\1\146\3\0\1\147\1\0\1\150"+
    "\7\0\1\151\1\0\1\152\26\0\1\153\11\0\1\154"+
    "\1\0\1\155\1\0\1\156\30\0\1\157\3\0\1\160"+
    "\1\0\1\161\11\0\1\162\26\0\1\163\3\0\1\164"+
    "\1\0\1\165\11\0\1\166\2\0\1\167\24\0\1\170"+
    "\6\0\1\171\2\0\1\172\34\0\1\173\2\0\1\174"+
    "\1\0\1\175\41\0\1\176\1\177\6\0\1\200\1\201"+
    "\1\0\1\202\1\0\1\203\2\0\1\204\3\0\1\205"+
    "\2\0\1\206\16\0\1\207\3\0\1\210\1\0\1\211"+
    "\3\0\1\212\1\0\1\213\1\0\1\214\1\0\1\215"+
    "\2\0\1\216\23\0\1\217\3\0\1\220\1\0\1\221"+
    "\3\0\1\222\3\0\1\223\1\0\1\224\32\0\1\225"+
    "\13\0\1\226\26\0\1\227\3\0\1\230\1\0\1\231"+
    "\3\0\1\232\1\0\1\233\1\0\1\234\1\0\1\235"+
    "\44\0\1\236\1\0\1\237\26\0\1\240\5\0\1\241"+
    "\74\0\1\242\47\0\1\243\47\0\1\244\16\0\1\245"+
    "\1\246\1\247\42\0\1\250\44\0\1\251\2\0\1\252"+
    "\4\0\1\253\52\0\1\254\26\0\33\255\1\256\7\255"+
    "\2\0\2\255\2\0\1\257\17\0\1\260\30\0\1\261"+
    "\1\0\1\52\1\0\1\262\11\0\1\263\30\0\1\264"+
    "\64\0\1\265\30\0\1\266\46\0\1\267\44\0\1\270"+
    "\4\0\1\271\1\272\2\0\1\273\12\0\1\274\23\0"+
    "\1\275\47\0\1\276\26\0\1\277\25\0\1\271\10\0"+
    "\1\300\25\0\1\301\3\0\1\302\1\0\1\303\3\0"+
    "\1\304\5\0\1\305\26\0\1\306\1\307\51\0\1\310"+
    "\13\0\1\311\37\0\1\312\4\0\1\313\31\0\1\314"+
    "\1\315\4\0\1\250\20\0\1\316\16\0\1\317\11\0"+
    "\1\320\1\0\1\120\34\0\1\321\4\0\1\322\1\323"+
    "\3\0\1\324\1\325\32\0\1\326\10\0\1\220\36\0"+
    "\1\321\6\0\1\327\1\330\1\0\1\331\34\0\1\332"+
    "\7\0\1\315\56\0\1\333\26\0\1\334\17\0\1\335"+
    "\46\0\1\336\30\0\1\337\64\0\1\315\51\0\1\340"+
    "\25\0\1\341\44\0\1\342\5\0\1\343\1\0\1\344"+
    "\1\345\1\0\1\346\1\347\30\0\1\350\17\0\1\351"+
    "\30\0\1\352\50\0\1\353\42\0\1\354\15\0\1\355"+
    "\32\0\1\250\10\0\1\315\33\0\1\356\7\0\1\156"+
    "\1\0\1\357\1\0\1\360\1\361\1\362\40\0\1\363"+
    "\20\0\1\364\25\0\1\365\42\0\1\366\52\0\1\367"+
    "\3\0\1\370\50\0\1\371\4\0\1\315\23\0\1\372"+
    "\7\0\1\373\45\0\1\250\37\0\1\374\3\0\1\375"+
    "\1\0\1\376\7\0\1\377\1\0\1\u0100\2\0\1\u0101"+
    "\27\0\1\u0102\5\0\1\u0103\7\0\1\250\25\0\1\361"+
    "\7\0\1\u0104\57\0\1\u0105\25\0\1\u0106\1\250\3\0"+
    "\1\120\2\0\1\250\11\0\1\321\43\0\1\u0107\26\0"+
    "\1\u0108\3\0\1\u0109\1\0\1\u010a\3\0\1\u010b\3\0"+
    "\1\u010c\1\0\1\u010d\26\0\1\u010e\3\0\1\u010f\1\0"+
    "\1\u0110\3\0\1\u0111\3\0\1\220\1\0\1\u0112\27\0"+
    "\1\u0113\1\321\1\0\1\u0114\1\u0115\3\0\1\u0116\2\0"+
    "\1\u0117\13\0\1\u0118\21\0\1\u0119\44\0\1\u011a\1\321"+
    "\21\0\1\u011b\26\0\1\u011c\46\0\1\u011d\1\0\1\u011e"+
    "\3\0\1\u011f\1\0\1\u0120\3\0\1\u0121\32\0\1\u0122"+
    "\1\0\1\u0123\44\0\1\u0124\1\0\1\u0125\41\0\1\u0126"+
    "\56\0\1\321\2\0\1\120\1\0\1\347\6\0\1\u0127"+
    "\31\0\1\250\3\0\1\u0128\32\0\1\u0129\3\0\1\u012a"+
    "\1\0\1\u012b\11\0\1\u012c\2\0\1\u012d\24\0\1\156"+
    "\1\334\7\0\1\u012e\36\0\1\u012f\45\0\1\u0130\4\0"+
    "\1\u0131\40\0\1\331\21\0\1\u0132\25\0\1\100\5\0"+
    "\1\u0133\40\0\1\u0134\45\0\1\344\6\0\2\u012e\40\0"+
    "\1\u0135\3\0\1\120\13\0\1\336\1\321\43\0\1\u0136"+
    "\26\0\1\u0137\50\0\1\250\52\0\1\u0138\1\352\7\0"+
    "\1\336\3\0\1\250\23\0\1\u0139\1\331\1\321\4\0"+
    "\1\250\41\0\1\250\5\0\1\u013a\10\0\1\u013b\1\u013c"+
    "\34\0\1\u013d\43\0\1\u013e\1\0\1\u012e\7\0\1\316"+
    "\2\0\1\u013f\24\0\1\u0140\1\0\1\250\1\0\1\220"+
    "\43\0\1\u0141\6\0\1\u0142\45\0\1\u0143\2\0\1\u0144"+
    "\44\0\1\u0145\45\0\1\u0146\4\0\1\u0147\52\0\1\u0148"+
    "\32\0\1\u0149\13\0\1\u014a\32\0\1\u014b\6\0\1\156"+
    "\7\0\1\315\24\0\1\u014c\51\0\1\u014d\24\0\1\u014e"+
    "\20\0\1\u014f\51\0\1\u0150\40\0\1\u0151\30\0\1\u0152"+
    "\24\0\1\273\41\0\1\u0153\7\0\1\u0154\54\0\1\u0155"+
    "\53\0\1\u0156\25\0\1\u0157\43\0\1\271\17\0\1\352"+
    "\1\315\24\0\1\u0158\1\u0159\1\u015a\1\0\1\u015b\1\u015c"+
    "\2\0\1\u015d\3\0\1\u015e\5\0\1\u015f\2\0\1\u0160"+
    "\22\0\1\331\1\u0161\4\0\1\250\2\0\1\344\40\0"+
    "\1\u0162\1\0\1\u0163\11\0\1\u0164\32\0\1\u0165\11\0"+
    "\1\u0166\1\0\1\u014a\30\0\1\u0167\3\0\1\372\1\0"+
    "\1\u0135\1\0\1\u0168\10\0\1\321\23\0\1\356\1\0"+
    "\1\u0169\7\0\1\u016a\3\0\1\u016b\5\0\1\315\24\0"+
    "\1\336\7\0\1\u016c\36\0\1\321\56\0\1\324\15\0"+
    "\1\316\22\0\1\u016d\1\0\1\u016e\11\0\1\u016f\27\0"+
    "\1\315\46\0\1\361\45\0\1\u0170\64\0\1\u0171\32\0"+
    "\1\273\2\0\1\u0172\4\0\1\u0173\1\0\1\u0174\1\u0175"+
    "\40\0\1\250\4\0\1\u0176\33\0\1\u0177\2\0\1\u0178"+
    "\5\0\1\u0179\12\0\1\u017a\2\0\1\u017b\22\0\1\u017c"+
    "\1\0\1\u017d\11\0\1\u017e\32\0\1\u017f\13\0\1\u0180"+
    "\30\0\1\u0181\56\0\1\u0182\3\0\1\u0183\3\0\1\u0101"+
    "\33\0\1\u0184\60\0\1\315\41\0\1\u0185\46\0\1\u0186"+
    "\66\0\1\34\47\0\1\u0187\7\0\43\244\2\0\2\244"+
    "\17\0\1\u0188\42\0\1\u0189\55\0\1\u018a\34\0\1\u018b"+
    "\60\0\1\u018c\42\0\1\356\30\0\2\255\1\u018d\40\255"+
    "\2\0\4\255\1\u018d\1\255\1\u018e\3\255\1\u018f\5\255"+
    "\1\u0190\24\255\2\0\2\255\21\0\1\316\3\0\1\u0191"+
    "\42\0\1\u0192\35\0\1\u0193\50\0\1\u0194\46\0\1\u012e"+
    "\5\0\1\u0195\33\0\1\u0196\61\0\1\u0197\34\0\1\u0198"+
    "\50\0\1\u0199\52\0\1\u019a\53\0\1\315\31\0\1\u019b"+
    "\75\0\1\u019c\17\0\1\u019d\1\0\1\u019e\73\0\1\u019f"+
    "\25\0\1\u01a0\52\0\1\336\33\0\1\u01a1\1\u01a2\45\0"+
    "\1\u01a3\4\0\1\u01a4\1\0\1\u01a5\4\0\1\u01a6\5\0"+
    "\1\171\33\0\1\u01a2\1\0\1\u01a7\40\0\1\u017b\13\0"+
    "\1\u01a8\36\0\1\u01a5\5\0\1\u01a9\35\0\1\u01aa\43\0"+
    "\1\u01ab\45\0\1\u01ac\12\0\1\u01ad\32\0\1\u01ae\1\315"+
    "\57\0\1\315\43\0\1\315\12\0\1\321\30\0\1\321"+
    "\54\0\1\u01af\44\0\1\323\42\0\1\321\2\0\1\332"+
    "\53\0\1\315\54\0\1\250\30\0\1\u01b0\25\0\1\u01b1"+
    "\24\0\1\336\45\0\1\321\43\0\1\u015b\50\0\1\u0137"+
    "\43\0\1\u01b2\46\0\1\u01b3\47\0\1\315\43\0\1\u01b4"+
    "\3\0\1\55\22\0\1\u01b5\22\0\1\u01b6\43\0\1\u01b7"+
    "\52\0\1\u01b8\43\0\1\u01b9\53\0\1\315\41\0\1\u01ba"+
    "\50\0\1\250\6\0\1\315\55\0\1\u01bb\32\0\1\313"+
    "\4\0\1\u01bc\43\0\1\u0192\61\0\1\315\36\0\1\156"+
    "\43\0\1\u01bd\37\0\1\326\47\0\1\315\45\0\1\u01be"+
    "\61\0\1\u01bf\36\0\1\u0105\43\0\1\u01c0\47\0\1\u01c1"+
    "\3\0\1\u01c2\40\0\1\u01c3\4\0\1\u01c4\2\0\1\u01c5"+
    "\42\0\1\u01c6\42\0\1\u01c7\64\0\1\u01c8\30\0\1\u01c9"+
    "\70\0\1\u01ca\40\0\1\156\45\0\1\u01cb\34\0\1\u01cc"+
    "\7\0\1\u015b\35\0\1\u01cd\7\0\1\u01ce\1\250\65\0"+
    "\1\332\17\0\1\u01cf\75\0\1\u012e\47\0\1\u01d0\23\0"+
    "\1\u01d1\41\0\1\u01d2\64\0\1\250\2\0\1\250\35\0"+
    "\1\u01d3\36\0\1\331\1\267\44\0\1\u0117\47\0\1\u01d4"+
    "\3\0\1\u01d4\45\0\1\u01d5\1\0\1\u01d6\7\0\1\u01d7"+
    "\31\0\1\124\5\0\1\u01d8\52\0\1\315\1\332\3\0"+
    "\1\u01d9\45\0\1\u0194\27\0\1\u01da\47\0\1\316\11\0"+
    "\1\315\33\0\1\u01db\5\0\1\u01dc\41\0\1\u012e\1\250"+
    "\6\0\1\u01dd\1\u012e\5\0\1\u01de\30\0\1\250\4\0"+
    "\1\321\40\0\1\u0105\15\0\1\321\47\0\1\u01df\27\0"+
    "\1\u0105\2\0\1\120\56\0\1\321\36\0\1\u01e0\46\0"+
    "\1\u01e1\47\0\1\u01e2\11\0\1\321\2\0\1\321\26\0"+
    "\1\u01e3\44\0\1\u01d4\1\331\2\0\1\331\7\0\1\u0117"+
    "\33\0\2\321\11\0\1\u0117\36\0\1\u01e4\1\0\1\u01e5"+
    "\7\0\1\u01e6\36\0\1\220\46\0\1\u01e7\10\0\1\332"+
    "\33\0\1\u014b\6\0\1\156\42\0\1\316\53\0\1\u0117"+
    "\46\0\1\u01c8\51\0\1\u0105\2\0\1\u0105\26\0\1\273"+
    "\60\0\1\315\2\0\1\315\31\0\1\u012d\45\0\1\u012d"+
    "\1\u01e8\7\0\1\u01e9\41\0\1\u01ea\51\0\1\u01e9\4\0"+
    "\1\u012d\14\0\1\u01b1\46\0\1\u01b1\17\0\1\u01eb\44\0"+
    "\1\u01d3\45\0\1\u01ec\51\0\1\315\64\0\1\u01ed\6\0"+
    "\1\u01ee\17\0\1\336\46\0\1\u0105\5\0\1\250\40\0"+
    "\1\321\5\0\1\321\2\0\1\u01ef\1\u01f0\14\0\1\316"+
    "\20\0\1\u01c7\56\0\1\u01f1\37\0\1\220\45\0\1\250"+
    "\1\0\1\321\45\0\1\333\43\0\1\u01f2\47\0\1\u01f0"+
    "\51\0\1\u01f3\44\0\1\u01f4\50\0\1\324\46\0\1\u01f5"+
    "\46\0\1\270\46\0\1\u01f6\43\0\1\u019a\51\0\1\u0117"+
    "\7\0\1\156\43\0\1\u01f7\50\0\1\321\55\0\1\u01f8"+
    "\55\0\1\u01f9\17\0\1\u01fa\50\0\1\u01fb\43\0\1\u01fc"+
    "\46\0\1\u01fd\51\0\1\u01fe\52\0\1\u01ff\46\0\1\u0200"+
    "\66\0\1\u0201\24\0\1\u0202\52\0\1\u0203\36\0\1\u0204"+
    "\2\0\1\u0135\4\0\1\321\36\0\1\250\1\0\1\u0205"+
    "\2\0\1\321\50\0\1\u0206\36\0\1\u0105\45\0\1\u0207"+
    "\17\0\1\u0208\34\0\1\u0209\54\0\1\315\3\0\1\u020a"+
    "\26\0\1\u020b\5\0\1\u020c\7\0\1\u015b\50\0\1\u020d"+
    "\30\0\1\332\1\0\1\321\42\0\1\u01d4\3\0\1\u020e"+
    "\2\0\1\250\46\0\1\76\37\0\1\u020f\15\0\1\347"+
    "\1\u0192\33\0\1\331\2\0\1\250\1\0\1\250\41\0"+
    "\1\273\73\0\1\u0210\16\0\1\u0211\6\0\1\220\41\0"+
    "\1\u0212\44\0\1\361\2\0\1\250\43\0\1\120\20\0"+
    "\1\u01bb\33\0\1\u0213\50\0\1\250\36\0\1\331\56\0"+
    "\1\u01f7\4\0\1\u0214\42\0\1\u01c7\35\0\1\u0215\10\0"+
    "\1\u0216\36\0\1\u0217\1\0\1\315\57\0\1\315\45\0"+
    "\1\332\52\0\1\u0218\30\0\1\250\11\0\1\250\54\0"+
    "\1\u01be\40\0\1\344\42\0\1\u0219\42\0\1\311\46\0"+
    "\1\u021a\46\0\1\u021b\57\0\1\216\11\0\1\u012e\26\0"+
    "\1\250\1\0\1\250\46\0\1\u015b\6\0\1\u021c\31\0"+
    "\1\u021d\45\0\1\u021e\16\0\1\u021f\1\u0220\25\0\1\120"+
    "\10\0\1\u0221\7\0\1\u01bb\46\0\1\u0222\40\0\1\u0223"+
    "\46\0\1\u0224\67\0\1\34\11\0\1\324\52\0\1\u0170"+
    "\54\0\1\u01f8\43\0\1\u0225\47\0\1\u0226\34\0\2\255"+
    "\1\u018d\7\255\1\u0227\30\255\2\0\4\255\1\u018d\2\255"+
    "\1\u0228\35\255\2\0\4\255\1\u018d\24\255\1\u0227\13\255"+
    "\2\0\4\255\1\u018d\17\255\1\u0229\20\255\2\0\2\255"+
    "\33\0\1\u022a\21\0\1\u022b\47\0\1\300\45\0\1\u01f7"+
    "\43\0\1\u022c\65\0\1\u022d\30\0\1\216\56\0\1\u01d2"+
    "\54\0\1\223\31\0\1\u022e\45\0\1\u022f\47\0\1\u0230"+
    "\45\0\1\u0231\44\0\1\u0232\3\0\1\u0233\13\0\1\u0234"+
    "\46\0\1\u0235\40\0\1\u0236\40\0\1\u01a2\44\0\1\u0231"+
    "\4\0\1\u0230\55\0\1\u0237\52\0\1\u0238\27\0\1\u0239"+
    "\45\0\1\u023a\71\0\1\u01b4\2\0\1\u017b\30\0\1\u023b"+
    "\36\0\1\315\4\0\1\250\67\0\1\u023c\22\0\1\u023d"+
    "\44\0\1\u023e\46\0\1\u019d\50\0\1\u023f\47\0\1\356"+
    "\72\0\1\u0240\20\0\1\321\43\0\1\u0241\51\0\1\156"+
    "\45\0\1\u0189\54\0\1\u01c7\42\0\1\313\46\0\1\76"+
    "\44\0\1\u0242\50\0\1\u0243\51\0\1\u0201\46\0\1\u0244"+
    "\37\0\1\u0245\61\0\1\u0246\47\0\1\u0247\36\0\1\u01c7"+
    "\43\0\1\344\50\0\1\u0248\51\0\1\u0249\57\0\1\250"+
    "\44\0\1\u024a\41\0\1\315\55\0\1\u0105\31\0\1\u024b"+
    "\45\0\1\u024c\70\0\1\u0101\42\0\1\321\27\0\1\u0173"+
    "\3\0\1\356\51\0\1\316\7\0\1\316\34\0\1\u01cf"+
    "\45\0\1\u024d\51\0\1\u0105\51\0\1\321\35\0\1\u01cc"+
    "\46\0\1\u01d4\51\0\1\120\44\0\1\321\14\0\1\250"+
    "\30\0\1\u024e\46\0\1\u011b\62\0\1\u01c8\35\0\1\u024f"+
    "\45\0\1\u0230\1\u0250\16\0\1\u0251\23\0\1\331\47\0"+
    "\1\u0252\46\0\1\124\61\0\1\u0253\35\0\1\u0254\47\0"+
    "\1\u012d\45\0\1\u012d\55\0\1\u0255\50\0\1\u0256\40\0"+
    "\1\u0257\41\0\1\u0258\45\0\1\u0242\75\0\1\333\17\0"+
    "\1\u0259\17\0\1\u025a\46\0\1\u025b\36\0\1\u025c\41\0"+
    "\1\u025d\46\0\1\u025e\55\0\1\u025f\56\0\1\u0260\46\0"+
    "\1\u0166\40\0\1\u0261\40\0\1\u01c2\44\0\1\u0262\46\0"+
    "\1\u019a\47\0\1\336\46\0\1\u0263\41\0\1\u0264\52\0"+
    "\1\u0265\60\0\1\u0266\45\0\1\316\40\0\1\u0267\50\0"+
    "\1\u019a\36\0\1\250\46\0\1\321\57\0\1\u0268\43\0"+
    "\1\u0269\46\0\1\u026a\57\0\1\u026b\30\0\1\u0105\42\0"+
    "\43\u026c\2\0\2\u026c\6\0\1\223\43\0\1\120\11\0"+
    "\1\315\55\0\1\273\34\0\1\u026d\56\0\1\u0242\44\0"+
    "\1\u026e\32\0\1\u0230\73\0\1\316\20\0\1\u026f\54\0"+
    "\1\u0101\43\0\1\u0270\65\0\1\u0251\23\0\1\u0271\5\0"+
    "\1\u0272\40\0\1\u0100\5\0\1\u0273\11\0\1\u0274\30\0"+
    "\1\u0275\50\0\1\u01f8\46\0\1\352\42\0\1\76\52\0"+
    "\1\u0276\52\0\1\u019a\34\0\2\255\1\u018d\17\255\1\u0277"+
    "\20\255\2\0\4\255\1\u018d\1\u0278\37\255\2\0\2\255"+
    "\27\0\1\u0279\30\0\1\u01d2\55\0\1\u027a\34\0\1\u027b"+
    "\62\0\1\u019a\32\0\1\u0250\16\0\1\u0251\33\0\1\u027c"+
    "\66\0\1\u027d\17\0\1\u027e\65\0\1\u027f\50\0\1\u0280"+
    "\27\0\1\u013a\47\0\1\u018a\50\0\1\u0281\14\0\1\u0251"+
    "\32\0\1\u0282\43\0\1\u0283\54\0\1\u0284\35\0\1\311"+
    "\55\0\1\u0285\44\0\1\223\52\0\1\352\34\0\1\u0286"+
    "\55\0\1\u0287\47\0\1\u0288\44\0\1\u0289\65\0\1\u028a"+
    "\23\0\1\u01be\46\0\1\u028b\64\0\1\u024f\50\0\1\u01d2"+
    "\25\0\1\356\54\0\1\u0230\43\0\1\u028c\73\0\1\u028d"+
    "\37\0\1\321\30\0\1\u01d9\46\0\1\u028e\51\0\1\u028f"+
    "\43\0\1\u0290\51\0\1\u0291\41\0\1\250\1\0\1\u01d9"+
    "\61\0\1\u01c8\47\0\1\u01cc\56\0\1\u0292\26\0\1\u0293"+
    "\54\0\1\u0294\34\0\1\u0295\53\0\1\u0296\66\0\1\u0297"+
    "\25\0\1\u0298\52\0\1\u0299\32\0\1\u029a\17\0\1\u0208"+
    "\30\0\1\u029b\50\0\1\u0148\52\0\1\u029c\42\0\1\u029d"+
    "\46\0\1\u01d2\102\0\1\u029e\13\0\1\u029f\42\0\1\u02a0"+
    "\43\0\2\u026c\1\u02a1\40\u026c\2\0\2\u026c\6\0\1\u02a2"+
    "\52\0\1\273\45\0\1\u01f8\51\0\1\u02a3\43\0\1\u012e"+
    "\46\0\1\u02a4\67\0\1\361\20\0\1\u02a5\47\0\1\u0230"+
    "\1\u0250\43\0\1\u013a\43\0\2\255\1\u018d\15\255\1\u02a6"+
    "\22\255\2\0\4\255\1\u018d\21\255\1\u02a7\16\255\2\0"+
    "\2\255\14\0\1\u02a8\56\0\1\u02a9\36\0\1\u02aa\32\0"+
    "\43\255\2\0\2\255\6\0\1\u02ab\56\0\1\u02ac\33\0"+
    "\1\u02ad\50\0\1\u01d2\47\0\1\u01b4\52\0\1\u01d2\50\0"+
    "\1\u02ae\32\0\43\u02af\2\0\2\u02af\22\0\1\u02ae\35\0"+
    "\1\u02ae\45\0\1\u02b0\44\0\1\u0293\44\0\1\u02b1\50\0"+
    "\1\u02b2\43\0\1\u02b3\46\0\1\u02b4\1\u02b5\1\0\1\u02b6"+
    "\3\0\1\u02b7\7\0\1\u02b8\4\0\1\u02b9\33\0\1\u0293"+
    "\50\0\1\u02ba\47\0\1\u01c7\35\0\1\u02bb\1\0\1\u02bc"+
    "\44\0\1\u02bd\43\0\1\u02be\76\0\1\u02bf\23\0\1\u0261"+
    "\60\0\1\u02c0\32\0\1\u02c1\72\0\1\u02c2\33\0\1\u012e"+
    "\34\0\1\u019a\47\0\1\u02c3\52\0\1\u01a3\57\0\1\u02c4"+
    "\25\0\1\u02c5\62\0\1\u02c6\30\0\2\u026c\1\u02a1\1\u02c7"+
    "\37\u026c\2\0\2\u026c\16\0\1\u02c8\47\0\1\u02c9\40\0"+
    "\1\332\41\0\1\332\42\0\2\255\1\u018d\21\255\1\u02ca"+
    "\16\255\2\0\4\255\1\u018d\30\255\1\u02cb\7\255\2\0"+
    "\2\255\22\0\1\u02cc\31\0\1\u02b2\41\0\43\u02cd\2\0"+
    "\2\u02cd\3\0\1\u02ce\70\0\1\u02cf\27\0\1\u02d0\40\0"+
    "\22\u02af\1\u02d1\20\u02af\2\0\2\u02af\4\0\1\u02d2\50\0"+
    "\1\u02d3\50\0\1\u02b8\43\0\1\u02d4\5\0\1\u02d5\43\0"+
    "\1\u02d6\44\0\1\u02d7\1\0\1\u02d8\41\0\1\u017b\53\0"+
    "\1\u02d9\11\0\1\u02da\32\0\1\u02db\51\0\1\u0293\40\0"+
    "\1\u02dc\57\0\1\u01a3\43\0\1\u02dd\44\0\1\u02de\66\0"+
    "\1\u024f\25\0\1\u02df\54\0\1\u02e0\44\0\1\156\61\0"+
    "\1\u02e1\21\0\2\u026c\1\u02a1\6\u026c\1\u02e2\31\u026c\2\0"+
    "\2\u026c\27\0\1\u028a\2\0\1\u02c2\36\0\1\u02e3\24\0"+
    "\2\255\1\u018d\2\255\1\u0227\35\255\2\0\4\255\1\u02e4"+
    "\40\255\2\0\2\255\17\0\1\u01d2\27\0\3\u02cd\1\u02e5"+
    "\37\u02cd\2\0\2\u02cd\33\0\1\u02e6\13\0\43\u02e7\2\0"+
    "\2\u02e7\14\0\1\u02e8\32\0\14\u02af\1\u02e9\5\u02af\1\u02d1"+
    "\20\u02af\2\0\2\u02af\10\0\1\u02ea\71\0\1\u02eb\27\0"+
    "\1\u02ec\54\0\1\311\50\0\1\u02ed\54\0\1\u01b5\42\0"+
    "\1\311\52\0\1\u017b\34\0\1\u02ee\40\0\1\u02ef\60\0"+
    "\1\u0293\36\0\1\u02f0\54\0\1\u02f1\36\0\1\u028a\44\0"+
    "\1\u02f2\36\0\43\u02f3\2\0\2\u02f3\14\0\1\u02f4\32\0"+
    "\2\255\1\u018d\7\255\1\u02f5\30\255\2\0\2\255\3\u02cd"+
    "\1\u02e5\16\u02cd\1\u02f6\20\u02cd\2\0\2\u02cd\10\0\1\u02f7"+
    "\36\0\23\u02e7\1\u02f8\17\u02e7\2\0\2\u02e7\43\u02f9\2\0"+
    "\2\u02f9\22\0\1\u02fa\46\0\1\u02f7\32\0\1\u017b\45\0"+
    "\1\u02fb\55\0\1\311\44\0\1\u02d3\42\0\1\u02fc\43\0"+
    "\1\u02fd\46\0\1\u02fe\43\0\23\u02f3\1\u02ff\17\u02f3\2\0"+
    "\2\u02f3\6\0\1\u01a3\40\0\3\u02cd\1\u02e5\10\u02cd\1\u0300"+
    "\26\u02cd\2\0\2\u02cd\27\0\1\u02b2\17\0\20\u02e7\1\u0301"+
    "\2\u02e7\1\u02f8\17\u02e7\2\0\2\u02e7\4\u02f9\1\u0302\36\u02f9"+
    "\2\0\2\u02f9\3\0\1\u0303\47\0\1\311\53\0\1\311"+
    "\41\0\1\u0304\66\0\1\u0305\22\0\20\u02f3\1\u0306\2\u02f3"+
    "\1\u02ff\17\u02f3\2\0\2\u02f3\4\u02e7\1\u0307\16\u02e7\1\u02f8"+
    "\17\u02e7\2\0\2\u02e7\4\u02f9\1\u0302\1\u0308\35\u02f9\2\0"+
    "\2\u02f9\33\0\1\u0309\27\0\1\u030a\74\0\1\u030b\4\0"+
    "\4\u02f3\1\u030c\16\u02f3\1\u02ff\17\u02f3\2\0\2\u02f3\23\u02e7"+
    "\1\u02f8\7\u02e7\1\u030d\7\u02e7\2\0\2\u02e7\2\u02f9\1\u030e"+
    "\1\u02f9\1\u0302\36\u02f9\2\0\2\u02f9\4\0\1\u030f\44\0"+
    "\1\u0310\67\0\1\u0311\23\0\43\u0312\2\0\2\u0312\2\u02e7"+
    "\1\u0313\20\u02e7\1\u02f8\17\u02e7\2\0\2\u02e7\3\u02f9\1\u0314"+
    "\1\u0302\36\u02f9\2\0\2\u02f9\22\0\1\u01a3\40\0\1\u0315"+
    "\52\0\1\u0316\26\0\2\u0312\1\u0317\40\u0312\2\0\2\u0312"+
    "\16\u02e7\1\u0318\4\u02e7\1\u02f8\17\u02e7\2\0\2\u02e7\25\0"+
    "\1\u02ae\31\0\1\u0319\36\0\2\u0312\1\u0317\7\u0312\1\u031a"+
    "\30\u0312\2\0\2\u0312\12\u02e7\1\u031b\10\u02e7\1\u02f8\17\u02e7"+
    "\2\0\2\u02e7\16\0\1\331\30\0\2\u0312\1\u0317\30\u0312"+
    "\1\u031c\7\u0312\2\0\2\u0312\22\u02e7\1\u031d\1\u02f8\17\u02e7"+
    "\2\0\2\u02e7\2\u0312\1\u0317\10\u0312\1\u031e\27\u0312\2\0"+
    "\4\u0312\1\u0317\3\u0312\1\u031f\34\u0312\2\0\4\u0312\1\u0317"+
    "\13\u0312\1\u0320\24\u0312\2\0\4\u0312\1\u0317\13\u0312\1\u0321"+
    "\24\u0312\2\0\2\u0312";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28821];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\27\1\2\11\3\1\2\11\2\1\2\0"+
    "\1\1\3\0\1\11\12\0\1\1\1\0\1\1\22\0"+
    "\2\1\1\0\1\1\26\0\1\1\17\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\3\0\1\1\2\0\1\1"+
    "\3\0\1\1\2\0\1\1\5\0\1\11\5\0\1\1"+
    "\17\0\1\1\1\0\1\11\1\0\1\11\22\0\1\11"+
    "\6\0\1\1\4\0\1\1\1\0\1\11\3\0\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\0\1\1\37\0"+
    "\1\1\13\0\1\11\3\0\1\11\11\0\1\1\4\0"+
    "\1\1\1\0\1\1\4\0\1\1\24\0\1\1\3\0"+
    "\1\1\30\0\1\1\6\0\1\1\1\0\1\1\3\0"+
    "\1\1\6\0\1\1\5\0\1\1\11\0\1\1\20\0"+
    "\1\1\27\0\1\11\3\0\1\1\2\0\3\11\2\0"+
    "\1\1\4\0\1\1\3\0\1\1\1\0\1\11\5\0"+
    "\1\1\1\0\1\1\15\0\1\11\12\0\1\11\12\0"+
    "\1\1\15\0\1\1\4\0\1\1\2\0\1\11\3\0"+
    "\1\1\1\11\12\0\2\1\14\0\1\1\4\0\1\1"+
    "\12\0\1\1\5\0\1\1\3\0\1\1\4\0\1\11"+
    "\5\0\1\1\7\0\1\1\13\0\1\1\4\0\1\11"+
    "\1\0\1\1\1\0\1\1\4\0\1\1\24\0\1\1"+
    "\34\0\1\11\10\0\1\11\21\0\1\1\10\0\1\11"+
    "\3\0\1\11\1\1\15\0\1\11\1\0\1\1\36\0"+
    "\1\1\6\0\1\1\13\0\1\1\12\0\1\1\23\0"+
    "\1\1\10\0\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[801];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 39: break;
          case 2: 
            { lexeme=yytext(); return NUMERO;
            }
          case 40: break;
          case 3: 
            { lexeme=yytext(); return ART_INDEF;
            }
          case 41: break;
          case 4: 
            { lexeme=yytext(); return ADJ_POSESIV;
            }
          case 42: break;
          case 5: 
            { /* ignore */
            }
          case 43: break;
          case 6: 
            { lexeme=yytext(); return SIG_PUNT;
            }
          case 44: break;
          case 7: 
            { return resta;
            }
          case 45: break;
          case 8: 
            { return division;
            }
          case 46: break;
          case 9: 
            { return multiplicacion;
            }
          case 47: break;
          case 10: 
            { return suma;
            }
          case 48: break;
          case 11: 
            { lexeme=yytext(); return PREP_LUG;
            }
          case 49: break;
          case 12: 
            { lexeme=yytext(); return CONJ_SUBORCAUS;
            }
          case 50: break;
          case 13: 
            { lexeme=yytext(); return AUX_PRESEN;
            }
          case 51: break;
          case 14: 
            { lexeme=yytext(); return PREP_MOV;
            }
          case 52: break;
          case 15: 
            { lexeme=yytext(); return ADJ_PROPERSO;
            }
          case 53: break;
          case 16: 
            { lexeme=yytext(); return PREP_MOD;
            }
          case 54: break;
          case 17: 
            { lexeme=yytext(); return CONJ_COORDISYU;
            }
          case 55: break;
          case 18: 
            { lexeme=yytext(); return VERBO_PRESENT;
            }
          case 56: break;
          case 19: 
            { lexeme=yytext(); return CONJ_COORCOPU;
            }
          case 57: break;
          case 20: 
            { lexeme=yytext(); return VERBO_PASADOSIMP;
            }
          case 58: break;
          case 21: 
            { lexeme=yytext(); return ADJ_CALIFI;
            }
          case 59: break;
          case 22: 
            { lexeme=yytext(); return ART_DEFI;
            }
          case 60: break;
          case 23: 
            { lexeme=yytext(); return ADJ_NUMCARDIN;
            }
          case 61: break;
          case 24: 
            { lexeme=yytext(); return SUS_COMUN;
            }
          case 62: break;
          case 25: 
            { lexeme=yytext(); return ADJ_PROPOSESIV;
            }
          case 63: break;
          case 26: 
            { lexeme=yytext(); return WEATH;
            }
          case 64: break;
          case 27: 
            { lexeme=yytext(); return VERBO_PASADOPARTICI;
            }
          case 65: break;
          case 28: 
            { lexeme=yytext(); return CONJ_COORADVERV;
            }
          case 66: break;
          case 29: 
            { lexeme=yytext(); return CONJ_CONJSUBOCOMPARA;
            }
          case 67: break;
          case 30: 
            { lexeme=yytext(); return ADJ_DEMOS;
            }
          case 68: break;
          case 31: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONSEC;
            }
          case 69: break;
          case 32: 
            { lexeme=yytext(); return ADJ_PROINTERR;
            }
          case 70: break;
          case 33: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONCES;
            }
          case 71: break;
          case 34: 
            { lexeme=yytext(); return SUS_ABSTRACT;
            }
          case 72: break;
          case 35: 
            { lexeme=yytext(); return SUS_PROPIO;
            }
          case 73: break;
          case 36: 
            { lexeme=yytext(); return ADJ_NUMORD;
            }
          case 74: break;
          case 37: 
            { lexeme=yytext(); return ADJ_PROREFLEX;
            }
          case 75: break;
          case 38: 
            { lexeme=yytext(); return CONJ_SUBORDISYU;
            }
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
