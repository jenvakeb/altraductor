/* The following code was generated by JFlex 1.6.1 */

package altraductor;
import static altraductor.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/betio_000/Documents/NetBeansProjects/ALTraductor/src/altraductor/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\43\1\44\1\44\1\43\22\0\1\33\1\35\6\0"+
    "\1\35\1\35\1\41\1\46\1\35\1\37\1\36\1\40\12\1\1\35"+
    "\1\35\3\0\1\34\1\0\1\2\1\23\1\7\1\11\1\6\1\27"+
    "\1\24\1\5\1\10\1\30\1\21\1\16\1\17\1\3\1\22\1\15"+
    "\1\0\1\14\1\12\1\4\1\20\1\32\1\13\1\26\1\25\1\31"+
    "\1\35\1\0\1\35\35\0\1\35\1\42\1\35\7\0\1\44\u1fa2\0"+
    "\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\1\1\4\20\1\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\3\1\13\2\0"+
    "\1\14\3\0\1\15\12\0\1\16\1\0\1\17\22\0"+
    "\1\20\1\17\1\0\1\15\25\0\1\17\17\0\1\17"+
    "\2\0\1\4\1\0\1\17\1\16\3\0\1\20\2\0"+
    "\1\21\3\0\1\20\2\0\1\22\5\0\1\20\5\0"+
    "\1\22\17\0\1\5\1\0\1\23\1\0\1\24\22\0"+
    "\1\25\6\0\1\26\4\0\1\27\1\0\1\27\3\0"+
    "\1\30\2\0\1\17\1\22\1\24\1\31\1\0\1\17"+
    "\37\0\1\31\16\0\1\32\10\0\1\17\4\0\1\22"+
    "\1\0\1\22\4\0\1\27\24\0\1\24\2\0\1\22"+
    "\30\0\1\27\6\0\1\4\1\0\1\16\3\0\1\22"+
    "\6\0\1\24\5\0\1\33\11\0\1\17\20\0\1\20"+
    "\27\0\1\13\3\0\1\27\2\0\1\34\1\35\1\36"+
    "\2\0\1\17\4\0\1\30\3\0\1\22\1\0\1\37"+
    "\5\0\1\40\1\0\1\22\15\0\1\41\12\0\1\16"+
    "\11\0\1\22\15\0\1\20\4\0\1\22\2\0\1\4"+
    "\3\0\1\22\1\42\12\0\1\13\1\22\14\0\1\22"+
    "\4\0\1\4\11\0\1\27\5\0\1\34\3\0\1\24"+
    "\4\0\1\43\5\0\1\31\7\0\1\27\13\0\1\41"+
    "\4\0\1\14\1\0\1\27\1\0\1\22\4\0\1\22"+
    "\24\0\1\4\34\0\1\44\10\0\1\45\21\0\1\24"+
    "\10\0\1\33\3\0\1\40\1\27\15\0\1\21\1\0"+
    "\1\14\36\0\1\23\6\0\1\21\13\0\1\45\12\0"+
    "\1\21\23\0\1\23\10\0\1\23\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[795];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\47\0\47\0\u03cf\0\u03f6\0\u041d\0\47"+
    "\0\47\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\47\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f"+
    "\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f"+
    "\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57"+
    "\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\47"+
    "\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\47\0\u1443\0\u146a\0\u1491"+
    "\0\u14b8\0\u14df\0\u1506\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u179d\0\47\0\u17c4\0\47\0\u17eb"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b"+
    "\0\u1a82\0\47\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c"+
    "\0\u1b93\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\47"+
    "\0\u1ca4\0\u1ccb\0\u1cf2\0\47\0\u1d19\0\u1d40\0\u1d67\0\47"+
    "\0\u1d8e\0\47\0\u1db5\0\u10e9\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51"+
    "\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89"+
    "\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1"+
    "\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2\0\u21f9"+
    "\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a\0\u2331"+
    "\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442\0\u2469"+
    "\0\u2490\0\u24b7\0\47\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a"+
    "\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2"+
    "\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea"+
    "\0\u2616\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4\0\u28fb"+
    "\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c\0\u2a33"+
    "\0\u2a5a\0\u2a81\0\u046b\0\u2aa8\0\u1ddc\0\u2acf\0\u1d8e\0\u0bbb"+
    "\0\u2af6\0\u2b1d\0\u2b44\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07"+
    "\0\u2c2e\0\u2c55\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f"+
    "\0\u2295\0\u2d66\0\u2d8d\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50"+
    "\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88"+
    "\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0"+
    "\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8"+
    "\0\u321f\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330"+
    "\0\u3357\0\u337e\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441\0\u3468"+
    "\0\u348f\0\u34b6\0\u34dd\0\u3504\0\u352b\0\u27ea\0\u3552\0\u3579"+
    "\0\u35a0\0\u35c7\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1"+
    "\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774\0\u379b\0\u37c2\0\u37e9"+
    "\0\u3810\0\u3837\0\u385e\0\u3885\0\u38ac\0\u38d3\0\u38fa\0\u3921"+
    "\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4\0\47\0\u3a0b\0\u3a32"+
    "\0\u3a59\0\u3a80\0\u3aa7\0\u3ace\0\47\0\47\0\47\0\u3af5"+
    "\0\u3b1c\0\u2f88\0\u3b43\0\u3b6a\0\u3b91\0\u3bb8\0\u3a59\0\u3bdf"+
    "\0\u3c06\0\u3c2d\0\u3c54\0\u3c7b\0\47\0\u3ca2\0\u3cc9\0\u3cf0"+
    "\0\u3d17\0\u3d3e\0\u3d65\0\u3d8c\0\u1b45\0\u3db3\0\u3dda\0\u3e01"+
    "\0\u3e28\0\u3e4f\0\u3e76\0\u3e9d\0\u3ec4\0\u3eeb\0\u3f12\0\u3f39"+
    "\0\u3f60\0\u3f87\0\47\0\u3fae\0\u3fd5\0\u3ffc\0\u4023\0\u404a"+
    "\0\u4071\0\u4098\0\u40bf\0\u40e6\0\u410d\0\47\0\u4134\0\u415b"+
    "\0\u4182\0\u41a9\0\u41d0\0\u41f7\0\u421e\0\u4245\0\u426c\0\u4293"+
    "\0\u42ba\0\u42e1\0\u4308\0\u432f\0\u4356\0\u437d\0\u43a4\0\u43cb"+
    "\0\u43f2\0\u4419\0\u4440\0\u4467\0\u448e\0\u057c\0\u44b5\0\u44dc"+
    "\0\u4503\0\u452a\0\u0f8a\0\u4551\0\u4578\0\47\0\u459f\0\u45c6"+
    "\0\u45ed\0\u3099\0\47\0\u4614\0\u463b\0\u4662\0\u4689\0\u46b0"+
    "\0\u46d7\0\u46fe\0\u4725\0\u474c\0\u4773\0\u479a\0\u1e78\0\u47c1"+
    "\0\u47e8\0\u480f\0\u4836\0\u485d\0\u4884\0\u48ab\0\u48d2\0\u48f9"+
    "\0\u4920\0\u4947\0\u496e\0\u4995\0\u49bc\0\u49e3\0\u4a0a\0\u4a31"+
    "\0\u4a58\0\u4a7f\0\u4aa6\0\u4acd\0\u4af4\0\u4b1b\0\u4b42\0\u4b69"+
    "\0\u4b90\0\u4bb7\0\u4bde\0\u4c05\0\u4c2c\0\u4c53\0\u4c7a\0\u4ca1"+
    "\0\u1887\0\u4cc8\0\u4cef\0\u4d16\0\u3099\0\u4d3d\0\u4d64\0\u4d8b"+
    "\0\u4db2\0\47\0\u4dd9\0\u4e00\0\u4e27\0\u4e4e\0\u4e75\0\u1d67"+
    "\0\u4e9c\0\u4ec3\0\u4eea\0\u4f11\0\u4f38\0\u4f5f\0\u4f86\0\u437d"+
    "\0\u4fad\0\u4fd4\0\u4ffb\0\u5022\0\u5049\0\u5070\0\u5097\0\u50be"+
    "\0\u50e5\0\u510c\0\u5133\0\u0f8a\0\u515a\0\u5181\0\u51a8\0\u51cf"+
    "\0\47\0\u51f6\0\u521d\0\u5244\0\u526b\0\u5292\0\u52b9\0\u52e0"+
    "\0\u5307\0\u532e\0\u5355\0\u537c\0\u53a3\0\u53ca\0\u53f1\0\u5418"+
    "\0\u543f\0\u5466\0\u548d\0\u54b4\0\u54db\0\u5502\0\u5529\0\u5550"+
    "\0\u5577\0\u559e\0\u55c5\0\u55ec\0\u5613\0\u563a\0\u5661\0\u5688"+
    "\0\u56af\0\u56d6\0\u56fd\0\u5724\0\u574b\0\u5772\0\u5799\0\u57c0"+
    "\0\u57e7\0\u580e\0\u5835\0\u585c\0\u5883\0\u58aa\0\u58d1\0\u58f8"+
    "\0\u591f\0\u5946\0\u596d\0\u5994\0\u59bb\0\u59e2\0\u5a09\0\u5a30"+
    "\0\u5a57\0\u5a7e\0\u5aa5\0\47\0\u5acc\0\u5af3\0\u5b1a\0\u5b41"+
    "\0\u5b68\0\u5b8f\0\u5bb6\0\u5bdd\0\47\0\u5c04\0\u5c2b\0\u5c52"+
    "\0\u5c79\0\u5ca0\0\u5cc7\0\u5cee\0\u5d15\0\u5d3c\0\u5d63\0\u5d8a"+
    "\0\u5db1\0\u5dd8\0\u5dff\0\u5e26\0\u5e4d\0\u5e74\0\u5e9b\0\u5ec2"+
    "\0\u5ee9\0\u5f10\0\u5f37\0\u5f5e\0\u5f85\0\u5fac\0\u5fd3\0\47"+
    "\0\u5ffa\0\u6021\0\u6048\0\47\0\u3cf0\0\u606f\0\u6096\0\u60bd"+
    "\0\u60e4\0\u610b\0\u6132\0\u6159\0\u6180\0\u61a7\0\u61ce\0\u61f5"+
    "\0\u621c\0\u6243\0\47\0\u626a\0\u5466\0\u6291\0\u62b8\0\u62df"+
    "\0\u6306\0\u632d\0\u6354\0\u637b\0\u63a2\0\u63c9\0\u63f0\0\u6417"+
    "\0\u643e\0\u6465\0\u648c\0\u64b3\0\u64da\0\u6501\0\u6528\0\u654f"+
    "\0\u6576\0\u659d\0\u65c4\0\u65eb\0\u6612\0\u6639\0\u6660\0\u6687"+
    "\0\u66ae\0\u66d5\0\u66fc\0\u563a\0\u6723\0\u674a\0\u6771\0\u6798"+
    "\0\u67bf\0\u67e6\0\u5ffa\0\u680d\0\u6834\0\u685b\0\u6882\0\u68a9"+
    "\0\u68d0\0\u68f7\0\u691e\0\u6945\0\u696c\0\u6993\0\u1887\0\u69ba"+
    "\0\u69e1\0\u6a08\0\u6a2f\0\u6a56\0\u6a7d\0\u6aa4\0\u6acb\0\u6af2"+
    "\0\u6b19\0\u63f0\0\u6b40\0\u6b67\0\u6b8e\0\u6bb5\0\u6bdc\0\u6c03"+
    "\0\u6c2a\0\u6c51\0\u6c78\0\u6c9f\0\u6cc6\0\u6ced\0\u6d14\0\u6d3b"+
    "\0\u6d62\0\u6d89\0\u6db0\0\u6dd7\0\u6dfe\0\u6a2f\0\u6e25\0\u6e4c"+
    "\0\u6e73\0\u6e9a\0\u6ec1\0\u6ee8\0\u6f0f\0\u6f36\0\u67bf\0\u6f5d"+
    "\0\u6f84\0\u6fab\0\u6dd7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[795];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\2\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\2\1\33\1\0\1\33\1\41\52\0\1\42"+
    "\1\43\2\0\1\44\1\0\1\45\1\46\1\47\1\50"+
    "\1\0\1\51\1\52\3\0\1\53\3\0\1\54\21\0"+
    "\1\55\3\0\1\56\1\0\1\57\11\0\1\60\26\0"+
    "\1\61\2\0\1\62\1\63\4\0\1\64\6\0\1\65"+
    "\26\0\1\66\3\0\1\67\1\0\1\70\7\0\1\71"+
    "\1\0\1\72\26\0\1\73\1\74\4\0\1\75\1\76"+
    "\4\0\1\77\5\0\1\100\2\0\1\101\2\0\1\102"+
    "\16\0\1\103\2\0\1\104\2\0\1\105\3\0\1\106"+
    "\1\0\1\107\1\0\1\110\1\0\1\111\27\0\1\112"+
    "\1\113\4\0\1\114\1\115\36\0\1\116\3\0\1\117"+
    "\1\0\1\120\3\0\1\121\3\0\1\122\1\0\1\123"+
    "\2\0\1\124\23\0\1\125\1\0\1\126\1\127\1\130"+
    "\1\131\1\132\2\0\1\133\1\0\1\134\1\135\1\136"+
    "\1\137\1\0\1\140\26\0\1\141\2\0\1\142\1\143"+
    "\1\0\1\144\40\0\1\145\3\0\1\146\1\0\1\147"+
    "\7\0\1\150\1\0\1\151\26\0\1\152\11\0\1\153"+
    "\1\0\1\154\1\0\1\155\30\0\1\156\3\0\1\157"+
    "\1\0\1\160\11\0\1\161\26\0\1\162\3\0\1\163"+
    "\1\0\1\164\11\0\1\165\2\0\1\166\24\0\1\167"+
    "\6\0\1\170\2\0\1\171\34\0\1\172\2\0\1\173"+
    "\1\0\1\174\41\0\1\175\1\176\6\0\1\177\1\200"+
    "\1\0\1\201\1\0\1\202\2\0\1\203\3\0\1\204"+
    "\2\0\1\205\16\0\1\206\3\0\1\207\1\0\1\210"+
    "\3\0\1\211\1\0\1\212\1\0\1\213\1\0\1\214"+
    "\2\0\1\215\23\0\1\216\3\0\1\217\1\0\1\220"+
    "\3\0\1\221\3\0\1\222\1\0\1\223\32\0\1\224"+
    "\13\0\1\225\26\0\1\226\3\0\1\227\1\0\1\230"+
    "\3\0\1\231\1\0\1\232\1\0\1\233\1\0\1\234"+
    "\44\0\1\235\1\0\1\236\26\0\1\237\5\0\1\240"+
    "\74\0\1\241\47\0\1\242\47\0\1\243\16\0\1\244"+
    "\1\245\1\246\42\0\1\247\44\0\1\250\2\0\1\251"+
    "\4\0\1\252\52\0\1\253\26\0\33\254\1\255\7\254"+
    "\2\0\2\254\2\0\1\256\17\0\1\257\30\0\1\260"+
    "\1\0\1\52\1\0\1\261\11\0\1\262\30\0\1\263"+
    "\64\0\1\264\30\0\1\265\46\0\1\266\44\0\1\267"+
    "\4\0\1\270\1\271\2\0\1\272\12\0\1\273\23\0"+
    "\1\274\47\0\1\275\26\0\1\276\25\0\1\270\10\0"+
    "\1\277\25\0\1\300\3\0\1\301\1\0\1\302\3\0"+
    "\1\303\5\0\1\304\26\0\1\305\1\306\51\0\1\307"+
    "\13\0\1\310\37\0\1\311\4\0\1\312\31\0\1\313"+
    "\1\314\4\0\1\247\20\0\1\315\16\0\1\316\11\0"+
    "\1\317\1\0\1\120\34\0\1\320\4\0\1\321\1\322"+
    "\3\0\1\323\1\324\32\0\1\325\10\0\1\217\36\0"+
    "\1\320\6\0\1\326\1\327\1\0\1\330\34\0\1\331"+
    "\7\0\1\314\56\0\1\332\26\0\1\333\17\0\1\334"+
    "\46\0\1\335\30\0\1\336\64\0\1\314\51\0\1\337"+
    "\25\0\1\340\44\0\1\341\5\0\1\342\1\0\1\343"+
    "\1\344\1\0\1\345\1\346\30\0\1\347\17\0\1\350"+
    "\30\0\1\351\50\0\1\352\42\0\1\353\15\0\1\354"+
    "\32\0\1\247\10\0\1\314\33\0\1\355\7\0\1\155"+
    "\1\0\1\356\1\0\1\357\1\360\1\361\40\0\1\362"+
    "\20\0\1\363\25\0\1\364\42\0\1\365\52\0\1\366"+
    "\3\0\1\367\50\0\1\370\4\0\1\314\23\0\1\371"+
    "\7\0\1\372\45\0\1\247\37\0\1\373\3\0\1\374"+
    "\1\0\1\375\7\0\1\376\1\0\1\377\32\0\1\u0100"+
    "\5\0\1\u0101\7\0\1\247\25\0\1\360\7\0\1\u0102"+
    "\57\0\1\u0103\25\0\1\u0104\1\247\3\0\1\120\2\0"+
    "\1\247\11\0\1\320\23\0\1\u0105\3\0\1\u0106\1\0"+
    "\1\u0107\3\0\1\u0108\3\0\1\u0109\1\0\1\u010a\26\0"+
    "\1\u010b\3\0\1\u010c\1\0\1\u010d\3\0\1\u010e\3\0"+
    "\1\217\1\0\1\u010f\27\0\1\u0110\1\320\1\0\1\u0111"+
    "\1\u0112\3\0\1\u0113\2\0\1\u0114\13\0\1\u0115\21\0"+
    "\1\u0116\44\0\1\u0117\1\320\21\0\1\u0118\26\0\1\u0119"+
    "\46\0\1\u011a\1\0\1\u011b\3\0\1\u011c\1\0\1\u011d"+
    "\3\0\1\u011e\32\0\1\u011f\1\0\1\u0120\44\0\1\u0121"+
    "\1\0\1\u0122\41\0\1\u0123\56\0\1\320\2\0\1\120"+
    "\1\0\1\346\6\0\1\u0124\31\0\1\247\3\0\1\u0125"+
    "\32\0\1\u0126\3\0\1\u0127\1\0\1\u0128\11\0\1\u0129"+
    "\2\0\1\u012a\24\0\1\155\1\333\7\0\1\u012b\36\0"+
    "\1\u012c\45\0\1\u012d\45\0\1\330\21\0\1\u012e\25\0"+
    "\1\100\5\0\1\u012f\40\0\1\u0130\45\0\1\343\6\0"+
    "\2\u012b\40\0\1\u0131\3\0\1\120\13\0\1\335\1\320"+
    "\43\0\1\u0132\26\0\1\u0133\50\0\1\247\52\0\1\u0134"+
    "\1\351\7\0\1\335\3\0\1\247\23\0\1\u0135\1\330"+
    "\1\320\4\0\1\247\41\0\1\247\5\0\1\u0136\10\0"+
    "\1\u0137\1\u0138\34\0\1\u0139\43\0\1\u013a\1\0\1\u012b"+
    "\7\0\1\315\2\0\1\u013b\24\0\1\u013c\1\0\1\247"+
    "\1\0\1\217\43\0\1\u013d\6\0\1\u013e\45\0\1\u013f"+
    "\2\0\1\u0140\44\0\1\u0141\45\0\1\u0142\4\0\1\u0143"+
    "\52\0\1\u0144\32\0\1\u0145\13\0\1\u0146\32\0\1\u0147"+
    "\6\0\1\155\7\0\1\314\24\0\1\u0148\51\0\1\u0149"+
    "\24\0\1\u014a\20\0\1\u014b\51\0\1\u014c\40\0\1\u014d"+
    "\30\0\1\u014e\24\0\1\272\41\0\1\u014f\7\0\1\u0150"+
    "\54\0\1\u0151\53\0\1\u0152\25\0\1\u0153\43\0\1\270"+
    "\17\0\1\351\1\314\24\0\1\u0154\1\u0155\1\u0156\1\0"+
    "\1\u0157\1\u0158\2\0\1\u0159\3\0\1\u015a\5\0\1\u015b"+
    "\2\0\1\u015c\22\0\1\330\1\u015d\4\0\1\247\2\0"+
    "\1\343\40\0\1\u015e\1\0\1\u015f\11\0\1\u0160\32\0"+
    "\1\u0161\11\0\1\u0162\1\0\1\u0146\30\0\1\u0163\3\0"+
    "\1\371\1\0\1\u0131\1\0\1\u0164\10\0\1\320\23\0"+
    "\1\355\1\0\1\u0165\7\0\1\u0166\3\0\1\u0167\5\0"+
    "\1\314\24\0\1\335\7\0\1\u0168\36\0\1\320\56\0"+
    "\1\323\15\0\1\315\22\0\1\u0169\1\0\1\u016a\11\0"+
    "\1\u016b\27\0\1\314\46\0\1\360\45\0\1\u016c\64\0"+
    "\1\u016d\32\0\1\272\2\0\1\u016e\4\0\1\u016f\1\0"+
    "\1\u0170\1\u0171\40\0\1\247\4\0\1\u0172\33\0\1\u0173"+
    "\2\0\1\u0174\5\0\1\u0175\12\0\1\u0176\2\0\1\u0177"+
    "\22\0\1\u0178\1\0\1\u0179\11\0\1\u017a\32\0\1\u017b"+
    "\13\0\1\u017c\30\0\1\u017d\56\0\1\u017e\3\0\1\u017f"+
    "\37\0\1\u0180\60\0\1\314\41\0\1\u0181\46\0\1\u0182"+
    "\66\0\1\34\47\0\1\u0183\7\0\43\243\2\0\2\243"+
    "\17\0\1\u0184\42\0\1\u0185\55\0\1\u0186\34\0\1\u0187"+
    "\60\0\1\u0188\42\0\1\355\30\0\2\254\1\u0189\40\254"+
    "\2\0\4\254\1\u0189\1\254\1\u018a\3\254\1\u018b\5\254"+
    "\1\u018c\24\254\2\0\2\254\21\0\1\315\3\0\1\u018d"+
    "\42\0\1\u018e\35\0\1\u018f\50\0\1\u0190\46\0\1\u012b"+
    "\5\0\1\u0191\33\0\1\u0192\61\0\1\u0193\34\0\1\u0194"+
    "\50\0\1\u0195\52\0\1\u0196\53\0\1\314\31\0\1\u0197"+
    "\75\0\1\u0198\17\0\1\u0199\1\0\1\u019a\73\0\1\u019b"+
    "\25\0\1\u019c\52\0\1\335\33\0\1\u019d\1\u019e\45\0"+
    "\1\u019f\4\0\1\u01a0\1\0\1\u01a1\4\0\1\u01a2\5\0"+
    "\1\170\33\0\1\u019e\1\0\1\u01a3\40\0\1\u0177\13\0"+
    "\1\u01a4\36\0\1\u01a1\5\0\1\u01a5\35\0\1\u01a6\43\0"+
    "\1\u01a7\45\0\1\u01a8\12\0\1\u01a9\32\0\1\u01aa\1\314"+
    "\57\0\1\314\43\0\1\314\12\0\1\320\30\0\1\320"+
    "\54\0\1\u01ab\44\0\1\322\42\0\1\320\2\0\1\331"+
    "\53\0\1\314\54\0\1\247\30\0\1\u01ac\25\0\1\u01ad"+
    "\24\0\1\335\45\0\1\320\43\0\1\u0157\50\0\1\u0133"+
    "\43\0\1\u01ae\46\0\1\u01af\47\0\1\314\43\0\1\u01b0"+
    "\3\0\1\55\22\0\1\u01b1\22\0\1\u01b2\43\0\1\u01b3"+
    "\52\0\1\u01b4\43\0\1\u01b5\53\0\1\314\41\0\1\u01b6"+
    "\50\0\1\247\6\0\1\314\55\0\1\u01b7\32\0\1\312"+
    "\4\0\1\u01b8\43\0\1\u018e\61\0\1\314\36\0\1\155"+
    "\43\0\1\u01b9\37\0\1\325\47\0\1\314\45\0\1\u01ba"+
    "\61\0\1\u01bb\36\0\1\u0103\43\0\1\u01bc\47\0\1\u01bd"+
    "\3\0\1\u01be\40\0\1\u01bf\4\0\1\u01c0\2\0\1\u01c1"+
    "\42\0\1\u01c2\42\0\1\u01c3\64\0\1\u01c4\30\0\1\u01c5"+
    "\70\0\1\u01c6\40\0\1\155\45\0\1\u01c7\34\0\1\u01c8"+
    "\7\0\1\u0157\35\0\1\u01c9\7\0\1\u01ca\1\247\65\0"+
    "\1\331\17\0\1\u01cb\75\0\1\u012b\47\0\1\u01cc\23\0"+
    "\1\u01cd\41\0\1\u01ce\64\0\1\247\2\0\1\247\25\0"+
    "\1\330\1\266\44\0\1\u0114\47\0\1\u01cf\3\0\1\u01cf"+
    "\45\0\1\u01d0\1\0\1\u01d1\7\0\1\u01d2\31\0\1\124"+
    "\5\0\1\u01d3\52\0\1\314\1\331\3\0\1\u01d4\45\0"+
    "\1\u0190\27\0\1\u01d5\47\0\1\315\11\0\1\314\33\0"+
    "\1\u01d6\5\0\1\u01d7\41\0\1\u012b\1\247\6\0\1\u01d8"+
    "\1\u012b\5\0\1\u01d9\30\0\1\247\4\0\1\320\40\0"+
    "\1\u0103\15\0\1\320\47\0\1\u01da\27\0\1\u0103\2\0"+
    "\1\120\56\0\1\320\36\0\1\u01db\46\0\1\u01dc\47\0"+
    "\1\u01dd\11\0\1\320\2\0\1\320\26\0\1\u01de\44\0"+
    "\1\u01cf\1\330\2\0\1\330\7\0\1\u0114\33\0\2\320"+
    "\11\0\1\u0114\36\0\1\u01df\1\0\1\u01e0\7\0\1\u01e1"+
    "\36\0\1\217\46\0\1\u01e2\10\0\1\331\33\0\1\u0147"+
    "\6\0\1\155\42\0\1\315\53\0\1\u0114\46\0\1\u01c4"+
    "\51\0\1\u0103\2\0\1\u0103\26\0\1\272\60\0\1\314"+
    "\2\0\1\314\31\0\1\u012a\45\0\1\u012a\1\u01e3\7\0"+
    "\1\u01e4\41\0\1\u01e5\51\0\1\u01e4\4\0\1\u012a\14\0"+
    "\1\u01ad\46\0\1\u01ad\17\0\1\u01e6\43\0\1\u01e7\51\0"+
    "\1\314\64\0\1\u01e8\6\0\1\u01e9\17\0\1\335\46\0"+
    "\1\u0103\5\0\1\247\40\0\1\320\5\0\1\320\2\0"+
    "\1\u01ea\1\u01eb\14\0\1\315\20\0\1\u01c3\56\0\1\u01ec"+
    "\37\0\1\217\45\0\1\247\1\0\1\320\45\0\1\332"+
    "\43\0\1\u01ed\47\0\1\u01eb\51\0\1\u01ee\44\0\1\u01ef"+
    "\50\0\1\323\46\0\1\u01f0\46\0\1\267\46\0\1\u01f1"+
    "\43\0\1\u0196\51\0\1\u0114\7\0\1\155\43\0\1\u01f2"+
    "\50\0\1\320\55\0\1\u01f3\55\0\1\u01f4\17\0\1\u01f5"+
    "\50\0\1\u01f6\43\0\1\u01f7\46\0\1\u01f8\51\0\1\u01f9"+
    "\52\0\1\u01fa\46\0\1\u01fb\66\0\1\u01fc\24\0\1\u01fd"+
    "\52\0\1\u01fe\36\0\1\u01ff\2\0\1\u0131\4\0\1\320"+
    "\36\0\1\247\1\0\1\u0200\2\0\1\320\50\0\1\u0201"+
    "\36\0\1\u0103\45\0\1\u0202\17\0\1\u0203\34\0\1\u0204"+
    "\54\0\1\314\3\0\1\u0205\26\0\1\u0206\5\0\1\u0207"+
    "\7\0\1\u0157\50\0\1\u0208\30\0\1\331\1\0\1\320"+
    "\42\0\1\u01cf\3\0\1\u0209\2\0\1\247\46\0\1\76"+
    "\37\0\1\u020a\15\0\1\346\1\u018e\33\0\1\330\2\0"+
    "\1\247\1\0\1\247\41\0\1\272\73\0\1\u020b\16\0"+
    "\1\u020c\6\0\1\217\41\0\1\u020d\44\0\1\360\2\0"+
    "\1\247\43\0\1\120\20\0\1\u01b7\33\0\1\u020e\50\0"+
    "\1\247\36\0\1\330\56\0\1\u01f2\4\0\1\u020f\42\0"+
    "\1\u01c3\35\0\1\u0210\10\0\1\u0211\36\0\1\u0212\1\0"+
    "\1\314\57\0\1\314\45\0\1\331\52\0\1\u0213\30\0"+
    "\1\247\11\0\1\247\54\0\1\u01ba\40\0\1\343\42\0"+
    "\1\u0214\42\0\1\310\46\0\1\u0215\46\0\1\u0216\57\0"+
    "\1\215\11\0\1\u012b\26\0\1\247\1\0\1\247\46\0"+
    "\1\u0157\40\0\1\u0217\45\0\1\u0218\16\0\1\u0219\1\u021a"+
    "\25\0\1\120\10\0\1\u021b\7\0\1\u01b7\46\0\1\u021c"+
    "\40\0\1\u021d\46\0\1\u021e\67\0\1\34\11\0\1\323"+
    "\52\0\1\u016c\54\0\1\u01f3\43\0\1\u021f\47\0\1\u0220"+
    "\34\0\2\254\1\u0189\7\254\1\u0221\30\254\2\0\4\254"+
    "\1\u0189\2\254\1\u0222\35\254\2\0\4\254\1\u0189\24\254"+
    "\1\u0221\13\254\2\0\4\254\1\u0189\17\254\1\u0223\20\254"+
    "\2\0\2\254\33\0\1\u0224\21\0\1\u0225\47\0\1\277"+
    "\45\0\1\u01f2\43\0\1\u0226\65\0\1\u0227\30\0\1\215"+
    "\56\0\1\u01ce\54\0\1\222\31\0\1\u0228\45\0\1\u0229"+
    "\47\0\1\u022a\45\0\1\u022b\44\0\1\u022c\3\0\1\u022d"+
    "\13\0\1\u022e\46\0\1\u022f\40\0\1\u0230\40\0\1\u019e"+
    "\44\0\1\u022b\4\0\1\u022a\55\0\1\u0231\52\0\1\u0232"+
    "\27\0\1\u0233\45\0\1\u0234\71\0\1\u01b0\2\0\1\u0177"+
    "\30\0\1\u0235\36\0\1\314\4\0\1\247\67\0\1\u0236"+
    "\22\0\1\u0237\44\0\1\u0238\46\0\1\u0199\50\0\1\u0239"+
    "\47\0\1\355\72\0\1\u023a\20\0\1\320\43\0\1\u023b"+
    "\51\0\1\155\45\0\1\u0185\54\0\1\u01c3\42\0\1\312"+
    "\46\0\1\76\44\0\1\u023c\50\0\1\u023d\51\0\1\u01fc"+
    "\46\0\1\u023e\37\0\1\u023f\61\0\1\u0240\47\0\1\u0241"+
    "\36\0\1\u01c3\43\0\1\343\50\0\1\u0242\51\0\1\u0243"+
    "\57\0\1\247\44\0\1\u0244\41\0\1\314\55\0\1\u0103"+
    "\31\0\1\u0245\45\0\1\u0246\64\0\1\320\27\0\1\u016f"+
    "\3\0\1\355\51\0\1\315\7\0\1\315\34\0\1\u01cb"+
    "\45\0\1\u0247\51\0\1\u0103\51\0\1\320\35\0\1\u01c8"+
    "\46\0\1\u01cf\51\0\1\120\44\0\1\320\14\0\1\247"+
    "\30\0\1\u0248\46\0\1\u0118\62\0\1\u01c4\35\0\1\u0249"+
    "\45\0\1\u022a\1\u024a\16\0\1\u024b\23\0\1\330\47\0"+
    "\1\u024c\46\0\1\124\61\0\1\u024d\35\0\1\u024e\47\0"+
    "\1\u012a\45\0\1\u012a\55\0\1\u024f\50\0\1\u0250\40\0"+
    "\1\u0251\41\0\1\u0252\45\0\1\u023c\75\0\1\332\17\0"+
    "\1\u0253\17\0\1\u0254\46\0\1\u0255\36\0\1\u0256\41\0"+
    "\1\u0257\46\0\1\u0258\55\0\1\u0259\56\0\1\u025a\46\0"+
    "\1\u0162\40\0\1\u025b\40\0\1\u01be\44\0\1\u025c\46\0"+
    "\1\u0196\47\0\1\335\46\0\1\u025d\41\0\1\u025e\52\0"+
    "\1\u025f\60\0\1\u0260\45\0\1\315\40\0\1\u0261\50\0"+
    "\1\u0196\36\0\1\247\46\0\1\320\57\0\1\u0262\43\0"+
    "\1\u0263\46\0\1\u0264\57\0\1\u0265\30\0\1\u0103\42\0"+
    "\43\u0266\2\0\2\u0266\6\0\1\222\43\0\1\120\11\0"+
    "\1\314\55\0\1\272\34\0\1\u0267\56\0\1\u023c\44\0"+
    "\1\u0268\32\0\1\u022a\73\0\1\315\20\0\1\u0269\51\0"+
    "\1\u026a\65\0\1\u024b\23\0\1\u026b\5\0\1\u026c\40\0"+
    "\1\377\5\0\1\u026d\11\0\1\u026e\30\0\1\u026f\50\0"+
    "\1\u01f3\46\0\1\351\42\0\1\76\52\0\1\u0270\52\0"+
    "\1\u0196\34\0\2\254\1\u0189\17\254\1\u0271\20\254\2\0"+
    "\4\254\1\u0189\1\u0272\37\254\2\0\2\254\27\0\1\u0273"+
    "\30\0\1\u01ce\55\0\1\u0274\34\0\1\u0275\62\0\1\u0196"+
    "\32\0\1\u024a\16\0\1\u024b\33\0\1\u0276\66\0\1\u0277"+
    "\17\0\1\u0278\65\0\1\u0279\50\0\1\u027a\27\0\1\u0136"+
    "\47\0\1\u0186\50\0\1\u027b\14\0\1\u024b\32\0\1\u027c"+
    "\43\0\1\u027d\54\0\1\u027e\35\0\1\310\55\0\1\u027f"+
    "\44\0\1\222\52\0\1\351\34\0\1\u0280\55\0\1\u0281"+
    "\47\0\1\u0282\44\0\1\u0283\65\0\1\u0284\23\0\1\u01ba"+
    "\46\0\1\u0285\64\0\1\u0249\50\0\1\u01ce\25\0\1\355"+
    "\54\0\1\u022a\43\0\1\u0286\73\0\1\u0287\37\0\1\320"+
    "\30\0\1\u01d4\46\0\1\u0288\51\0\1\u0289\43\0\1\u028a"+
    "\51\0\1\u028b\41\0\1\247\1\0\1\u01d4\61\0\1\u01c4"+
    "\47\0\1\u01c8\56\0\1\u028c\26\0\1\u028d\54\0\1\u028e"+
    "\34\0\1\u028f\53\0\1\u0290\66\0\1\u0291\25\0\1\u0292"+
    "\52\0\1\u0293\32\0\1\u0294\17\0\1\u0203\30\0\1\u0295"+
    "\50\0\1\u0144\52\0\1\u0296\42\0\1\u0297\46\0\1\u01ce"+
    "\102\0\1\u0298\13\0\1\u0299\42\0\1\u029a\43\0\2\u0266"+
    "\1\u029b\40\u0266\2\0\2\u0266\6\0\1\u029c\52\0\1\272"+
    "\45\0\1\u01f3\51\0\1\u029d\43\0\1\u012b\46\0\1\u029e"+
    "\67\0\1\360\20\0\1\u029f\47\0\1\u022a\1\u024a\43\0"+
    "\1\u0136\43\0\2\254\1\u0189\15\254\1\u02a0\22\254\2\0"+
    "\4\254\1\u0189\21\254\1\u02a1\16\254\2\0\2\254\14\0"+
    "\1\u02a2\56\0\1\u02a3\36\0\1\u02a4\32\0\43\254\2\0"+
    "\2\254\6\0\1\u02a5\56\0\1\u02a6\33\0\1\u02a7\50\0"+
    "\1\u01ce\47\0\1\u01b0\52\0\1\u01ce\50\0\1\u02a8\32\0"+
    "\43\u02a9\2\0\2\u02a9\22\0\1\u02a8\35\0\1\u02a8\45\0"+
    "\1\u02aa\44\0\1\u028d\44\0\1\u02ab\50\0\1\u02ac\43\0"+
    "\1\u02ad\46\0\1\u02ae\1\u02af\1\0\1\u02b0\3\0\1\u02b1"+
    "\7\0\1\u02b2\4\0\1\u02b3\33\0\1\u028d\50\0\1\u02b4"+
    "\47\0\1\u01c3\35\0\1\u02b5\1\0\1\u02b6\44\0\1\u02b7"+
    "\43\0\1\u02b8\76\0\1\u02b9\23\0\1\u025b\60\0\1\u02ba"+
    "\32\0\1\u02bb\72\0\1\u02bc\33\0\1\u012b\34\0\1\u0196"+
    "\47\0\1\u02bd\52\0\1\u019f\57\0\1\u02be\25\0\1\u02bf"+
    "\62\0\1\u02c0\30\0\2\u0266\1\u029b\1\u02c1\37\u0266\2\0"+
    "\2\u0266\16\0\1\u02c2\47\0\1\u02c3\40\0\1\331\41\0"+
    "\1\331\42\0\2\254\1\u0189\21\254\1\u02c4\16\254\2\0"+
    "\4\254\1\u0189\30\254\1\u02c5\7\254\2\0\2\254\22\0"+
    "\1\u02c6\31\0\1\u02ac\41\0\43\u02c7\2\0\2\u02c7\3\0"+
    "\1\u02c8\70\0\1\u02c9\27\0\1\u02ca\40\0\22\u02a9\1\u02cb"+
    "\20\u02a9\2\0\2\u02a9\4\0\1\u02cc\50\0\1\u02cd\50\0"+
    "\1\u02b2\43\0\1\u02ce\5\0\1\u02cf\43\0\1\u02d0\44\0"+
    "\1\u02d1\1\0\1\u02d2\41\0\1\u0177\53\0\1\u02d3\11\0"+
    "\1\u02d4\32\0\1\u02d5\51\0\1\u028d\40\0\1\u02d6\57\0"+
    "\1\u019f\43\0\1\u02d7\44\0\1\u02d8\66\0\1\u0249\25\0"+
    "\1\u02d9\54\0\1\u02da\44\0\1\155\61\0\1\u02db\21\0"+
    "\2\u0266\1\u029b\6\u0266\1\u02dc\31\u0266\2\0\2\u0266\27\0"+
    "\1\u0284\2\0\1\u02bc\36\0\1\u02dd\24\0\2\254\1\u0189"+
    "\2\254\1\u0221\35\254\2\0\4\254\1\u02de\40\254\2\0"+
    "\2\254\17\0\1\u01ce\27\0\3\u02c7\1\u02df\37\u02c7\2\0"+
    "\2\u02c7\33\0\1\u02e0\13\0\43\u02e1\2\0\2\u02e1\14\0"+
    "\1\u02e2\32\0\14\u02a9\1\u02e3\5\u02a9\1\u02cb\20\u02a9\2\0"+
    "\2\u02a9\10\0\1\u02e4\71\0\1\u02e5\27\0\1\u02e6\54\0"+
    "\1\310\50\0\1\u02e7\54\0\1\u01b1\42\0\1\310\52\0"+
    "\1\u0177\34\0\1\u02e8\40\0\1\u02e9\60\0\1\u028d\36\0"+
    "\1\u02ea\54\0\1\u02eb\36\0\1\u0284\44\0\1\u02ec\36\0"+
    "\43\u02ed\2\0\2\u02ed\14\0\1\u02ee\32\0\2\254\1\u0189"+
    "\7\254\1\u02ef\30\254\2\0\2\254\3\u02c7\1\u02df\16\u02c7"+
    "\1\u02f0\20\u02c7\2\0\2\u02c7\10\0\1\u02f1\36\0\23\u02e1"+
    "\1\u02f2\17\u02e1\2\0\2\u02e1\43\u02f3\2\0\2\u02f3\22\0"+
    "\1\u02f4\46\0\1\u02f1\32\0\1\u0177\45\0\1\u02f5\55\0"+
    "\1\310\44\0\1\u02cd\42\0\1\u02f6\43\0\1\u02f7\46\0"+
    "\1\u02f8\43\0\23\u02ed\1\u02f9\17\u02ed\2\0\2\u02ed\6\0"+
    "\1\u019f\40\0\3\u02c7\1\u02df\10\u02c7\1\u02fa\26\u02c7\2\0"+
    "\2\u02c7\27\0\1\u02ac\17\0\20\u02e1\1\u02fb\2\u02e1\1\u02f2"+
    "\17\u02e1\2\0\2\u02e1\4\u02f3\1\u02fc\36\u02f3\2\0\2\u02f3"+
    "\3\0\1\u02fd\47\0\1\310\53\0\1\310\41\0\1\u02fe"+
    "\66\0\1\u02ff\22\0\20\u02ed\1\u0300\2\u02ed\1\u02f9\17\u02ed"+
    "\2\0\2\u02ed\4\u02e1\1\u0301\16\u02e1\1\u02f2\17\u02e1\2\0"+
    "\2\u02e1\4\u02f3\1\u02fc\1\u0302\35\u02f3\2\0\2\u02f3\33\0"+
    "\1\u0303\27\0\1\u0304\74\0\1\u0305\4\0\4\u02ed\1\u0306"+
    "\16\u02ed\1\u02f9\17\u02ed\2\0\2\u02ed\23\u02e1\1\u02f2\7\u02e1"+
    "\1\u0307\7\u02e1\2\0\2\u02e1\2\u02f3\1\u0308\1\u02f3\1\u02fc"+
    "\36\u02f3\2\0\2\u02f3\4\0\1\u0309\44\0\1\u030a\67\0"+
    "\1\u030b\23\0\43\u030c\2\0\2\u030c\2\u02e1\1\u030d\20\u02e1"+
    "\1\u02f2\17\u02e1\2\0\2\u02e1\3\u02f3\1\u030e\1\u02fc\36\u02f3"+
    "\2\0\2\u02f3\22\0\1\u019f\40\0\1\u030f\52\0\1\u0310"+
    "\26\0\2\u030c\1\u0311\40\u030c\2\0\2\u030c\16\u02e1\1\u0312"+
    "\4\u02e1\1\u02f2\17\u02e1\2\0\2\u02e1\25\0\1\u02a8\31\0"+
    "\1\u0313\36\0\2\u030c\1\u0311\7\u030c\1\u0314\30\u030c\2\0"+
    "\2\u030c\12\u02e1\1\u0315\10\u02e1\1\u02f2\17\u02e1\2\0\2\u02e1"+
    "\16\0\1\330\30\0\2\u030c\1\u0311\30\u030c\1\u0316\7\u030c"+
    "\2\0\2\u030c\22\u02e1\1\u0317\1\u02f2\17\u02e1\2\0\2\u02e1"+
    "\2\u030c\1\u0311\10\u030c\1\u0318\27\u030c\2\0\4\u030c\1\u0311"+
    "\3\u030c\1\u0319\34\u030c\2\0\4\u030c\1\u0311\13\u030c\1\u031a"+
    "\24\u030c\2\0\4\u030c\1\u0311\13\u030c\1\u031b\24\u030c\2\0"+
    "\2\u030c";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28626];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\27\1\2\11\3\1\2\11\2\1\2\0"+
    "\1\1\3\0\1\11\12\0\1\1\1\0\1\1\22\0"+
    "\2\1\1\0\1\1\25\0\1\1\17\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\3\0\1\1\2\0\1\1"+
    "\3\0\1\1\2\0\1\1\5\0\1\11\5\0\1\1"+
    "\17\0\1\1\1\0\1\11\1\0\1\11\22\0\1\11"+
    "\6\0\1\1\4\0\1\1\1\0\1\11\3\0\1\11"+
    "\2\0\1\1\1\11\1\1\1\11\1\0\1\1\37\0"+
    "\1\1\16\0\1\11\10\0\1\1\4\0\1\1\1\0"+
    "\1\1\4\0\1\1\24\0\1\1\2\0\1\1\30\0"+
    "\1\1\6\0\1\1\1\0\1\1\3\0\1\1\6\0"+
    "\1\1\5\0\1\1\11\0\1\1\20\0\1\1\27\0"+
    "\1\11\3\0\1\1\2\0\3\11\2\0\1\1\4\0"+
    "\1\1\3\0\1\1\1\0\1\11\5\0\1\1\1\0"+
    "\1\1\15\0\1\11\12\0\1\11\11\0\1\1\15\0"+
    "\1\1\4\0\1\1\2\0\1\11\3\0\1\1\1\11"+
    "\12\0\2\1\14\0\1\1\4\0\1\1\11\0\1\1"+
    "\5\0\1\1\3\0\1\1\4\0\1\11\5\0\1\1"+
    "\7\0\1\1\13\0\1\1\4\0\1\11\1\0\1\1"+
    "\1\0\1\1\4\0\1\1\24\0\1\1\34\0\1\11"+
    "\10\0\1\11\21\0\1\1\10\0\1\11\3\0\1\11"+
    "\1\1\15\0\1\11\1\0\1\1\36\0\1\1\6\0"+
    "\1\1\13\0\1\1\12\0\1\1\23\0\1\1\10\0"+
    "\1\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[795];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 38: break;
          case 2: 
            { lexeme=yytext(); return NUMERO;
            }
          case 39: break;
          case 3: 
            { lexeme=yytext(); return ART_INDEF;
            }
          case 40: break;
          case 4: 
            { lexeme=yytext(); return ADJ_POSESIV;
            }
          case 41: break;
          case 5: 
            { /* ignore */
            }
          case 42: break;
          case 6: 
            { lexeme=yytext(); return SIG_PUNT;
            }
          case 43: break;
          case 7: 
            { return resta;
            }
          case 44: break;
          case 8: 
            { return division;
            }
          case 45: break;
          case 9: 
            { return multiplicacion;
            }
          case 46: break;
          case 10: 
            { return suma;
            }
          case 47: break;
          case 11: 
            { lexeme=yytext(); return PREP_LUG;
            }
          case 48: break;
          case 12: 
            { lexeme=yytext(); return CONJ_SUBORCAUS;
            }
          case 49: break;
          case 13: 
            { lexeme=yytext(); return AUX_PRESEN;
            }
          case 50: break;
          case 14: 
            { lexeme=yytext(); return PREP_MOV;
            }
          case 51: break;
          case 15: 
            { lexeme=yytext(); return ADJ_PROPERSO;
            }
          case 52: break;
          case 16: 
            { lexeme=yytext(); return PREP_MOD;
            }
          case 53: break;
          case 17: 
            { lexeme=yytext(); return CONJ_COORDISYU;
            }
          case 54: break;
          case 18: 
            { lexeme=yytext(); return VERBO_PRESENT;
            }
          case 55: break;
          case 19: 
            { lexeme=yytext(); return CONJ_COORCOPU;
            }
          case 56: break;
          case 20: 
            { lexeme=yytext(); return VERBO_PASADOSIMP;
            }
          case 57: break;
          case 21: 
            { lexeme=yytext(); return ADJ_CALIFI;
            }
          case 58: break;
          case 22: 
            { lexeme=yytext(); return ART_DEFI;
            }
          case 59: break;
          case 23: 
            { lexeme=yytext(); return ADJ_NUMCARDIN;
            }
          case 60: break;
          case 24: 
            { lexeme=yytext(); return SUS_COMUN;
            }
          case 61: break;
          case 25: 
            { lexeme=yytext(); return ADJ_PROPOSESIV;
            }
          case 62: break;
          case 26: 
            { lexeme=yytext(); return VERBO_PASADOPARTICI;
            }
          case 63: break;
          case 27: 
            { lexeme=yytext(); return CONJ_COORADVERV;
            }
          case 64: break;
          case 28: 
            { lexeme=yytext(); return CONJ_CONJSUBOCOMPARA;
            }
          case 65: break;
          case 29: 
            { lexeme=yytext(); return ADJ_DEMOS;
            }
          case 66: break;
          case 30: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONSEC;
            }
          case 67: break;
          case 31: 
            { lexeme=yytext(); return ADJ_PROINTERR;
            }
          case 68: break;
          case 32: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONCES;
            }
          case 69: break;
          case 33: 
            { lexeme=yytext(); return SUS_ABSTRACT;
            }
          case 70: break;
          case 34: 
            { lexeme=yytext(); return SUS_PROPIO;
            }
          case 71: break;
          case 35: 
            { lexeme=yytext(); return ADJ_NUMORD;
            }
          case 72: break;
          case 36: 
            { lexeme=yytext(); return ADJ_PROREFLEX;
            }
          case 73: break;
          case 37: 
            { lexeme=yytext(); return CONJ_SUBORDISYU;
            }
          case 74: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
