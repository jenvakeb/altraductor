/* The following code was generated by JFlex 1.6.1 */

package altraductor;
import static altraductor.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ShellPhish/Documents/PROJECTS/altraductor/src/altraductor/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\43\1\44\1\44\1\43\22\0\1\33\1\35\6\0"+
    "\1\35\1\35\1\41\1\46\1\35\1\37\1\36\1\40\12\1\1\35"+
    "\1\35\3\0\1\34\1\0\1\2\1\23\1\7\1\11\1\6\1\27"+
    "\1\24\1\5\1\10\1\30\1\21\1\16\1\17\1\3\1\22\1\15"+
    "\1\0\1\14\1\12\1\4\1\20\1\32\1\13\1\26\1\25\1\31"+
    "\1\35\1\0\1\35\35\0\1\35\1\42\1\35\7\0\1\44\u1fa2\0"+
    "\1\44\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\5\1\1\4\20\1\1\5"+
    "\2\6\1\7\1\10\1\11\1\12\1\3\1\13\3\0"+
    "\1\14\3\0\1\15\13\0\1\16\1\0\1\17\23\0"+
    "\1\20\1\17\1\0\1\15\26\0\1\17\21\0\1\17"+
    "\2\0\1\4\1\0\1\17\1\16\3\0\1\20\2\0"+
    "\1\21\3\0\1\20\2\0\1\22\5\0\1\20\5\0"+
    "\1\22\20\0\1\5\1\0\1\23\1\0\1\24\26\0"+
    "\1\25\2\0\1\26\5\0\1\27\4\0\1\30\1\0"+
    "\1\30\3\0\1\31\3\0\1\17\1\22\1\24\1\32"+
    "\1\0\1\17\47\0\1\32\16\0\1\33\4\0\1\34"+
    "\11\0\1\17\4\0\1\22\1\0\1\22\4\0\1\30"+
    "\24\0\1\24\3\0\1\22\31\0\1\24\15\0\1\30"+
    "\6\0\1\4\1\0\1\16\4\0\1\22\6\0\1\24"+
    "\6\0\1\35\12\0\1\17\22\0\1\20\37\0\1\13"+
    "\3\0\1\30\3\0\1\36\1\37\1\40\2\0\1\17"+
    "\4\0\1\31\4\0\1\22\1\0\1\41\11\0\1\42"+
    "\1\0\1\22\26\0\1\43\15\0\1\16\12\0\1\22"+
    "\15\0\1\20\12\0\1\22\10\0\1\4\3\0\1\22"+
    "\1\44\12\0\1\13\1\0\1\22\21\0\1\22\5\0"+
    "\1\4\1\0\1\31\13\0\1\30\12\0\1\36\4\0"+
    "\1\24\6\0\1\45\6\0\1\32\13\0\1\30\23\0"+
    "\1\43\1\31\5\0\1\14\1\0\1\30\1\0\1\22"+
    "\12\0\1\22\41\0\1\4\53\0\1\46\17\0\1\47"+
    "\6\0\1\31\20\0\1\24\17\0\1\35\4\0\1\42"+
    "\1\30\23\0\1\21\2\0\1\14\52\0\1\23\2\0"+
    "\1\26\5\0\1\21\16\0\1\47\13\0\1\21\26\0"+
    "\1\23\10\0\1\23\3\0\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[1000];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222"+
    "\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a"+
    "\0\u0381\0\u03a8\0\47\0\47\0\u03cf\0\u03f6\0\u041d\0\47"+
    "\0\47\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e"+
    "\0\u0555\0\u057c\0\47\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f"+
    "\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777"+
    "\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7"+
    "\0\u0a0e\0\u0a35\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f"+
    "\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57"+
    "\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff"+
    "\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137"+
    "\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\47\0\u1221\0\u1248"+
    "\0\u126f\0\u1296\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380"+
    "\0\u13a7\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8"+
    "\0\u14df\0\u1506\0\47\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701"+
    "\0\u1728\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839"+
    "\0\u1860\0\u1887\0\u18ae\0\47\0\u18d5\0\47\0\u18fc\0\u1923"+
    "\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b"+
    "\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93"+
    "\0\u1bba\0\u1be1\0\u1c08\0\u1c2f\0\47\0\u1c56\0\u1c7d\0\47"+
    "\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5"+
    "\0\u1ddc\0\u1e03\0\u1e2a\0\u1e51\0\47\0\u1e78\0\u1e9f\0\u1ec6"+
    "\0\47\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\47\0\u1f89\0\47"+
    "\0\u1fb0\0\u11d3\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a"+
    "\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab\0\u21d2"+
    "\0\u21f9\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a"+
    "\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442"+
    "\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a"+
    "\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2"+
    "\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3\0\u27ea"+
    "\0\47\0\u2811\0\u2838\0\u285f\0\u2886\0\47\0\u28ad\0\u28d4"+
    "\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c"+
    "\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2a0c\0\u2c07\0\u2c2e\0\u2c55"+
    "\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d"+
    "\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u046b\0\u2e9e"+
    "\0\u2ec5\0\u2eec\0\u2f13\0\u1f89\0\u0c30\0\u2f3a\0\u2f61\0\u2f88"+
    "\0\u2faf\0\u2fd6\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0"+
    "\0\u30e7\0\u310e\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8"+
    "\0\u321f\0\u3246\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330"+
    "\0\u3357\0\u337e\0\u33a5\0\u33cc\0\u25c8\0\u33f3\0\u341a\0\u3441"+
    "\0\u3468\0\u348f\0\u34b6\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579"+
    "\0\u35a0\0\u35c7\0\u35ee\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1"+
    "\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774\0\u379b\0\u37c2\0\u37e9"+
    "\0\u3810\0\u3837\0\u385e\0\u3885\0\u38ac\0\u38d3\0\u38fa\0\u3921"+
    "\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4\0\u3a0b\0\u3a32\0\u3a59"+
    "\0\u3a80\0\u3aa7\0\u3ace\0\u3af5\0\u3b1c\0\u3b43\0\u3b6a\0\u3b91"+
    "\0\u3bb8\0\u3bdf\0\u3c06\0\u3c2d\0\u3c54\0\u2be0\0\u3c7b\0\u3ca2"+
    "\0\u3cc9\0\u3cf0\0\u3d17\0\u3d3e\0\u3d65\0\u3d8c\0\u3db3\0\u3dda"+
    "\0\u3e01\0\u3e28\0\u3e4f\0\u3e76\0\u3e9d\0\u3ec4\0\u3eeb\0\u3f12"+
    "\0\u3f39\0\u3f60\0\u3f87\0\u3fae\0\u3fd5\0\u3ffc\0\u4023\0\u404a"+
    "\0\u4071\0\u4098\0\u40bf\0\u40e6\0\u410d\0\u4134\0\u415b\0\u4182"+
    "\0\u41a9\0\u41d0\0\u41f7\0\u421e\0\u4245\0\u426c\0\47\0\u4293"+
    "\0\u42ba\0\u42e1\0\u4308\0\u432f\0\u4356\0\u437d\0\47\0\47"+
    "\0\47\0\u43a4\0\u43cb\0\u3615\0\u43f2\0\u4419\0\u4440\0\u4467"+
    "\0\u42e1\0\u448e\0\u44b5\0\u44dc\0\u4503\0\u452a\0\u4551\0\47"+
    "\0\u4578\0\u459f\0\u45c6\0\u45ed\0\u4614\0\u463b\0\u4662\0\u4689"+
    "\0\u46b0\0\u46d7\0\u46fe\0\u1d19\0\u4725\0\u474c\0\u4773\0\u479a"+
    "\0\u47c1\0\u47e8\0\u480f\0\u4836\0\u485d\0\u2ec5\0\u4884\0\u48ab"+
    "\0\u48d2\0\u48f9\0\u4920\0\u4947\0\u496e\0\u4995\0\u49bc\0\u49e3"+
    "\0\u4a0a\0\u4a31\0\47\0\u4a58\0\u4a7f\0\u4aa6\0\u4acd\0\u4af4"+
    "\0\u4b1b\0\u4b42\0\u4b69\0\u4b90\0\u4bb7\0\u4bde\0\u4c05\0\u4c2c"+
    "\0\47\0\u4c53\0\u4c7a\0\u4ca1\0\u4cc8\0\u4cef\0\u4d16\0\u4d3d"+
    "\0\u4d64\0\u4d8b\0\u4db2\0\u4dd9\0\u4e00\0\u4e27\0\u4e4e\0\u4e75"+
    "\0\u4e9c\0\u4ec3\0\u4eea\0\u4f11\0\u4f38\0\u4f5f\0\u4f86\0\u4fad"+
    "\0\u4fd4\0\u05a3\0\u4ffb\0\u5022\0\u5049\0\u5070\0\u5097\0\u50be"+
    "\0\u50e5\0\u510c\0\u5133\0\u515a\0\u104d\0\u5181\0\u51a8\0\u51cf"+
    "\0\u51f6\0\u521d\0\u5244\0\u526b\0\u5292\0\u52b9\0\u52e0\0\u5307"+
    "\0\u532e\0\u374d\0\47\0\u5355\0\u537c\0\u53a3\0\u53ca\0\u53f1"+
    "\0\u5418\0\u543f\0\u5466\0\u548d\0\u54b4\0\u54db\0\u52b9\0\u209a"+
    "\0\u5502\0\u5529\0\u5550\0\u5577\0\u559e\0\u55c5\0\u55ec\0\u5613"+
    "\0\u563a\0\u5661\0\u5688\0\u56af\0\u56d6\0\u56fd\0\u5724\0\u574b"+
    "\0\u5772\0\u5799\0\u57c0\0\u57e7\0\u580e\0\u5835\0\u585c\0\u5883"+
    "\0\u58aa\0\u36b1\0\u58d1\0\u58f8\0\u591f\0\u5946\0\u596d\0\u5994"+
    "\0\u59bb\0\u59e2\0\u5a09\0\u5a30\0\u5a57\0\u5a7e\0\u5aa5\0\u5acc"+
    "\0\u5af3\0\u5b1a\0\u5b41\0\u5b68\0\u5b8f\0\u5bb6\0\u5bdd\0\u5c04"+
    "\0\u19bf\0\u5c2b\0\u5c52\0\u5c79\0\u5ca0\0\u374d\0\u5cc7\0\u5cee"+
    "\0\u5d15\0\u5d3c\0\u5d63\0\u5d8a\0\47\0\u5db1\0\u5dd8\0\u5dff"+
    "\0\u5e26\0\u5e4d\0\u5e74\0\u1f62\0\u5e9b\0\u5ec2\0\u5ee9\0\u5f10"+
    "\0\u5f37\0\u5f5e\0\u5f85\0\u5fac\0\u5fd3\0\u5ffa\0\u6021\0\u4ec3"+
    "\0\u6048\0\u606f\0\u6096\0\u60bd\0\u60e4\0\u610b\0\u6132\0\u6159"+
    "\0\u6180\0\u61a7\0\u61ce\0\u61f5\0\u621c\0\u6243\0\u626a\0\u6291"+
    "\0\u62b8\0\u62df\0\u6306\0\u104d\0\u632d\0\u6354\0\u637b\0\u63a2"+
    "\0\u63c9\0\u63f0\0\47\0\u6417\0\u643e\0\u6465\0\u648c\0\u64b3"+
    "\0\u64da\0\u6501\0\u6528\0\u654f\0\u6576\0\u659d\0\u65c4\0\u65eb"+
    "\0\u6612\0\u6639\0\u6660\0\u6687\0\u66ae\0\u66d5\0\u66fc\0\u6723"+
    "\0\u674a\0\u6771\0\u6798\0\u67bf\0\u67e6\0\u680d\0\u6834\0\u685b"+
    "\0\u6882\0\u68a9\0\u68d0\0\u68f7\0\u691e\0\u6945\0\u696c\0\u6993"+
    "\0\u69ba\0\u69e1\0\u6a08\0\u6a2f\0\u6a56\0\u6a7d\0\u6aa4\0\u6acb"+
    "\0\u6af2\0\u6b19\0\u6b40\0\u6b67\0\u6b8e\0\u6bb5\0\u6bdc\0\u6c03"+
    "\0\u6c2a\0\u6c51\0\u6c78\0\u6c9f\0\u6cc6\0\u6ced\0\u6d14\0\u6d3b"+
    "\0\u6d62\0\u6d89\0\u6db0\0\u6dd7\0\u6dfe\0\u6e25\0\u6e4c\0\u6e73"+
    "\0\u6e9a\0\u6ec1\0\u6ee8\0\u6f0f\0\u6f36\0\u6f5d\0\u6f84\0\u6fab"+
    "\0\u6fd2\0\u6ff9\0\u7020\0\u7047\0\u706e\0\u7095\0\u70bc\0\u70e3"+
    "\0\u710a\0\u7131\0\u7158\0\u717f\0\u71a6\0\u71cd\0\u71f4\0\47"+
    "\0\u721b\0\u7242\0\u7269\0\u7290\0\u72b7\0\u72de\0\u7305\0\u732c"+
    "\0\u7353\0\u737a\0\u73a1\0\u73c8\0\u73ef\0\u7416\0\u743d\0\47"+
    "\0\u7464\0\u748b\0\u74b2\0\u74d9\0\u7500\0\u7527\0\u754e\0\u7575"+
    "\0\u759c\0\u75c3\0\u75ea\0\u7611\0\u7638\0\u765f\0\u7686\0\u76ad"+
    "\0\u76d4\0\u76fb\0\u7722\0\u7749\0\u7770\0\u7797\0\u77be\0\u77e5"+
    "\0\u780c\0\u7833\0\u785a\0\u7881\0\u78a8\0\u78cf\0\u78f6\0\u791d"+
    "\0\u7944\0\u796b\0\u7992\0\u79b9\0\u79e0\0\u7a07\0\u7a2e\0\47"+
    "\0\u7a55\0\u7a7c\0\u7aa3\0\u7aca\0\47\0\u463b\0\u7af1\0\u7b18"+
    "\0\u7b3f\0\u7b66\0\u7b8d\0\u7bb4\0\u7bdb\0\u7c02\0\u7c29\0\u7c50"+
    "\0\u7c77\0\u7c9e\0\u7cc5\0\u7cec\0\u7d13\0\u7d3a\0\u7d61\0\u7d88"+
    "\0\u7daf\0\47\0\u7dd6\0\u7dfd\0\u685b\0\u7e24\0\u7e4b\0\u7e72"+
    "\0\u7e99\0\u7ec0\0\u7ee7\0\u7f0e\0\u7f35\0\u7f5c\0\u7f83\0\u7faa"+
    "\0\u7fd1\0\u7ff8\0\u801f\0\u8046\0\u806d\0\u8094\0\u80bb\0\u80e2"+
    "\0\u8109\0\u8130\0\u8157\0\u817e\0\u81a5\0\u81cc\0\u81f3\0\u821a"+
    "\0\u8241\0\u8268\0\u828f\0\u82b6\0\u82dd\0\u8304\0\u832b\0\u8352"+
    "\0\u8379\0\u83a0\0\u83c7\0\u83ee\0\u8415\0\u843c\0\u8463\0\u6af2"+
    "\0\u848a\0\u84b1\0\u19bf\0\u84d8\0\u84ff\0\u8526\0\u854d\0\u8574"+
    "\0\u7a7c\0\u859b\0\u85c2\0\u85e9\0\u8610\0\u8637\0\u865e\0\u8685"+
    "\0\u86ac\0\u86d3\0\u86fa\0\u8721\0\u8748\0\u876f\0\u8796\0\u19bf"+
    "\0\u87bd\0\u87e4\0\u880b\0\u8832\0\u8859\0\u8880\0\u88a7\0\u88ce"+
    "\0\u88f5\0\u891c\0\u8943\0\u8046\0\u896a\0\u8991\0\u89b8\0\u89df"+
    "\0\u8a06\0\u8a2d\0\u8a54\0\u8a7b\0\u8aa2\0\u8ac9\0\u8af0\0\u8b17"+
    "\0\u8b3e\0\u8b65\0\u8b8c\0\u8bb3\0\u8bda\0\u8c01\0\u8c28\0\u8c4f"+
    "\0\u8c76\0\u8c9d\0\u8832\0\u8cc4\0\u8ceb\0\u8d12\0\u8d39\0\u8d60"+
    "\0\u8d87\0\u8dae\0\u8dd5\0\u854d\0\u8dfc\0\u8e23\0\u8e4a\0\u8c4f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1000];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\2\1\30"+
    "\1\31\1\2\1\32\1\33\2\34\1\35\1\36\1\37"+
    "\1\40\1\2\1\33\1\0\1\33\1\41\52\0\1\42"+
    "\1\43\2\0\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\0\1\52\1\53\3\0\1\54\3\0\1\55\21\0"+
    "\1\56\3\0\1\57\1\0\1\60\7\0\1\61\1\0"+
    "\1\62\26\0\1\63\2\0\1\64\1\65\4\0\1\66"+
    "\6\0\1\67\26\0\1\70\3\0\1\71\1\0\1\72"+
    "\7\0\1\73\1\0\1\74\26\0\1\75\1\76\3\0"+
    "\1\77\1\100\1\101\4\0\1\102\5\0\1\103\2\0"+
    "\1\104\2\0\1\105\16\0\1\106\2\0\1\107\2\0"+
    "\1\110\3\0\1\111\1\0\1\112\1\0\1\113\1\0"+
    "\1\114\27\0\1\115\1\116\4\0\1\117\1\120\36\0"+
    "\1\121\3\0\1\122\1\0\1\123\3\0\1\124\3\0"+
    "\1\125\1\0\1\126\2\0\1\127\23\0\1\130\1\131"+
    "\1\132\1\133\1\134\1\135\1\136\2\0\1\137\1\0"+
    "\1\140\1\141\1\142\1\143\1\0\1\144\26\0\1\145"+
    "\2\0\1\146\1\147\1\0\1\150\40\0\1\151\3\0"+
    "\1\152\1\0\1\153\7\0\1\154\1\0\1\155\26\0"+
    "\1\156\2\0\1\157\6\0\1\160\1\0\1\161\1\0"+
    "\1\162\1\0\1\163\26\0\1\164\3\0\1\165\1\0"+
    "\1\166\11\0\1\167\26\0\1\170\3\0\1\171\1\0"+
    "\1\172\11\0\1\173\2\0\1\174\24\0\1\175\6\0"+
    "\1\176\2\0\1\177\34\0\1\200\2\0\1\201\1\0"+
    "\1\202\41\0\1\203\1\204\6\0\1\205\1\206\1\0"+
    "\1\207\1\0\1\210\2\0\1\211\3\0\1\212\2\0"+
    "\1\213\16\0\1\214\3\0\1\215\1\0\1\216\3\0"+
    "\1\217\1\0\1\220\1\0\1\221\1\0\1\222\2\0"+
    "\1\223\23\0\1\224\3\0\1\225\1\0\1\226\3\0"+
    "\1\227\3\0\1\230\1\0\1\231\32\0\1\232\13\0"+
    "\1\233\26\0\1\234\3\0\1\235\1\0\1\236\3\0"+
    "\1\237\1\0\1\240\1\0\1\241\1\0\1\242\32\0"+
    "\1\243\11\0\1\244\1\0\1\245\26\0\1\246\5\0"+
    "\1\247\74\0\1\250\47\0\1\251\47\0\1\252\16\0"+
    "\1\253\1\254\1\255\42\0\1\256\44\0\1\257\2\0"+
    "\1\260\4\0\1\261\46\0\1\262\52\0\1\263\26\0"+
    "\4\264\1\265\26\264\1\266\7\264\2\0\2\264\2\0"+
    "\1\267\17\0\1\270\30\0\1\271\1\0\1\53\1\272"+
    "\1\273\11\0\1\274\30\0\1\275\64\0\1\276\30\0"+
    "\1\277\45\0\1\300\1\301\44\0\1\302\4\0\1\303"+
    "\1\304\2\0\1\305\12\0\1\306\23\0\1\307\46\0"+
    "\1\310\10\0\1\311\36\0\1\312\26\0\1\313\25\0"+
    "\1\303\10\0\1\314\25\0\1\315\3\0\1\316\1\0"+
    "\1\317\3\0\1\320\5\0\1\321\26\0\1\322\1\323"+
    "\51\0\1\324\13\0\1\325\37\0\1\326\4\0\1\327"+
    "\31\0\1\330\1\331\3\0\1\332\1\256\20\0\1\333"+
    "\16\0\1\334\11\0\1\335\1\0\1\123\34\0\1\336"+
    "\4\0\1\337\1\340\3\0\1\341\1\342\32\0\1\343"+
    "\10\0\1\225\36\0\1\336\6\0\1\344\1\345\1\0"+
    "\1\346\1\0\1\347\32\0\1\350\7\0\1\331\56\0"+
    "\1\351\44\0\1\352\30\0\1\353\17\0\1\354\46\0"+
    "\1\355\30\0\1\356\64\0\1\331\51\0\1\357\25\0"+
    "\1\360\44\0\1\361\5\0\1\362\1\0\1\363\1\364"+
    "\1\0\1\365\1\366\30\0\1\367\3\0\1\370\13\0"+
    "\1\371\30\0\1\372\50\0\1\373\42\0\1\374\3\0"+
    "\1\375\11\0\1\376\1\0\1\377\30\0\1\256\10\0"+
    "\1\331\33\0\1\u0100\1\u0101\6\0\1\162\1\0\1\u0102"+
    "\1\0\1\u0103\1\u0104\1\u0105\1\0\1\u0106\1\u0107\35\0"+
    "\1\u0108\20\0\1\u0109\25\0\1\u010a\42\0\1\u010b\52\0"+
    "\1\u010c\3\0\1\u010d\33\0\1\u010e\14\0\1\u010f\4\0"+
    "\1\331\23\0\1\u0110\1\u0111\3\0\1\u0112\2\0\1\u0113"+
    "\45\0\1\256\37\0\1\u0114\3\0\1\u0115\1\0\1\u0116"+
    "\7\0\1\u0117\1\0\1\u0118\2\0\1\u0119\27\0\1\u011a"+
    "\5\0\1\u011b\7\0\1\256\25\0\1\u0104\3\0\1\u011c"+
    "\3\0\1\u011d\57\0\1\u011e\25\0\1\u011f\1\256\3\0"+
    "\1\123\2\0\1\256\11\0\1\336\43\0\1\u0120\26\0"+
    "\1\u0121\3\0\1\u0122\1\0\1\u0123\3\0\1\u0124\3\0"+
    "\1\u0125\1\0\1\u0126\26\0\1\u0127\3\0\1\u0128\1\0"+
    "\1\u0129\3\0\1\u012a\3\0\1\225\1\0\1\u012b\27\0"+
    "\1\u012c\1\336\1\0\1\u012d\1\u012e\3\0\1\u012f\2\0"+
    "\1\u0130\13\0\1\u0131\21\0\1\u0132\44\0\1\u0133\1\336"+
    "\21\0\1\u0134\26\0\1\u0135\46\0\1\u0136\1\0\1\u0137"+
    "\3\0\1\u0138\1\0\1\u0139\3\0\1\u013a\32\0\1\u013b"+
    "\1\0\1\u013c\44\0\1\u013d\1\0\1\u013e\41\0\1\u013f"+
    "\56\0\1\336\2\0\1\123\1\0\1\366\6\0\1\u0140"+
    "\31\0\1\256\3\0\1\u0141\32\0\1\u0142\3\0\1\u0143"+
    "\1\0\1\u0144\11\0\1\u0145\2\0\1\u0146\24\0\1\162"+
    "\1\353\7\0\1\u0147\36\0\1\u0148\45\0\1\u0149\4\0"+
    "\1\u014a\40\0\1\346\21\0\1\u014b\25\0\1\103\5\0"+
    "\1\u014c\40\0\1\u014d\45\0\1\u014e\6\0\2\u0147\40\0"+
    "\1\u014f\3\0\1\u0150\1\0\1\u0151\11\0\1\355\1\336"+
    "\23\0\1\u0152\17\0\1\u0153\2\0\1\u0154\43\0\1\u0155"+
    "\26\0\1\u0156\15\0\1\u0157\32\0\1\256\56\0\1\u0158"+
    "\1\0\1\u0159\40\0\1\u015a\1\372\1\0\1\u015b\5\0"+
    "\1\355\3\0\1\256\23\0\1\u015c\1\346\1\336\4\0"+
    "\1\256\41\0\1\256\5\0\1\u015d\10\0\1\u015e\1\u015f"+
    "\2\0\1\u0160\31\0\1\u0161\1\0\1\u0162\41\0\1\u0163"+
    "\1\u0164\1\u0147\7\0\1\333\2\0\1\u0165\24\0\1\u0166"+
    "\1\0\1\u0167\1\0\1\225\1\u0168\42\0\1\u0169\6\0"+
    "\1\u016a\37\0\1\u0106\5\0\1\u016b\2\0\1\u016c\44\0"+
    "\1\u016d\45\0\1\u016e\4\0\1\u016f\52\0\1\u0170\32\0"+
    "\1\u0171\13\0\1\u0172\32\0\1\u0173\6\0\1\162\7\0"+
    "\1\331\24\0\1\u0174\51\0\1\u0175\24\0\1\u0176\20\0"+
    "\1\u0177\51\0\1\u0178\40\0\1\u0179\30\0\1\u017a\24\0"+
    "\1\305\41\0\1\u017b\7\0\1\u017c\54\0\1\u017d\53\0"+
    "\1\u017e\25\0\1\u017f\43\0\1\303\15\0\1\u0180\1\0"+
    "\1\372\1\331\24\0\1\u0181\1\u0182\1\u0183\1\0\1\u0184"+
    "\1\u0185\2\0\1\u0186\3\0\1\u0187\5\0\1\u0188\2\0"+
    "\1\u0189\22\0\1\346\1\u018a\4\0\1\256\2\0\1\u014e"+
    "\5\0\1\u018b\32\0\1\u018c\1\0\1\u018d\11\0\1\u018e"+
    "\32\0\1\u018f\11\0\1\u0190\1\0\1\u0172\30\0\1\u0191"+
    "\3\0\1\u0110\1\0\1\u0192\1\0\1\u0193\10\0\1\336"+
    "\23\0\1\u0100\1\0\1\u0194\7\0\1\u0195\3\0\1\u0196"+
    "\5\0\1\331\24\0\1\355\7\0\1\u0197\36\0\1\336"+
    "\56\0\1\341\15\0\1\333\22\0\1\u0198\1\0\1\u0199"+
    "\11\0\1\u019a\27\0\1\331\46\0\1\u0104\45\0\1\u019b"+
    "\64\0\1\u019c\32\0\1\305\2\0\1\u019d\4\0\1\u019e"+
    "\1\0\1\u019f\1\u01a0\40\0\1\256\4\0\1\u01a1\33\0"+
    "\1\u01a2\2\0\1\u01a3\3\0\1\u01a4\1\0\1\u01a5\12\0"+
    "\1\u01a6\2\0\1\u01a7\22\0\1\u01a8\1\0\1\u01a9\7\0"+
    "\1\u01aa\1\0\1\u01ab\32\0\1\u01ac\13\0\1\u01ad\30\0"+
    "\1\u01ae\56\0\1\u01af\3\0\1\u01b0\3\0\1\u0119\35\0"+
    "\1\u01b1\44\0\1\u01b2\55\0\1\u01b3\2\0\1\331\41\0"+
    "\1\u01b4\46\0\1\u01b5\66\0\1\34\47\0\1\u01b6\7\0"+
    "\43\252\2\0\2\252\17\0\1\u01b7\42\0\1\u01b8\47\0"+
    "\1\u01b9\5\0\1\u01ba\34\0\1\u01bb\11\0\1\u01bc\46\0"+
    "\1\u01bd\57\0\1\u01be\31\0\1\u0100\30\0\2\264\1\u01bf"+
    "\40\264\2\0\4\264\1\u01bf\11\264\1\u01c0\26\264\2\0"+
    "\4\264\1\u01bf\1\264\1\u01c1\3\264\1\u01c2\5\264\1\u01c3"+
    "\24\264\2\0\2\264\21\0\1\333\3\0\1\u01c4\42\0"+
    "\1\u01c5\35\0\1\u01c6\43\0\1\u01c7\53\0\1\u01c8\46\0"+
    "\1\u0147\5\0\1\u01c9\33\0\1\u01ca\61\0\1\u01cb\34\0"+
    "\1\u01cc\43\0\1\u01cd\53\0\1\u01ce\52\0\1\u01cf\53\0"+
    "\1\331\31\0\1\u01d0\75\0\1\u01d1\17\0\1\u01d2\1\0"+
    "\1\u01d3\52\0\1\u01d4\67\0\1\u01d5\25\0\1\u01d6\52\0"+
    "\1\355\33\0\1\u01d7\1\u01d8\45\0\1\u01d9\4\0\1\u01da"+
    "\1\0\1\u01db\4\0\1\u01dc\5\0\1\176\33\0\1\u01d8"+
    "\1\0\1\u01dd\40\0\1\u01a7\13\0\1\u01de\36\0\1\u01db"+
    "\5\0\1\u01df\35\0\1\u01e0\43\0\1\u01e1\45\0\1\u01e2"+
    "\12\0\1\u01e3\32\0\1\u01e4\1\331\57\0\1\331\43\0"+
    "\1\331\12\0\1\336\36\0\1\u01e5\40\0\1\336\54\0"+
    "\1\u01e6\44\0\1\340\42\0\1\336\2\0\1\350\53\0"+
    "\1\331\34\0\1\u0180\17\0\1\256\30\0\1\u01e7\25\0"+
    "\1\u01e8\24\0\1\355\45\0\1\336\47\0\1\u01e9\42\0"+
    "\1\u0184\50\0\1\u01ea\41\0\1\u01eb\50\0\1\u01ec\46\0"+
    "\1\u01ed\47\0\1\331\43\0\1\u01ee\3\0\1\u01ef\22\0"+
    "\1\u01f0\22\0\1\u01f1\43\0\1\u01f2\52\0\1\u01f3\43\0"+
    "\1\u01f4\1\u01f5\43\0\1\u01f6\6\0\1\331\3\0\1\u01f7"+
    "\35\0\1\u01f8\50\0\1\256\6\0\1\331\55\0\1\u01f9"+
    "\32\0\1\327\4\0\1\u01fa\50\0\1\u01fb\7\0\1\310"+
    "\31\0\1\u01c5\61\0\1\331\36\0\1\162\43\0\1\u01fc"+
    "\36\0\1\u01fd\47\0\1\u01fe\56\0\1\u01ff\37\0\1\331"+
    "\54\0\1\u0200\37\0\1\u0201\61\0\1\u0202\36\0\1\u011e"+
    "\43\0\1\u0203\64\0\1\310\50\0\1\u0204\27\0\1\u0205"+
    "\3\0\1\u0206\40\0\1\u0207\4\0\1\u0208\2\0\1\u0209"+
    "\42\0\1\u020a\42\0\1\u020b\64\0\1\u020c\30\0\1\u020d"+
    "\53\0\1\u0180\63\0\1\u020e\40\0\1\162\34\0\1\u01fb"+
    "\64\0\1\u020f\34\0\1\u0210\4\0\1\u0211\34\0\1\u0212"+
    "\7\0\1\u0184\35\0\1\u0213\7\0\1\u0214\1\256\65\0"+
    "\1\350\17\0\1\u0215\75\0\1\u0147\47\0\1\u0216\23\0"+
    "\1\u0217\42\0\1\u0218\45\0\1\u0219\64\0\1\256\2\0"+
    "\1\256\35\0\1\u021a\36\0\1\346\1\301\44\0\1\u0130"+
    "\47\0\1\u021b\3\0\1\u021b\45\0\1\u021c\1\0\1\u021d"+
    "\7\0\1\u021e\31\0\1\127\5\0\1\u021f\52\0\1\331"+
    "\1\350\3\0\1\u0220\45\0\1\u01c8\27\0\1\u0221\47\0"+
    "\1\333\11\0\1\331\33\0\1\u0222\5\0\1\u0223\41\0"+
    "\1\u0147\1\256\6\0\1\u0224\1\u0147\5\0\1\u0225\30\0"+
    "\1\256\4\0\1\336\40\0\1\u011e\15\0\1\336\47\0"+
    "\1\u0226\27\0\1\u011e\2\0\1\123\56\0\1\336\36\0"+
    "\1\u0227\46\0\1\u0228\47\0\1\u0229\11\0\1\336\2\0"+
    "\1\336\26\0\1\u022a\44\0\1\u021b\1\346\2\0\1\346"+
    "\7\0\1\u0130\33\0\2\336\11\0\1\u0130\36\0\1\u022b"+
    "\1\0\1\u022c\7\0\1\u022d\36\0\1\225\46\0\1\u022e"+
    "\10\0\1\350\33\0\1\u0173\6\0\1\162\42\0\1\333"+
    "\53\0\1\u0130\46\0\1\u020c\51\0\1\u011e\2\0\1\u011e"+
    "\26\0\1\305\60\0\1\331\2\0\1\331\31\0\1\u0146"+
    "\45\0\1\u0146\1\u022f\7\0\1\u0230\41\0\1\u0231\51\0"+
    "\1\u0230\4\0\1\u0146\14\0\1\u01e8\46\0\1\u01e8\17\0"+
    "\1\u0232\65\0\1\256\25\0\1\u021a\45\0\1\u0233\55\0"+
    "\1\331\42\0\1\331\44\0\1\u0158\5\0\1\256\41\0"+
    "\1\u0234\56\0\1\u0235\36\0\1\u0236\54\0\1\u0237\57\0"+
    "\1\u0238\6\0\1\u0239\17\0\1\355\62\0\1\u023a\33\0"+
    "\1\u0180\52\0\1\u023b\41\0\1\u011e\5\0\1\256\62\0"+
    "\1\u0180\24\0\1\336\5\0\1\336\2\0\1\u023c\1\u023d"+
    "\14\0\1\333\20\0\1\u020b\56\0\1\u023e\37\0\1\225"+
    "\47\0\1\u023f\44\0\1\256\1\0\1\336\54\0\1\u0240"+
    "\37\0\1\u0241\57\0\1\u0242\32\0\1\u0243\47\0\1\u023d"+
    "\51\0\1\u0244\45\0\1\u0245\47\0\1\u0246\44\0\1\u0247"+
    "\50\0\1\341\46\0\1\u0248\46\0\1\302\46\0\1\u0249"+
    "\43\0\1\u01cf\51\0\1\u0130\7\0\1\162\43\0\1\u024a"+
    "\50\0\1\336\55\0\1\u024b\55\0\1\u024c\17\0\1\u024d"+
    "\50\0\1\u024e\43\0\1\u024f\46\0\1\u0250\51\0\1\u0251"+
    "\52\0\1\u0252\46\0\1\u0253\66\0\1\u0254\24\0\1\u0255"+
    "\52\0\1\u0256\40\0\1\u0257\44\0\1\u0258\2\0\1\u014f"+
    "\4\0\1\336\36\0\1\256\1\0\1\u0259\2\0\1\336"+
    "\50\0\1\u025a\36\0\1\u011e\45\0\1\u025b\17\0\1\u025c"+
    "\34\0\1\u025d\54\0\1\331\3\0\1\u025e\26\0\1\u025f"+
    "\5\0\1\u0260\7\0\1\u0184\50\0\1\u0261\30\0\1\350"+
    "\1\0\1\336\56\0\1\u0262\32\0\1\u021b\3\0\1\u0263"+
    "\2\0\1\256\44\0\1\u0264\1\0\1\101\37\0\1\u0265"+
    "\15\0\1\366\1\u01c5\33\0\1\346\2\0\1\256\1\0"+
    "\1\256\41\0\1\305\47\0\1\u0266\23\0\1\u0267\20\0"+
    "\1\331\2\0\1\u0268\22\0\1\u0269\16\0\1\u026a\6\0"+
    "\1\225\41\0\1\u026b\44\0\1\u0104\2\0\1\256\43\0"+
    "\1\123\20\0\1\u01f9\33\0\1\u026c\11\0\1\u026d\36\0"+
    "\1\256\36\0\1\346\56\0\1\u024a\4\0\1\u026e\42\0"+
    "\1\u020b\35\0\1\u026f\10\0\1\u0270\36\0\1\u0271\1\0"+
    "\1\331\57\0\1\u0272\45\0\1\350\52\0\1\u0273\30\0"+
    "\1\256\11\0\1\256\54\0\1\u0201\40\0\1\u014e\35\0"+
    "\1\u0274\47\0\1\u0242\3\0\1\u0275\42\0\1\325\46\0"+
    "\1\u0276\46\0\1\u0277\50\0\1\u0278\55\0\1\223\11\0"+
    "\1\u0147\26\0\1\256\1\0\1\256\46\0\1\u0184\1\u01fb"+
    "\5\0\1\u0279\31\0\1\u027a\45\0\1\u027b\16\0\1\u027c"+
    "\1\u027d\25\0\1\123\10\0\1\u027e\7\0\1\u01f9\30\0"+
    "\1\u027f\64\0\1\u0280\36\0\1\u0281\50\0\1\u0282\46\0"+
    "\1\u0283\67\0\1\34\11\0\1\341\52\0\1\u019b\46\0"+
    "\1\u0284\54\0\1\u024b\43\0\1\u0285\55\0\1\u0286\40\0"+
    "\1\u0287\41\0\1\u0288\41\0\2\264\1\u01bf\7\264\1\u0289"+
    "\30\264\2\0\4\264\1\u01bf\17\264\1\u028a\20\264\2\0"+
    "\4\264\1\u01bf\2\264\1\u028b\35\264\2\0\4\264\1\u01bf"+
    "\24\264\1\u0289\13\264\2\0\4\264\1\u01bf\17\264\1\u028c"+
    "\20\264\2\0\2\264\33\0\1\u028d\21\0\1\u028e\47\0"+
    "\1\314\41\0\1\u028f\5\0\1\u0290\44\0\1\u024a\43\0"+
    "\1\u0291\65\0\1\u0292\30\0\1\223\56\0\1\u0219\57\0"+
    "\1\310\43\0\1\230\31\0\1\u0293\45\0\1\u0294\47\0"+
    "\1\u0295\45\0\1\u0296\50\0\1\u0297\42\0\1\u0298\3\0"+
    "\1\u0299\13\0\1\u029a\46\0\1\u029b\40\0\1\u029c\40\0"+
    "\1\u01d8\44\0\1\u0296\4\0\1\u0295\55\0\1\u029d\52\0"+
    "\1\u029e\27\0\1\u029f\45\0\1\u02a0\71\0\1\u01ee\2\0"+
    "\1\u01a7\30\0\1\u02a1\43\0\1\u02a2\41\0\1\331\4\0"+
    "\1\256\67\0\1\u02a3\22\0\1\u02a4\43\0\1\u02a5\65\0"+
    "\1\u02a6\32\0\1\u02a7\44\0\1\u02a8\46\0\1\u01d2\46\0"+
    "\1\u02a9\50\0\1\u02aa\47\0\1\u0100\72\0\1\u02ab\20\0"+
    "\1\336\51\0\1\u0180\42\0\1\u02ac\50\0\1\u02ad\42\0"+
    "\1\u02ae\51\0\1\162\45\0\1\u01b8\52\0\1\u02af\50\0"+
    "\1\u020b\37\0\1\u0180\46\0\1\310\63\0\1\u02b0\34\0"+
    "\1\327\46\0\1\101\44\0\1\u02b1\5\0\1\u02b2\52\0"+
    "\1\u0180\36\0\1\u02b3\51\0\1\u0254\46\0\1\u02b4\37\0"+
    "\1\u02b5\61\0\1\u02b6\47\0\1\u02b7\36\0\1\u020b\43\0"+
    "\1\u014e\50\0\1\u02b8\55\0\1\u02b9\35\0\1\u02ba\53\0"+
    "\1\u02bb\57\0\1\256\44\0\1\u02bc\41\0\1\u02bd\55\0"+
    "\1\u011e\31\0\1\u02be\45\0\1\u02bf\65\0\1\u0257\51\0"+
    "\1\u0119\42\0\1\336\27\0\1\u02c0\3\0\1\u0100\51\0"+
    "\1\333\7\0\1\333\34\0\1\u0215\45\0\1\u02c1\51\0"+
    "\1\u011e\51\0\1\336\35\0\1\u0212\46\0\1\u021b\51\0"+
    "\1\123\44\0\1\336\14\0\1\256\30\0\1\u02c2\46\0"+
    "\1\u0134\62\0\1\u020c\35\0\1\u02c3\45\0\1\u0295\1\u02c4"+
    "\16\0\1\u02c5\23\0\1\346\47\0\1\u02c6\46\0\1\127"+
    "\61\0\1\u02c7\35\0\1\u02c8\47\0\1\u0146\45\0\1\u0146"+
    "\55\0\1\u02c9\46\0\1\u02ca\51\0\1\u02cb\51\0\1\u02cc"+
    "\34\0\1\u02cd\54\0\1\u02ce\40\0\1\u02cf\61\0\1\u0180"+
    "\27\0\1\u02d0\2\0\1\u02d1\42\0\1\u02d2\45\0\1\u02d3"+
    "\77\0\1\u02d4\40\0\1\u02d5\31\0\1\u0156\55\0\1\u02d6"+
    "\60\0\1\u0241\37\0\1\u02d7\26\0\1\u02d8\60\0\1\310"+
    "\34\0\1\u02d9\17\0\1\u02da\46\0\1\u02db\36\0\1\u02dc"+
    "\41\0\1\u02dd\46\0\1\u02de\55\0\1\u02df\56\0\1\u02e0"+
    "\46\0\1\u0190\40\0\1\u02e1\40\0\1\u0206\44\0\1\u02e2"+
    "\46\0\1\u01cf\47\0\1\u02e3\46\0\1\u02e4\41\0\1\u02e5"+
    "\52\0\1\u02e6\60\0\1\u02e7\45\0\1\333\40\0\1\u02e8"+
    "\50\0\1\u01cf\36\0\1\256\46\0\1\336\57\0\1\u02e9"+
    "\54\0\1\u02ea\35\0\1\u02eb\56\0\1\u02ec\36\0\1\u02ed"+
    "\42\0\1\u0180\63\0\1\u02ee\27\0\1\u02ef\54\0\1\u02f0"+
    "\41\0\1\u011e\42\0\43\u02f1\2\0\2\u02f1\6\0\1\u02f2"+
    "\42\0\1\u02f3\47\0\1\123\11\0\1\331\55\0\1\305"+
    "\34\0\1\u02f4\56\0\1\u02b1\44\0\1\u02f5\34\0\1\u02f6"+
    "\44\0\1\u0295\73\0\1\333\20\0\1\u02f7\47\0\1\u02f8"+
    "\53\0\1\u0119\43\0\1\u02f9\65\0\1\u02c5\23\0\1\u02fa"+
    "\5\0\1\u02fb\40\0\1\u0118\5\0\1\u02fc\11\0\1\u02fd"+
    "\30\0\1\u02fe\60\0\1\u0204\36\0\1\u024b\43\0\1\u02ff"+
    "\51\0\1\372\42\0\1\101\56\0\1\u0300\42\0\1\u0301"+
    "\43\0\1\u0302\55\0\1\u01cf\56\0\1\u0303\24\0\2\264"+
    "\1\u01bf\1\u0304\37\264\2\0\4\264\1\u01bf\17\264\1\u0305"+
    "\20\264\2\0\4\264\1\u01bf\1\u0306\37\264\2\0\2\264"+
    "\27\0\1\u0307\25\0\1\u0308\44\0\1\u0309\53\0\1\u0219"+
    "\55\0\1\u030a\34\0\1\u030b\62\0\1\u01cf\32\0\1\u02c4"+
    "\16\0\1\u02c5\40\0\1\u030c\41\0\1\u030d\66\0\1\u030e"+
    "\17\0\1\u030f\65\0\1\u0310\50\0\1\u0311\27\0\1\u015d"+
    "\47\0\1\u01ba\50\0\1\u0312\14\0\1\u02c5\32\0\1\u0313"+
    "\51\0\1\u0314\40\0\1\u0315\53\0\1\u0316\36\0\1\u0180"+
    "\2\0\1\331\57\0\1\u01fb\43\0\1\u0317\42\0\1\u01ce"+
    "\3\0\1\u02d0\35\0\1\325\55\0\1\u0318\36\0\1\u0319"+
    "\47\0\1\u0158\53\0\1\230\50\0\1\u031a\52\0\1\u0302"+
    "\44\0\1\372\40\0\1\u031b\42\0\1\u031c\55\0\1\u031d"+
    "\47\0\1\u031e\44\0\1\u031f\65\0\1\u0320\23\0\1\u0201"+
    "\44\0\1\u011c\70\0\1\u0180\26\0\1\u0321\61\0\1\u02ac"+
    "\51\0\1\u02c3\50\0\1\u0219\41\0\1\331\32\0\1\u0100"+
    "\54\0\1\u0295\43\0\1\u0322\73\0\1\u0323\37\0\1\336"+
    "\30\0\1\u0220\46\0\1\u0324\51\0\1\u0325\62\0\1\u0326"+
    "\23\0\1\u02cd\70\0\1\u0327\31\0\1\u01fb\45\0\1\u0328"+
    "\51\0\1\u0329\45\0\1\u032a\44\0\1\u032b\44\0\1\256"+
    "\1\0\1\u0220\54\0\1\u032c\56\0\1\u032d\55\0\1\u0269"+
    "\15\0\1\u01ff\60\0\1\u0308\35\0\1\u032e\64\0\1\u020c"+
    "\47\0\1\u0212\56\0\1\u032f\26\0\1\u0330\54\0\1\u0331"+
    "\34\0\1\u0332\53\0\1\u0333\66\0\1\u0334\25\0\1\u0335"+
    "\52\0\1\u0336\36\0\1\u0337\42\0\1\u0338\17\0\1\u025c"+
    "\30\0\1\u0339\50\0\1\u0170\52\0\1\u033a\42\0\1\u033b"+
    "\46\0\1\u0219\64\0\1\u01fb\64\0\1\u033c\22\0\1\u033d"+
    "\37\0\1\u033e\42\0\1\u033f\51\0\1\u0340\54\0\1\u0341"+
    "\32\0\2\u02f1\1\u0342\40\u02f1\2\0\2\u02f1\3\0\1\u0272"+
    "\67\0\1\u0343\30\0\1\u0344\52\0\1\305\50\0\1\u0242"+
    "\43\0\1\u024b\43\0\1\u0345\54\0\1\u0346\43\0\1\u0147"+
    "\46\0\1\u0347\67\0\1\u0104\20\0\1\u0348\47\0\1\u0295"+
    "\1\u02c4\42\0\1\u0349\56\0\1\310\37\0\1\u015d\47\0"+
    "\1\u034a\54\0\1\u034b\34\0\2\264\1\u034c\40\264\2\0"+
    "\4\264\1\u01bf\15\264\1\u034d\22\264\2\0\4\264\1\u01bf"+
    "\21\264\1\u034e\16\264\2\0\2\264\14\0\1\u034f\54\0"+
    "\1\u018b\32\0\1\u0350\64\0\1\u0351\36\0\1\u0352\34\0"+
    "\1\u0353\44\0\43\264\2\0\2\264\6\0\1\u0354\56\0"+
    "\1\u0355\33\0\1\u0356\50\0\1\u0219\47\0\1\u01ee\52\0"+
    "\1\u0219\42\0\1\u0357\54\0\1\u0358\42\0\1\u0359\36\0"+
    "\43\u035a\2\0\2\u035a\22\0\1\u0358\45\0\1\u0180\31\0"+
    "\1\310\60\0\1\u0218\41\0\1\u0358\45\0\1\u035b\44\0"+
    "\1\u0330\44\0\1\u035c\50\0\1\u035d\43\0\1\u035e\46\0"+
    "\1\u035f\1\u0360\1\0\1\u0361\3\0\1\u0362\7\0\1\u0363"+
    "\4\0\1\u0364\33\0\1\u0330\50\0\1\u0365\63\0\1\u0366"+
    "\27\0\1\u0367\51\0\1\u020b\35\0\1\u0368\1\0\1\u0369"+
    "\45\0\1\u036a\52\0\1\u036b\3\0\1\u02d6\37\0\1\u02d6"+
    "\14\0\1\331\41\0\1\u036c\36\0\1\u036d\44\0\1\u036e"+
    "\43\0\1\u036f\76\0\1\u0370\23\0\1\u02e1\60\0\1\u0371"+
    "\32\0\1\u0372\72\0\1\u0373\47\0\1\u0374\32\0\1\u0147"+
    "\34\0\1\u01cf\47\0\1\u0375\52\0\1\u01d9\57\0\1\u0376"+
    "\25\0\1\u015b\46\0\1\u0377\62\0\1\u0378\42\0\1\u0379"+
    "\44\0\1\u037a\36\0\2\u02f1\1\u0342\1\u037b\37\u02f1\2\0"+
    "\2\u02f1\6\0\1\u037c\56\0\1\u037d\44\0\1\u0180\51\0"+
    "\1\u037e\40\0\1\350\41\0\1\350\60\0\1\u01fb\32\0"+
    "\1\u037f\50\0\1\u01b9\42\0\2\264\1\u01bf\7\264\1\u0289"+
    "\5\264\1\u0380\22\264\2\0\4\264\1\u01bf\21\264\1\u0381"+
    "\16\264\2\0\4\264\1\u01bf\30\264\1\u0382\7\264\2\0"+
    "\2\264\22\0\1\u0383\33\0\1\u031a\44\0\1\u035d\41\0"+
    "\43\u0384\2\0\2\u0384\10\0\1\u0385\41\0\1\u0386\70\0"+
    "\1\u0387\27\0\1\u0388\52\0\1\u0389\63\0\1\u038a\17\0"+
    "\22\u035a\1\u038b\20\u035a\2\0\2\u035a\4\0\1\u038c\50\0"+
    "\1\u038d\50\0\1\u0363\43\0\1\u038e\5\0\1\u038f\43\0"+
    "\1\u0390\44\0\1\u0391\1\0\1\u0392\41\0\1\u01a7\53\0"+
    "\1\u0393\11\0\1\u0394\32\0\1\u0395\47\0\1\u0396\41\0"+
    "\1\u0397\55\0\1\u0330\40\0\1\u0398\53\0\1\u02d6\60\0"+
    "\1\u0242\26\0\1\u0399\53\0\1\310\53\0\1\u01d9\43\0"+
    "\1\u039a\44\0\1\u039b\66\0\1\u02c3\25\0\1\u039c\53\0"+
    "\1\u039d\47\0\1\u039e\44\0\1\162\61\0\1\u039f\33\0"+
    "\1\u032b\66\0\1\u0180\14\0\2\u02f1\1\u0342\6\u02f1\1\u03a0"+
    "\31\u02f1\2\0\2\u02f1\33\0\1\u03a1\42\0\1\u0320\2\0"+
    "\1\u0373\36\0\1\u03a2\27\0\1\u031a\43\0\2\264\1\u01bf"+
    "\1\264\1\u03a3\36\264\2\0\4\264\1\u01bf\2\264\1\u0289"+
    "\35\264\2\0\4\264\1\u03a4\40\264\2\0\2\264\17\0"+
    "\1\u0219\27\0\3\u0384\1\u03a5\37\u0384\2\0\2\u0384\11\0"+
    "\1\310\70\0\1\u03a6\13\0\43\u03a7\2\0\2\u03a7\14\0"+
    "\1\u03a8\44\0\1\u0180\42\0\1\310\40\0\14\u035a\1\u03a9"+
    "\5\u035a\1\u038b\20\u035a\2\0\2\u035a\10\0\1\u03aa\71\0"+
    "\1\u03ab\27\0\1\u03ac\54\0\1\325\50\0\1\u03ad\54\0"+
    "\1\u01f0\42\0\1\325\52\0\1\u01a7\34\0\1\u03ae\40\0"+
    "\1\u03af\56\0\1\u03b0\41\0\1\u0266\55\0\1\u0330\36\0"+
    "\1\u0385\46\0\1\u03b1\54\0\1\u03b2\36\0\1\u0320\56\0"+
    "\1\u03b3\34\0\1\u03b4\36\0\43\u03b5\2\0\2\u03b5\7\0"+
    "\1\u03b6\53\0\1\u03b7\32\0\2\264\1\u01bf\7\264\1\u03b8"+
    "\30\264\2\0\2\264\3\u0384\1\u03a5\16\u0384\1\u03b9\20\u0384"+
    "\2\0\2\u0384\10\0\1\u03ba\36\0\23\u03a7\1\u03bb\17\u03a7"+
    "\2\0\2\u03a7\43\u03bc\2\0\2\u03bc\22\0\1\u03bd\46\0"+
    "\1\u03ba\32\0\1\u01a7\45\0\1\u03be\55\0\1\325\44\0"+
    "\1\u038d\56\0\1\u0106\32\0\1\u03bf\43\0\1\u03c0\57\0"+
    "\1\u0319\35\0\1\u03c1\43\0\23\u03b5\1\u03c2\17\u03b5\2\0"+
    "\2\u03b5\22\0\1\u03c3\32\0\1\u01d9\40\0\3\u0384\1\u03a5"+
    "\10\u0384\1\u03c4\26\u0384\2\0\2\u0384\27\0\1\u035d\17\0"+
    "\20\u03a7\1\u03c5\2\u03a7\1\u03bb\17\u03a7\2\0\2\u03a7\4\u03bc"+
    "\1\u03c6\36\u03bc\2\0\2\u03bc\3\0\1\u03c7\47\0\1\325"+
    "\53\0\1\325\41\0\1\u03c8\66\0\1\u03c9\22\0\20\u03b5"+
    "\1\u03ca\2\u03b5\1\u03c2\17\u03b5\2\0\2\u03b5\16\0\1\u03cb"+
    "\30\0\4\u03a7\1\u03cc\16\u03a7\1\u03bb\17\u03a7\2\0\2\u03a7"+
    "\4\u03bc\1\u03c6\1\u03cd\35\u03bc\2\0\2\u03bc\33\0\1\u03ce"+
    "\27\0\1\u03cf\74\0\1\u03d0\4\0\4\u03b5\1\u03d1\16\u03b5"+
    "\1\u03c2\17\u03b5\2\0\2\u03b5\16\0\1\u03d2\30\0\23\u03a7"+
    "\1\u03bb\7\u03a7\1\u03d3\7\u03a7\2\0\2\u03a7\2\u03bc\1\u03d4"+
    "\1\u03bc\1\u03c6\36\u03bc\2\0\2\u03bc\4\0\1\u03d5\44\0"+
    "\1\u03d6\67\0\1\u03d7\23\0\43\u03d8\2\0\2\u03d8\6\0"+
    "\1\u03d9\40\0\2\u03a7\1\u03da\20\u03a7\1\u03bb\17\u03a7\2\0"+
    "\2\u03a7\3\u03bc\1\u03db\1\u03c6\36\u03bc\2\0\2\u03bc\22\0"+
    "\1\u01d9\40\0\1\u03dc\52\0\1\u03dd\26\0\2\u03d8\1\u03de"+
    "\40\u03d8\2\0\2\u03d8\7\0\1\u011c\37\0\16\u03a7\1\u03df"+
    "\4\u03a7\1\u03bb\17\u03a7\2\0\2\u03a7\25\0\1\u0358\31\0"+
    "\1\u03e0\36\0\2\u03d8\1\u03de\7\u03d8\1\u03e1\30\u03d8\2\0"+
    "\2\u03d8\12\u03a7\1\u03e2\10\u03a7\1\u03bb\17\u03a7\2\0\2\u03a7"+
    "\16\0\1\346\30\0\2\u03d8\1\u03de\30\u03d8\1\u03e3\7\u03d8"+
    "\2\0\2\u03d8\22\u03a7\1\u03e4\1\u03bb\17\u03a7\2\0\2\u03a7"+
    "\2\u03d8\1\u03de\10\u03d8\1\u03e5\27\u03d8\2\0\4\u03d8\1\u03de"+
    "\3\u03d8\1\u03e6\34\u03d8\2\0\4\u03d8\1\u03de\13\u03d8\1\u03e7"+
    "\24\u03d8\2\0\4\u03d8\1\u03de\13\u03d8\1\u03e8\24\u03d8\2\0"+
    "\2\u03d8";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36465];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\27\1\2\11\3\1\2\11\2\1\3\0"+
    "\1\1\3\0\1\11\13\0\1\1\1\0\1\1\23\0"+
    "\2\1\1\0\1\1\26\0\1\1\21\0\1\1\2\0"+
    "\1\1\1\0\1\11\1\1\3\0\1\1\2\0\1\1"+
    "\3\0\1\1\2\0\1\1\5\0\1\11\5\0\1\1"+
    "\20\0\1\1\1\0\1\11\1\0\1\11\26\0\1\11"+
    "\2\0\1\11\5\0\1\1\4\0\1\1\1\0\1\11"+
    "\3\0\1\11\3\0\1\1\1\11\1\1\1\11\1\0"+
    "\1\1\47\0\1\1\16\0\1\11\4\0\1\11\11\0"+
    "\1\1\4\0\1\1\1\0\1\1\4\0\1\1\24\0"+
    "\1\1\3\0\1\1\31\0\1\1\15\0\1\1\6\0"+
    "\1\1\1\0\1\1\4\0\1\1\6\0\1\1\6\0"+
    "\1\1\12\0\1\1\22\0\1\1\37\0\1\11\3\0"+
    "\1\1\3\0\3\11\2\0\1\1\4\0\1\1\4\0"+
    "\1\1\1\0\1\11\11\0\1\1\1\0\1\1\26\0"+
    "\1\11\15\0\1\11\12\0\1\1\15\0\1\1\12\0"+
    "\1\1\10\0\1\1\3\0\1\1\1\11\12\0\1\1"+
    "\1\0\1\1\21\0\1\1\5\0\1\1\1\0\1\1"+
    "\13\0\1\1\12\0\1\1\4\0\1\1\6\0\1\11"+
    "\6\0\1\1\13\0\1\1\23\0\2\1\5\0\1\11"+
    "\1\0\1\1\1\0\1\1\12\0\1\1\41\0\1\1"+
    "\53\0\1\11\17\0\1\11\6\0\1\1\20\0\1\1"+
    "\17\0\1\11\4\0\1\11\1\1\23\0\1\11\2\0"+
    "\1\1\52\0\1\1\2\0\1\1\5\0\1\1\16\0"+
    "\1\1\13\0\1\1\26\0\1\1\10\0\1\1\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1000];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return ERROR;
            }
          case 40: break;
          case 2: 
            { lexeme=yytext(); return NUMERO;
            }
          case 41: break;
          case 3: 
            { lexeme=yytext(); return ART_INDEF;
            }
          case 42: break;
          case 4: 
            { lexeme=yytext(); return ADJ_POSESIV;
            }
          case 43: break;
          case 5: 
            { /* ignore */
            }
          case 44: break;
          case 6: 
            { lexeme=yytext(); return SIG_PUNT;
            }
          case 45: break;
          case 7: 
            { return resta;
            }
          case 46: break;
          case 8: 
            { return division;
            }
          case 47: break;
          case 9: 
            { return multiplicacion;
            }
          case 48: break;
          case 10: 
            { return suma;
            }
          case 49: break;
          case 11: 
            { lexeme=yytext(); return PREP_LUG;
            }
          case 50: break;
          case 12: 
            { lexeme=yytext(); return CONJ_SUBORCAUS;
            }
          case 51: break;
          case 13: 
            { lexeme=yytext(); return AUX_PRESEN;
            }
          case 52: break;
          case 14: 
            { lexeme=yytext(); return PREP_MOV;
            }
          case 53: break;
          case 15: 
            { lexeme=yytext(); return ADJ_PROPERSO;
            }
          case 54: break;
          case 16: 
            { lexeme=yytext(); return PREP_MOD;
            }
          case 55: break;
          case 17: 
            { lexeme=yytext(); return CONJ_COORDISYU;
            }
          case 56: break;
          case 18: 
            { lexeme=yytext(); return VERBO_PRESENT;
            }
          case 57: break;
          case 19: 
            { lexeme=yytext(); return CONJ_COORCOPU;
            }
          case 58: break;
          case 20: 
            { lexeme=yytext(); return VERBO_PASADOSIMP;
            }
          case 59: break;
          case 21: 
            { lexeme=yytext(); return ADJ_CALIFI;
            }
          case 60: break;
          case 22: 
            { lexeme=yytext(); return PROF;
            }
          case 61: break;
          case 23: 
            { lexeme=yytext(); return ART_DEFI;
            }
          case 62: break;
          case 24: 
            { lexeme=yytext(); return ADJ_NUMCARDIN;
            }
          case 63: break;
          case 25: 
            { lexeme=yytext(); return SUS_COMUN;
            }
          case 64: break;
          case 26: 
            { lexeme=yytext(); return ADJ_PROPOSESIV;
            }
          case 65: break;
          case 27: 
            { lexeme=yytext(); return WEATH;
            }
          case 66: break;
          case 28: 
            { lexeme=yytext(); return VERBO_PASADOPARTICI;
            }
          case 67: break;
          case 29: 
            { lexeme=yytext(); return CONJ_COORADVERV;
            }
          case 68: break;
          case 30: 
            { lexeme=yytext(); return CONJ_CONJSUBOCOMPARA;
            }
          case 69: break;
          case 31: 
            { lexeme=yytext(); return ADJ_DEMOS;
            }
          case 70: break;
          case 32: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONSEC;
            }
          case 71: break;
          case 33: 
            { lexeme=yytext(); return ADJ_PROINTERR;
            }
          case 72: break;
          case 34: 
            { lexeme=yytext(); return CONJ_CONJSUBOCONCES;
            }
          case 73: break;
          case 35: 
            { lexeme=yytext(); return SUS_ABSTRACT;
            }
          case 74: break;
          case 36: 
            { lexeme=yytext(); return SUS_PROPIO;
            }
          case 75: break;
          case 37: 
            { lexeme=yytext(); return ADJ_NUMORD;
            }
          case 76: break;
          case 38: 
            { lexeme=yytext(); return ADJ_PROREFLEX;
            }
          case 77: break;
          case 39: 
            { lexeme=yytext(); return CONJ_SUBORDISYU;
            }
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
